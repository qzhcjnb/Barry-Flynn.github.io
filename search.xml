<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【计组原理】第1章 计算机系统概论</title>
      <link href="/2021/10/12/2021-17/"/>
      <url>/2021/10/12/2021-17/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文所属《数据库系统原理》分类专栏，相关文章导航请点击<a href="https://barry-flynn.github.io/2021/10/12/2021-16/">《数据库系统原理》目录汇总贴</a></p></blockquote><p>【计组原理】第1章 计算机系统概论<br>了解计算机内部的工作过程：I/O→存储器→CPU→存储器→I/O，即实际上指的是指令流和数据流。同时还要了解到尽管当今计算机发展到千变万化的程度，但其最根本的组成原理还是基于冯•诺依曼结构。</p><hr><h3 id="计算机系统简介"><a href="#计算机系统简介" class="headerlink" title="计算机系统简介"></a>计算机系统简介</h3><ul><li>计算机系统由“<strong>硬件</strong>”和“<strong>软件</strong>”两大部分组成。</li><li>所谓<code>硬件</code>，是指计算机的实体部分，由看得见摸得着的各种电子元器件，各类光、电、机设备的实体部分物组成。如主机、外部设备等。</li><li>所谓<code>软件</code>，是指看不见摸不着，由人们事先编制的具有各类特殊功能的程序组成。通常将其寄存于各类媒体，并存放在计算机的主存或辅存内。</li><li>软件的作用和地位已经成为评价计算机系统性能好坏的重要标志，但软件的性能也必须依托硬件的支撑。因此，概括而言，<strong>计算机性能的好坏取决于“软”“硬”件功能的总和</strong>。</li></ul><p>（更多请见下方课后题1~4题）</p><h3 id="计算机的基本组成"><a href="#计算机的基本组成" class="headerlink" title="计算机的基本组成"></a>计算机的基本组成</h3><p>冯·诺依曼计算机的特点：</p><ol><li>计算机有运算器、存储器、控制器、输入设备和输出设备五大部件组成</li><li>指令和数据以同等地位存放于存储器内。并可按地址访问。</li><li>指令和数据均可用二进制表示。</li><li>指令由操作码和地址吗组成。操作码表示操作的性质、地址码表示操作数在存储器中的位置。</li><li>指令在存储器中按顺序存放。通常，指令时顺序执行的。在特殊情况下，可根据运算结果或指定的条件来改变运算顺序。</li><li>机器以运算器为中心，输入输出设备和存储器之间的数据传送通过运算器完成。</li></ol><h3 id="计算机硬件的性能指标"><a href="#计算机硬件的性能指标" class="headerlink" title="计算机硬件的性能指标"></a>计算机硬件的性能指标</h3><ol><li><strong>机器字长</strong>：<br> 是指计算机CPU一次能处理的二进制数据的位数，通常与CPU的寄存器位数有关。机器字长越长，数的表示范围越大，计算精度也越高。</li><li><strong>存储容量</strong>：<ul><li>主存容量：是指主存中存放二进制代码的总位数。<br>即：<strong>储存容量 = 储存单元个数 x 储存字长</strong><br>例：<strong>2<sup>16</sup> x 32 = 2<sup>21</sup> = 2M位</strong> （1M = 2<sup>20</sup>）</li><li>辅存容量：通常用字节数来表示。<br>例：某机辅存（如硬盘）容量为80GB<br>（1G = 1024M = 2<sup>10</sup> x 2<sup>20</sup> = 2<sup>30</sup>）</li></ul></li><li><strong>运算速度</strong><br>现代机器的运算速度采用单位时间内执行指令的平均条数来衡量。<ul><li>主频</li><li>辛普森法：综合考虑每条指令的执行时间以及他们在全部操作中的所占的百分比；</li><li>MIPS：单位时间内执行指令的平均条数</li><li>CPI：单位时间内执行指令的平均条数</li><li>FLOPS：浮点运算次数每秒。</li></ul></li></ol><hr><h3 id="【思考题与习题】"><a href="#【思考题与习题】" class="headerlink" title="【思考题与习题】"></a>【思考题与习题】</h3><ol><li><p>什么是计算机系统、计算机硬件和计算机软件？硬件和软件哪个更重要？</p><blockquote><p>解答：<br>[1]<strong>硬件系统和软件系统</strong>共同构成了一个完整的计算机系统。<br>[2]计算机<strong>硬件</strong>是指有形的物理设备，是计算机系统中实际物理装置的总称。<br>[3]<strong>软件</strong>是指在硬件上运行的程序和相关的数据及文档。<br>[4]<strong>都重要</strong>！软件和硬件相互依存，缺一不可。</p></blockquote></li><li><p>如何理解计算机系统的层次结构？</p><blockquote><p>解答：<br>抽象的来说可以分9层；但是现在我们大多数时候说的都是五层结构；即:<br>[1] <strong>虚拟机器M4</strong>（高级语言机器）<br>（用编译程序翻译成汇编语言程序），<br>[2] <strong>虚拟机器M3</strong>（汇编语言机器）<br>（用汇编语言翻译成机器语言程序），<br>[3] <strong>虚拟机器M2</strong>（操作系统机器）<br>（用机器语言解释操作系统），<br>[4] <strong>传统机器M1</strong>（机器语言机器）<br>（用微程序解释机器指令），<br>[5] <strong>微程序机器M0</strong>（微指令系统）<br>（由硬件直接执行命令）。</p></blockquote></li><li><p>说明高级语言，汇编语言和机器语言的差别及联系。</p><blockquote><p>解答：<br>[1]<strong>机器语言</strong>：即计算机唯一可以识别并直接执行的语言。由二进制的0/1代码组成。<br>[2]<strong>汇编语言</strong>：用英文单词或其他缩写代替二进制的指令代码，相比机器语言更容易记忆，使用汇编语言编写的程序必须经过汇编程序翻译，将其转化为机器语言，然后再由机器执行。<br>[3]<strong>高级语言</strong>：如C、C++、JAVA、Python，是为了方便程序设计人员而发明的，通常需要经过编译程序编译成汇编语言程序，然后在经过汇编操作转化为机器语言程序，然后再由机器执行。</p></blockquote></li><li><p>如何理解计算机组成和计算机体系结构?<br>（课本P7~8）</p><blockquote><p>解答：<br>1、<code>计算机组成</code>指的是系统结构的逻辑实现，包括机器机内的数据流和控制流的组成及逻辑设计等，主要分为五个部分；<br>2、<code>计算机体系结构</code>是程序员所看到的计算机的属性，即概念性结构与功能特性。<br><a href="https://www.php.cn/faq/454611.html">如何理解计算机组成和计算机体系结构？</a>-php中文网</p></blockquote></li><li><p>冯诺依曼计算机的特点是什么。<br>（课本P8）</p><blockquote><p>解答：<br>[1]计算机由五大部件组成：存储器，运算器，控制器，输入设备，输出设备。<br>[2]指令和数据以同等地位存于存储器，可按地址顺序访问。<br>[3]指令和数据用二进制表示。<br>[4]指令由操作码和地址码组成。<br>[5]存储程序，程序在计算机中顺序存放。<br>[6]以运算器为中心。（不合理：花大量的时间进行数据传输，降低了运算器数据运算的效率）</p></blockquote></li><li><p>画出计算机硬件组成框图，说明各部件的作用及计算机硬件的主要技术指标。</p><blockquote><p>解答：<br>现代计算机硬件组成框图:<br><img src="https://i.loli.net/2021/10/13/zE3o7a2iug4xZRU.png" alt="图1-1 现代计算机硬件组成框图.png"><br>[1]<strong>CU（控制器）</strong> 控制整个计算机系统，以及资源的分配和调度。<br>[2]<strong>ALU（运算器）</strong> 进行算数运算和逻辑运算，用来处理数据信息。<br>[3]<strong>存储器</strong> 是计算机的存储部件，用来存储程序和数据。分为主存和辅存。cpu直接访问主存。<br>[4]<strong>输入设备</strong> 将程序和数据以计算机能识别和接受的信息形式输入计算机。<br>[5]<strong>输出设备</strong> 将计算机处理得到的结果以人所能接受的形式或其他系统所要求的信息形式输出。与输入设备统称为IO，是计算机与外界的桥梁。</p><p>硬件的主要技术指标：<br>[1]<strong>机器字长</strong>：是指计算机进行一次整数运算所能处理的二进制数据的位数，通常与CPU的寄存器位数，加法器有关，机器字长越长，数的表示范围越大，计算精度越高。<br>[2]<strong>数据通路带宽</strong>：是指数据总线一次所能并行传送信息的位数。这里所说的数据通路宽度是指外部数据总线的宽度。（刚开始学习的新同学不用纠结这个问题。）<br>[3]<strong>主存容量</strong>：主存储器所能存储信息的最大容量，通常以字节来衡量，也可以用字数X字长来表示存储容量。MDR反映存储字的字长，MAR反映存储单元的个数。<br>[4]<strong>运算速度</strong>：</p><ul><li>1.吞吐量和响应时间。 前者指单位时间内处理请求的数量。后者为从用户向计算机发送一个请求，到系统对该请求做出响应并获得所需结果的等待时间。通常包括CPU时间与等待时间。</li><li>2.主频和CPU时钟周期：前者为计算机内部的注视中的频率，对于同一个型号的计算机，主频越高，运行速度越快。后者为主频的倒数，主频通常以HZ为单位。</li><li>3.CPI与MIPS：前者指执行一次所需要的时间，是一个平均值。后者为每秒执行多少百万条指令。二者的转化公式为：MIPS=指令条数/（执行时间x10^6）=主频/(执行时间x10的6次方)。</li><li>4.CPU执行时间指运行一个程序所花费的时间，CPU执行时间=CPU时钟周期/主频=（指令条数xCPI）/主频。</li><li>5.MFLOPS、GFLOPS、TFLOPS、PFLOPS、EFLOPS、ZFLOPS</li></ul><p>[5]<strong>基准程序</strong>：是专门评价性能的一组程序。</p></blockquote></li><li><p>解释概念。（手动标星号！！！）</p><blockquote><p><strong>主机</strong>：是计算机硬件的组成部分，由cpu和主存储构成。<br><strong>CPU中央处理器</strong>，是计算机硬件的核心部件，由运算器和控制器组成；（早期的运算器和控制器不在同一芯片上，现在的 CPU 内除含有运算器和控制器外还集成了 CACHE ）。<br><strong>主存</strong>：计算机中存放正在运行的程序和数据的存储器，为计算机的主要工作存储器，按地址存取；由存储体、各种逻辑部件及控制电路组成。<br><strong>存储单元</strong>：可存放一个机器字并具有特定存储地址的存储单位。<br><strong>存储元件</strong>：存储一位二进制信息的物理元件，是存储器中最小的存储单位，又叫存储基元或存储元，不能单独存取。<br><strong>存储基元</strong>：就是存储元件<br><strong>存储元</strong>：就是存储元件<br><strong>存储字长</strong>：存储字中这串二进制代码的位数<br><strong>存储容量</strong>：存储器中可存二进制代码的总量；<br><strong>机器字长</strong>：指CPU一次能处理的二进制数据的位数，通常与CPU的寄存器位数有关。<br><strong>指令字长</strong>：机器指令中二进制代码的总位数。</p></blockquote></li><li><p>解释英文代号（！同样重要）</p><blockquote><ul><li>CPU：同上一个题。</li><li>PC：程序计数器，</li><li>IR：指令寄存器，其功能是存放当前正在执行的指令。</li><li>CU：控制单元（部件），为控制器的核心部件，其功能是解释存储器中的指令，产生微操作命令序列</li><li>ALU:算术逻辑运算单元，为运算器的核心部件，其功能是进行算术、逻辑运算。</li><li>ACC:累加器，是运算器中既能存放运算前的操作数，又能存放运算结果的寄存器。</li><li>MQ:商寄存器，乘法运算时存放乘数、除法时存放商的寄存器。</li><li>X:表示操作数寄存器，即运算器中工作寄存器之一，用来存放操作数；</li><li>MAR:存储器地址寄存器，在主存中用来存放欲访问的存储单元的地址。</li><li>MDR存储器数据缓冲寄存器，在主存中用来存放从某单元读出、或要写入某存储单元的数据。</li><li>I/O输入 / 输出设备，为输入设备和输出设备的总称</li><li>MIPS每秒执行百万条指令数，</li><li>CPI指执行一次所需要的时间，是一个平均值。</li><li>FLOPS 浮点运算次数每秒</li></ul></blockquote></li><li><p>画出主机框图，分别以存数指令“STA M”和加法指令“ADD M”（M均为主存地址）为例，在图中按序完成该指令（包括取指阶段）的信息流程（如—&gt;①）。假设主存容量为265Mx32位，在指令字长、存储字长、机器字长相等的条件下，指出图中各寄存器的位数。</p><blockquote><p>图片请见第一章课件P20~27<br>(1) STA M指令：PC-&gt;MAR ;MAR-&gt;M(主存储);M-&gt;MDR;MDR-&gt;IR;OP(IR)-&gt;CU;Ad(IR)-&gt;MAR;MAR-&gt;M;ACC-&gt;MDR;MDR-&gt;M;<br>(2) ADD M指令：PC-&gt;MAR;MAR-&gt;M;M-&gt;MDR;MDR-&gt;IR;OP(IR)-&gt;CU;Ad（IR）-&gt;MAR;MAR-&gt;M;M-&gt;MDR;MDR-&gt;X;ADD;ALU-&gt;ACC;ACC-&gt;MDR;<br>(3) 寄存器的位数:题中给出主存容量，ACC、X、IR、MDR寄存器的位数等于32位，即所说的存储子长，PC、MR均为28位</p></blockquote></li><li><p>根据迭代公式 √x = 1/2（y<sub>n</sub>+x/y<sub>n</sub>），设初态y<sub>0</sub>=1，要求精度为是e，试编制求根号下x的解题程序（指令系统自定），并结合缩编程序简述计算机的解题过程。</p><blockquote><p>答案不唯一</p></blockquote></li><li><p>指令和数据都存于存储器中，计算机如何区分它们？</p><blockquote><p>解答：<br>通过地址来源区分，由 PC 提供存储单元地址的取出的是指令，由指令地址码部分提供存储单元地址的取出的是操作数。（000011 0000001010）后面的12位即为指令地址码。<br><strong>除此之外</strong>，在取指令阶段（或取指微程序）取出的为指令，在执行指令阶段（或相应微程序）取出的即为数据。</p></blockquote></li><li><p>什么是指令，什么是程序？</p><blockquote><p>解答：<br>简单的说，程序比指令更大，执行程序就是执行多个指令。<br><strong>指令</strong>是CPU操作的基本单位，指令系统决定了计算机能做什么不能做什么，<br><strong>程序</strong>是由指令构成的。</p></blockquote></li></ol><p><a href="https://blog.csdn.net/qq_43606438/article/details/117674266?utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-2.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-2.no_search_link">本章习题答案参考</a></p>]]></content>
      
      
      <categories>
          
          <category> 《计算机组成原理》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计组原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《计算机组成原理》目录汇总帖</title>
      <link href="/2021/10/12/2021-16/"/>
      <url>/2021/10/12/2021-16/</url>
      
        <content type="html"><![CDATA[<div class="note blue no-icon flat"><p><font size=2>本页作为我学习“计算机组成原理”这门课的博客笔记汇总帖，点击对应目录可跳转到我的对应博客，内容会持续完善，欢迎关注我今后的相关笔记文章。</font></p></div><blockquote><p>【声明】：相关博客仅作为学习笔记使用，如若内容构成侵权请及时联系我修改/关闭/删除相应内容。<br>转载请务必注明来自【百里飞洋】(<a href="https://barry-flynn.github.io/2021/10/12/2021-16/">https://barry-flynn.github.io/2021/10/12/2021-16/</a>) ，否则<code>侵权必究</code>！</p></blockquote><p>主要学习路线采用高等教育出版社的<kbd>《计算机组成原理 第3版》</kbd>目录，再次声明<code>相关博客仅作为学习笔记使用</code>，进行的知识点整理<code>目的是便于本人的理解与备忘</code>，分享纯属<code>为爱发电</code>，不会进行商业售卖，学习过程中也会吸收网络其他视频和博客博主的知识，并添加自己的原创理解，若对你有帮助欢迎到文章下方进行<code>打赏</code>（一分一毛一块也是爱）。</p><p>感谢所有老师、同学、前辈和引路人，在此脱帽致敬~</p><hr /><p><img src="https://i.loli.net/2021/10/13/81sNHqOJ9SKTnR3.png" alt="图0-0 本书各章节结构.png"></p><h1 id="第一篇-概论"><a href="#第一篇-概论" class="headerlink" title="第一篇 概论"></a>第一篇 概论</h1><h2 id="第1章-计算机系统概论"><a href="#第1章-计算机系统概论" class="headerlink" title="第1章 计算机系统概论"></a><a href="https://barry-flynn.github.io/2021/10/12/2021-17/">第1章 计算机系统概论</a></h2><ul><li>计算机系统简介</li><li>计算机的基本组成</li><li>计算机硬件的性能指标</li></ul><h2 id="第2章-计算机的发展及应用"><a href="#第2章-计算机的发展及应用" class="headerlink" title="第2章 计算机的发展及应用"></a>第2章 计算机的发展及应用</h2><hr><h1 id="第二篇-计算机系统的硬件结构"><a href="#第二篇-计算机系统的硬件结构" class="headerlink" title="第二篇 计算机系统的硬件结构"></a>第二篇 计算机系统的硬件结构</h1><h2 id="第3章-系统总线"><a href="#第3章-系统总线" class="headerlink" title="第3章 系统总线"></a>第3章 系统总线</h2><h2 id="第4章-存储器"><a href="#第4章-存储器" class="headerlink" title="第4章 存储器"></a>第4章 存储器</h2><h2 id="第5章-输入输出系统"><a href="#第5章-输入输出系统" class="headerlink" title="第5章 输入输出系统"></a>第5章 输入输出系统</h2><hr><h1 id="第三篇-中央处理器"><a href="#第三篇-中央处理器" class="headerlink" title="第三篇 中央处理器"></a>第三篇 中央处理器</h1><h2 id="第6章-计算机的运算方法"><a href="#第6章-计算机的运算方法" class="headerlink" title="第6章 计算机的运算方法"></a>第6章 计算机的运算方法</h2><h2 id="第7章-指令系统"><a href="#第7章-指令系统" class="headerlink" title="第7章 指令系统"></a>第7章 指令系统</h2><h2 id="第8章-CPU的结构和功能"><a href="#第8章-CPU的结构和功能" class="headerlink" title="第8章 CPU的结构和功能"></a>第8章 CPU的结构和功能</h2><hr><h1 id="第四篇-控制单元"><a href="#第四篇-控制单元" class="headerlink" title="第四篇 控制单元"></a>第四篇 控制单元</h1><h2 id="第9章-控制单元的功能"><a href="#第9章-控制单元的功能" class="headerlink" title="第9章 控制单元的功能"></a>第9章 控制单元的功能</h2><h2 id="第10章-控制单元的设计"><a href="#第10章-控制单元的设计" class="headerlink" title="第10章 控制单元的设计"></a>第10章 控制单元的设计</h2>]]></content>
      
      
      <categories>
          
          <category> 《计算机组成原理》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计组原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于大二是否继续担任团支书的思考</title>
      <link href="/2021/10/12/2021-15/"/>
      <url>/2021/10/12/2021-15/</url>
      
        <content type="html"><![CDATA[<blockquote><p>仅代表个人观点，内容难免有所偏颇，较为主观。人的观念也会随着时间的推移和阅历的增加而改变，此文仅代表发文当天的心境而写作。</p></blockquote><p>&emsp;&emsp;时间真的很快，记忆还停留在大一入学那天，就已经大二了。大学究竟是什么样子？前段时间我在B站发的视频中用了四个字概括:<br>忙，爽，惆，淡。</p><hr><p><strong>【生日】上了大学就轻松了？丨大一学年总结</strong><br>点击右边<kbd><a href="https://www.bilibili.com/video/BV1Ro4y1X7r9?share_source=copy_web">跳转到B站播放</a></kbd>2021-07-16 11:30:01</p><iframe src="//player.bilibili.com/player.html?aid=376694107&bvid=BV1Ro4y1X7r9&cid=370259904&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><hr><p>&emsp;&emsp;记得高考完的那个假期，我给自己暗暗定过一个小打算，就是：在这大学的四年中，给大一半年时间让自己尽情体验一下那个我想象中的“大学丰富多彩的生活”，不至于以后后悔。于是我 直接一股脑面试了两个校级组织，竞选了从来没敢想过的班长职位，足足加入了五个社团……</p><p>&emsp;&emsp;现在回想起来，颇有些“初生牛犊不怕虎”之势。结果大一这一年，可把我忙坏了（苦笑），有时候真的恨不得分身成两个人来干活。看着别人可以在宿舍休息，在校园漫步，有时间谈恋爱，有空闲培养爱好，真的煞是羡慕。而我不是在上课的路上，就是在开会的路上。</p><p>&emsp;&emsp;后来啊，教务处助理减员，我摆脱掉了这个校级组织，只剩下另外一个校级组织：党委宣传部的新媒体协会助理职务了。当初加入新媒体的初衷，是想学习修图(PS)、剪辑(PR)、特效(AE)等，并挥洒一下自己对剪视频的热爱，还能参与运营一下学校官方的抖音、B站账号，怎么想都是一份美差。后来，竟然没想到……其实最终还是沦为了“工具人”。开例会、出策划、赶工剪视频剪到吐，是我我渐渐感受不到刚高考完那个时候的视频创作的乐趣，而是听到“剪视频”这三个字都有点呕吐感，像是患上了PDST。<del>(夸张了夸张了)</del></p><p>&emsp;&emsp;然后就是关于班长这个职位。在工作了大约一个月之后，导员就让我和团支书这个职位互换了一下，刚开始还接受不了，但慢慢也就释然了。其实现在想来，真是个很对的决定，曼曼确实比我更适合当班长，我真的不及她那么优秀。（没有妄自菲薄，而是实话实说）</p><p>&emsp;&emsp;大学一年，就这样糊里糊涂的过去了。体验到那个想象中的“美好的大学生活”了吗？我不知道。忙和抱怨充斥着我大一的一整年，成绩也并不是很有成色，最终评优评先评奖学金保研也都与我无缘……加上那可怜的班委综测分（学校其他的职务还不能累加，这个是我很气愤的一条综测条例，相当于除了班委，其他学生工作一年白干），最后我的绩点和综测也没多少，核算的那几天还盯着大家的材料累死累活的……</p><p>&emsp;&emsp;现在，导员发布了大二学年学生骨干的选举通知，我又像大一那时候一样，盯着通知文件，再次陷入了纠结之中。大二，当，还是不当？</p><p>&emsp;&emsp;我不知道……</p><hr><p>&emsp;&emsp;我来个自我评价吧：</p><ol><li>大一这一年，对于作为一名团支书来说，我，问心无愧。每一则通知，每一项任务，每一次开会，我都尽己所能地完成。</li><li>但是，对于作为一名学生而言，我，愧对所有关心我的人。为什么呢？因为我没有协调好工作、学习和娱乐时间，没有把态度放端正在学习上，而这，恰恰是作为一名学生最起码要做到的事情。</li></ol><p>&emsp;&emsp;在这一年中，我把每天大量的时间放在无意义的工作和娱乐上，课上时间也没有特别的认真听讲，但仍然沉醉于自己给自己营造的“很忙”的假氛围中自我感动。这种自我欺骗式的假学习，如果我没有记错的话（当然也不可能记错），从高中就开始了吧？不然也不会高考只考那一点儿分，来到这所双非大学读书。</p><p>&emsp;&emsp;你总是这样，分不清主次，总被一些无所谓的东西吸引着，去干一些无所谓的事情。自律和时间管理能力真的太重要了，假努力无异于自毁前程，就像B站看到的一个评论：</p><blockquote><p>我室友每天6.30的闹铃把我叫醒，然后我收拾完学习到8点他才起床。</p></blockquote><p>这种就属于典型的假自律与假努力。被窝舒服吗？舒服。是你这个年纪和处境应该享受的吗？真的不应该啊兄弟！</p><hr><p>那么现在，抛开一切的顾虑，真诚地问一下自己：<br>团支书这个职位可以给你带来什么？你又想获得什么？（也不用说什么都不图，那不现实）</p><blockquote><p>为了入党？<br>那几分综测分？<br>不晓得有没有用的人际关系？<br>还是仅仅想要这种当班干部的感觉？</p></blockquote><p>想清楚，考虑明白，做出选择，且别后悔，就够了。</p><p>大学，还有三年啊。</p><p>兄弟。</p>]]></content>
      
      
      <categories>
          
          <category> 日常生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【周报总结】大二上学期丨第5周</title>
      <link href="/2021/10/11/2021-14/"/>
      <url>/2021/10/11/2021-14/</url>
      
        <content type="html"><![CDATA[<p>【周报总结】大二上学期丨第5周<br>2021年10月04日~10月10日</p><hr><h2 id="第五周完成情况统计"><a href="#第五周完成情况统计" class="headerlink" title="第五周完成情况统计"></a>第五周完成情况统计</h2><ul><li>看了韩剧《鱿鱼游戏》《轮到你了》B站解说</li><li>韩国电影《釜山行》的两部</li><li>收拾行李（9号临走才匆忙收拾…）</li><li>核酸检测（提前没测，9号住的旅馆，耽误10号一天…）</li></ul><h2 id="经验、心得和总结"><a href="#经验、心得和总结" class="headerlink" title="经验、心得和总结"></a>经验、心得和总结</h2><ul><li>永远不要相信自己的自制力，以及每次放假前规划的“雄心壮志”！你做不到！！！</li><li>万事提前做，别拖！别拖！！别拖到最后！！！</li></ul><h2 id="制定的第六周目标"><a href="#制定的第六周目标" class="headerlink" title="制定的第六周目标"></a>制定的第六周目标</h2><p>11号开始就第一天在学校里线下授课了，课表简直满爆了！赶紧补一下假期的网课吧！要是跟不上有你哭的！</p><ul><li>尽快在淘宝/互助群买来二手课本</li><li>补习假期网课内容（尽快跟上节奏啊）</li><li>清洗水灾后发霉的枕头被子（哭死！）</li><li>洗积攒的衣服（尽量抽空吧）</li><li>高数II和电子（你只有两周时间！）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周报总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【周报总结】大二上学期丨第4周</title>
      <link href="/2021/10/04/2021-13/"/>
      <url>/2021/10/04/2021-13/</url>
      
        <content type="html"><![CDATA[<p>【周报总结】大二上学期丨第4周<br>2021年09月27日~10月03日</p><hr><h2 id="当周计划"><a href="#当周计划" class="headerlink" title="当周计划"></a>当周计划</h2><p>这周是第一次做总结哈，没制定什么具体计划。</p><h2 id="计划完成情况"><a href="#计划完成情况" class="headerlink" title="计划完成情况"></a>计划完成情况</h2><ul><li>学了两节数据库</li><li>写了几篇Linux基础命令博文笔记</li></ul><h2 id="经验、心得和总结"><a href="#经验、心得和总结" class="headerlink" title="经验、心得和总结"></a>经验、心得和总结</h2><p>以后一定要每日有规划，每周有总结，不然总感觉啥也没干就一天天地过去了。</p><h2 id="制定下周（第五周）目标"><a href="#制定下周（第五周）目标" class="headerlink" title="制定下周（第五周）目标"></a>制定下周（第五周）目标</h2><p>终于，下周就返校了。</p><ul><li>放平心态，做好准备，调整作息。</li><li>补习一下大二这些新课，别开学之后跟不上。</li><li>赶一下之前的旧课，看看能不能…Emm…说了也白说，祝你好运。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周报总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo博客】解决push博客源码时themes下的主题文件夹无法备份更新到GitHub分支</title>
      <link href="/2021/10/02/2021-12/"/>
      <url>/2021/10/02/2021-12/</url>
      
        <content type="html"><![CDATA[<h1 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h1><p>我平时在GitHub的hexo分支中备份博客源码，但某一天突然发现，主题文件夹只有第一次使用时备份成功了。也就是说，之后我改动过多次主题配置文件<code>_config.yml</code>并 push 到GitHub，全没有push更新成功过…</p><p>啊这…那我万一哪一天本地文件因不可抗力损毁且无法恢复，那我备份了那么多次备份个寂寞啊。</p><p>并且我发现GitHub上我备份的博客源码中，主题文件夹并不能点开，而是以图中这样的形式备份的：</p><p><img src="https://i.loli.net/2021/10/04/bRdiLYlAnqSWr81.png" alt="GitHub第一次备份的主题文件夹截图.png"></p><h1 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h1><p>经过查找其他博文与询问主题作者寻找帮助，我才了解到，无法点击GitHub的主题文件夹并且后续无法push备份修改过的文件夹的原因是：<br><strong>本地 Butterfly 主题文件夹中含有 <code>.git</code> 隐藏文件。</strong></p><p><img src="https://i.loli.net/2021/10/04/U4KHGO8jEAYJgXu.png" alt="本地butterfly主题文件夹内结构.png"></p><p>其实如果细心，你会注意到博客根目录下其实也有一个名为<code>.git</code>的灰色隐藏文件。（没看见的请将你电脑的隐藏文件设为显示）</p><ul><li><p>那么 <code>.git</code> 文件是什么呢？<br>简单地说，这个目录文件包含了几乎所有 Git 存储和操作的对象，是版本控制工具 Git 在你第一次初始化一个本地仓库时，在当前文件夹生成的一个隐藏文件，我们以后每个版本的作品都是放在了 <code>.git</code> 这个文件夹里。</p></li><li><p>所以说，这个问题其实是一个正常现象吗？<br>是的，当我第一次克隆过来 butterfly 作者的主题文件并应用到自己的 Hexo 博客时，应该已经是这样了，只不过当时没注意这个细节而已。</p></li></ul><p>Butterfly 的作者 Jerry 回答我道：<br>    “这不是很正常么，git 不允许 git 里面包含 git ”</p><p>我问道：能否将主题文件夹下的<code>.git</code>文件删除？<br>    “你想上传就删了，但是后续不能通过 <code>git pull</code> 更新”</p><p>于是我决定暂时不删除该文件，并参照网上教程成功push了主题文件。</p><h1 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h1><ul><li><p>1.剪切 <code>themes/主题名/.git</code> 文件夹到其它处，如桌面。</p></li><li><p>2.从暂存区删除该文件夹<br><code>git rm --cache themes/你的主题文件夹名</code><br>操作后github上的主题文件夹应该会被移除。</p></li><li><p>3.使用git status查看状态</p></li><li><p>4.三步走: </p></li><li><p>-&gt;<code>git add . </code> </p></li><li><p>-&gt;<code>git commit -m &quot;你的自定义信息&quot; </code></p></li><li><p>-&gt;<code>git push</code></p><blockquote><p>之前往GitHub上经常push过东西的话应该知道最后一步git push过程中的报错可尝试通过科学上网解决，国内网速太慢可能导致网络链接超时而报错</p></blockquote></li></ul><p>然后就会发现你的主题文件夹在GitHub上更新成功了<br><img src="https://i.loli.net/2021/10/04/zdTU1G6Vg2BXjLi.png" alt="GitHub成功更新的主题文件夹截图.png"></p><ul><li>5.再移回themes/next/.git文件夹<br>便于以后对主题的更新</li></ul><h1 id="复盘该问题"><a href="#复盘该问题" class="headerlink" title="复盘该问题"></a>复盘该问题</h1><p>我提出该问题的原因是我对 Git 的了解不足，今后一定要抽时间好好学一下 Git 了，感谢 Butterfly 的作者的答复以及帮助到我的所有博客博主，包括但不限于：</p><p>CSDN-<a href="https://blog.csdn.net/luoweile/article/details/89792119">rm, git rm, git rm –cached 区别与关系</a></p><p>CSDN-<a href="https://blog.csdn.net/Calvin_zhou/article/details/109019569?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-4.no_search_link&spm=1001.2101.3001.4242">Hexo博客开发之——theme主题备份上传失败</a></p><p>博客园-<a href="https://www.cnblogs.com/reboot777/p/11164193.html">Hexo + Github page博客 themes/next 文件夹因存在.git而无法提交到git的解决办法</a></p><p>另外附上<br>Git官方文档：<br><a href="https://git-scm.com/book/zh/v2">https://git-scm.com/book/zh/v2</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo博客 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux操作系统使用基础丨（3）文件和目录</title>
      <link href="/2021/10/01/2021-11/"/>
      <url>/2021/10/01/2021-11/</url>
      
        <content type="html"><![CDATA[<div class="note red no-icon flat"><p>本篇为校内选修课教授内容的私人学习笔记，仅供在此博客网站观看，可分享此文链接给你需要分享的人，但暂时不开放转载权限，侵权必究，敬请理解。</p></div><h1 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h1><h2 id="文件系统的层次结构"><a href="#文件系统的层次结构" class="headerlink" title="文件系统的层次结构"></a>文件系统的层次结构</h2><blockquote><p><img src="https://i.loli.net/2021/10/01/A2pqtsvGzhINZPL.png" alt="Linux文件系统的结构层次.png"></p></blockquote><h2 id="Linux中的标准系统目录"><a href="#Linux中的标准系统目录" class="headerlink" title="Linux中的标准系统目录"></a>Linux中的标准系统目录</h2><blockquote><p><img src="https://i.loli.net/2021/10/01/wenkm3QWo27aIMJ.png" alt="Linux中的标准系统目录.png"></p></blockquote><p>默认登录后一开始都在<code>~$</code>，即<code>/home/你的用户名</code>目录下，也叫“家目录”或“用户的主目录”<br>cd命令全称change directory，用于更改当前目录，进入想进的目录，如：<br><code>cd /</code>指改变目录到/去，所有文件都是从根目录开始的<br><code>ls</code>命令指查看当前目录<br><code>ls /l</code>指查看属性：权限、创建时间、大小等<br><code>cd -</code>指返回原文件（Linux中没有盘符，所有目录全都看成文件）<br><code>pwd</code>指显示当前路径</p><h2 id="文件系统的概念"><a href="#文件系统的概念" class="headerlink" title="文件系统的概念"></a>文件系统的概念</h2><ul><li>文件系统：磁盘上有特定格式的一片区域</li><li>文件：存储数据的一个有名字的对象</li><li>目录：包含许多文件项目的一类特殊文件</li><li>子目录：被包含在另一个目录中的目录</li><li>父目录：包含子目录的目录称为父目录</li><li>文件名：用来标识文件的字符串，保存在一个目录文件项中</li><li>路径名：由<code>/</code>字符结合在一起的一个或多个文件名的集合，它指定一个文件在文件系统中的位置，如<code>/home/nic/hmli/.bashrc</code>（第一个<code>/</code>指根目录，后面的作为分隔符）</li></ul><h2 id="文件名称"><a href="#文件名称" class="headerlink" title="文件名称"></a>文件名称</h2><ul><li>包含大写字母、小写字母、数字、<code>$</code>、<code>@</code>、<code>_</code>、<code>−</code></li><li>一般不包含以下字符：<code>*</code>、<code>?</code>、<code>&gt;</code>、<code>&lt;</code>、<code>/</code>、<code>;</code>、<code>$</code>、<code>@</code>、<code>~</code>、<code>’</code>、<code>”</code>（特殊字符导致难于访问这些文件）</li><li>最好不以<code>+</code>或<code>−</code>开头</li><li>最长文件名255字符</li><li>可以有扩展名以便于识别和管理，扩展名与实际类型无关，用扩展名作为文件名的一部分，中间用<code>.</code>隔开</li><li><code>区分大小写</code></li></ul><p>平时自己命名文件不要以<code>-</code>开头，如果遇到想要删除这种文件，要特殊处理<br>访问以<code>−</code>开头的文件，比如删除‘-foo’可以使用以下方法之一：</p><ol><li><code>rm␣−−␣−foo</code>（加两个横杠）</li><li><code>rm␣ ./−foo</code>（加点和斜杠）</li></ol><blockquote><p><code>rm</code>是删除命令，<br>在使用<code>cp</code>、<code>mv</code>等许多命令时遇到此类文件名可类似处理</p></blockquote><h2 id="文件的主要类型"><a href="#文件的主要类型" class="headerlink" title="文件的主要类型"></a>文件的主要类型</h2><p>主要有以下文件类型，利用<code>ls ␣−l</code>输出对应文件名的行第一个字符可判断<br><code>-l</code>相当于<code>ls</code>的参数，所以中间要加个空格</p><pre><code>1） 普通文件：</code></pre><ul><li>文本文件：ASCII码形式存储，以-开头，如：<br>−rw−r−−r−− 1 root root 39599 Mar 8 12:15 x.sh<br>最后的<code>x.sh</code>是它的名称，前面那一堆是它的属性：权限、大小、创建时间等</li><li>二进制文件：以二进制形式存储在计算机中，不可直接读，要通过相应的软件读取，以-开头，如：<br>−rw−r−−r−− 1 root root 69599 Mar 8 12:25 x</li></ul><pre><code>2） 目录文件：</code></pre><p>以d开头，如：<br>drwxr−xr−x 2 root root 4096 Aug 2 2006 bin<br>最前面加个<code>d</code>代表它不是个文件，而是个目录，下面还有其他东西，相当于是个文件夹</p><pre><code>3） 设备文件：</code></pre><ul><li>块设备文件：以b开头，如：<br>brw−rw−−−− 1 root disk 3, 1 Jan 30 2003 /dev/hda1<br>前面的<code>b</code>就指的是设备，比如硬盘、U盘、光驱等</li><li>字符设备文件：以c开头，如：<br>crw−−−−−−− 1 root root 4, 1 Jul 31 13:49 /dev/ tty1<br>前面的<code>c</code>指外加的一些设备</li></ul><pre><code>4） 链接文件：</code></pre><p>存放文件系统中通向文件的路径，以l开头，如：<br>lrwxrwxrwx 1 root root 11 Sep 30 2008 c −&gt; /mnt/c<br>前面<code>l</code>开头的指超链接文件，不是真正的文件，点击会跳转到其他地方，类似于Windows上的快捷方式</p><h2 id="路径的名称"><a href="#路径的名称" class="headerlink" title="路径的名称"></a>路径的名称</h2><p>主要分为两种类型：</p><ul><li>绝对路径，如<code>/home/hmli/linux</code>，以<code>/</code>或<code>~</code>开头</li><li>相对路径，如当前目录为<code>./home/hmli</code>，那么linux即是相对路径，不以<code>/</code>或<code>~</code>开头</li></ul><blockquote><p><code>/</code>是根目录，<code>~</code>是家目录<br>绝对路径相对于根<br>相对路径相对于当前目录的父目录<br>这和HTML中是一样的概念</p></blockquote><hr><h2 id="目录操作命令"><a href="#目录操作命令" class="headerlink" title="目录操作命令"></a>目录操作命令</h2><ul><li><code>ls</code>：显示目录中的内容</li><li><code>pwd</code>：显示当前工作目录</li><li><code>cd</code>：改变用户工作目录</li><li><code>mkdir</code>：建立用户目录</li><li><code>rmdir</code>：删除目录</li></ul><h3 id="列出目录内容：ls"><a href="#列出目录内容：ls" class="headerlink" title="列出目录内容：ls"></a>列出目录内容：ls</h3><p><code>ls</code>命令列出一个子目录中的全部文件和目录名，一般格式为：<br><code>ls ␣ [OPTION]...␣[FILE ]...</code><br><code>ls</code>有很多参数，在Linux系统中只要有不会的，可以输入<code>-help</code>，所有的就出来了<br>它有多个命令行参数，参数可组合使用，下面列出它最常用的几个</p><ul><li><code>-a</code>：显示所有文件或目录（all的缩写），包括以“.”为名称开头字符的隐藏文件、现行目录“.”与上层目录“..”</li><li><code>-l</code>：使用详细格式列表。将权限标示、硬件接数目、拥有者与群组名称、文件或目录大小及更改时间一并列出</li><li><code>-R</code>：递归处理，将指定目录下的所有文件及子目录一并处理</li><li><code>-t</code>：按照时间排序</li><li><code>-S</code>：按照大小排序</li><li><code>-r</code>：逆向排序</li><li><code>–color[=WHEN]</code>：对不同类型的文件显示不同的颜色，WHEN默认为always，可为never和auto</li></ul><p>ls举例：<br>使用长列表方式列出某个子目录中的全部文件：<br><code>ls ␣−la</code>（参数l和a可以一起组合用，这也是Linux系统的方便之处）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">total 16</span><br><span class="line">drwxr−xr−x    4 root    root    4096 Jan   1  11:28 .</span><br><span class="line">drwxr−x−−−   11 root    root    4096 Jan   1  11:27 ..</span><br><span class="line">drwxr−xr−x    2 root    root    4096 Jan   1  11:27 dir1</span><br><span class="line">drwxr−xr−x    2 root    root    4096 Jan   1  11:28 dir2</span><br></pre></td></tr></table></figure><p>列出子目录中以字母v打头的全部非隐藏文件：<br><code>ls ␣ /boot/v*</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">−rw−r−−r−−  1  root  root  2706672  Oct  8  05:42  /boot/vmlinuz−3.0.0−2−amd64</span><br><span class="line">−rw−r−−r−−  1  root  root  2496704  Oct  9  07:55  /boot/vmlinuz−3.0.0−5−hmli−amd64</span><br></pre></td></tr></table></figure><h3 id="显示当前工作目录：pwd"><a href="#显示当前工作目录：pwd" class="headerlink" title="显示当前工作目录：pwd"></a>显示当前工作目录：pwd</h3><p><code>pwd</code>没有参数，唯一的作用就是显示当前工作目录的绝对路径的名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/ home / hmli</span><br></pre></td></tr></table></figure><p>环境变量PWD存储当前目录名，OLDPWD存储执行<code>cd</code>命令切换到当前目录之前的目录名，利用<code>echo</code>可以查看，如：<br><code>echo␣$PWD</code><br><code>echo␣$OLDPWD</code></p><blockquote><p><code>echo</code>是一个很常用的命令，是查看、屏幕输出。<br>这里的<code>$</code>指的是一个变量符号，和用户名后的不一样。<br>用户名后的那里的$指普通用户，不是root用户。</p></blockquote><h3 id="改变用户工作目录：cd"><a href="#改变用户工作目录：cd" class="headerlink" title="改变用户工作目录：cd"></a>改变用户工作目录：cd</h3><p><code>cd</code>命令可让用户在不同目录间切换，一般格式为<code>cd ␣ [−L|[−P]␣[dir ]</code>，<br>几个常用方式：</p><ul><li><code>cd ␣ dirname</code>：进入名字为dirname的目录</li><li><code>cd ␣~username</code>：进入用户username的主目录</li><li><code>cd ␣~/dirname</code>：进入当前用户的主目录下的dirname子目录</li><li><code>cd ␣−</code>：返回进入这个目录之前所在的目录</li><li><code>cd ␣ .. </code>：进入上一级目录</li><li><code>cd ␣ ../.. </code>：进入上两级目录</li><li><code>cd ␣ ../ subdir / subsubdir</code>：进入上级目录下的subdir下的subsubdir目录</li><li><code>cd</code>：不跟任何参数时返回用户根目录</li></ul><h3 id="建立用户目录：mkdir"><a href="#建立用户目录：mkdir" class="headerlink" title="建立用户目录：mkdir"></a>建立用户目录：mkdir</h3><p><code>mkdir</code>可建立目录，一般格式为：<br><code>mkdir␣ [OPTION]...␣DIRECTORY...</code><br>主要选项为：</p><ul><li>-p：若所要建立目录的上层目录目前尚未建立，则会一并建立上层目录，如<code>mkdir␣−p␣1/2</code>将建立目录1/2，如果目录1不存在，那么也会一起建立</li><li>-m：建立目录时，同时设置目录的权限。权限的设置法与chmod命令相同，如<code>mkdir␣−m␣700␣3</code></li></ul><h3 id="删除目录：rmdir"><a href="#删除目录：rmdir" class="headerlink" title="删除目录：rmdir"></a>删除目录：rmdir</h3><p><code>rmdir</code>命令可删除空目录，若所要删除目录非空，则出错</p><ul><li><code>rmdir ␣ dirname</code>：删除dirname目录</li><li>-p：删除指定目录之后，若该目录的上层目录已变成空目录，则将<br>其一并删除，如<code>rmdir ␣−p␣1/2</code></li><li><code>rmdir</code>更常用的替代命令为后面所说的<code>rm</code>命令</li></ul><hr><h2 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a>文件操作命令</h2><p>这里不仅仅指的是普通文件，也包括目录等文件</p><ul><li><code>cp</code>：复制文件或目录</li><li><code>mv</code>：移动文件和文件换名</li><li><code>rm</code>：删除文件或目录</li><li><code>ln</code>：在文件间建立连接（类似Windows的快捷方式）</li><li><code>find</code>：查找特定的文件</li><li><code>locate</code>：定位查找特定的文件</li><li><code>where</code>：查找文件</li><li><code>which</code>：查看命令的路径</li><li><code>touch</code>：改变文件的时间参数</li></ul><h3 id="复制文件或目录：cp"><a href="#复制文件或目录：cp" class="headerlink" title="复制文件或目录：cp"></a>复制文件或目录：cp</h3><p><code>cp</code>命令用来复制文件，在缺省的情况下，工作时不做任何显示，只有在<br>出现错误情况的时候才显示状态信息，一般格式为：<br><code>cp ␣ [OPTION]...␣SOURCE␣DEST</code></p><blockquote><p>用<code>cp-help</code>可列出它的选项</p></blockquote><p>主要选项：</p><ul><li><code>-a</code>：复制时尽可能保持文件的结构和属性</li><li><code>-f</code>：不提示直接覆盖存在的目标文件</li><li><code>-i</code>：覆盖现存文件时提示，建议打开此选项，避免误操作覆盖掉原目标文件</li><li><code>-p</code>：保持原始文件的所有者、组、许可和时间表属性</li><li><code>-r</code>：递归地复制目录</li></ul><p>举例：</p><ul><li>复制源文件<code>srcfile</code>为<code>destfile</code>：<br><code>cp ␣ srcfile ␣ destfile</code></li><li>保留文件的结构和属性复制源目录<code>/home/hmli/srcdir</code>到当前目录下的<code>destdir</code>目录：<br><code>cp ␣−a␣ /home/hmli/ srcdir ␣ destdir</code></li></ul><h3 id="移动-重命名文件：mv"><a href="#移动-重命名文件：mv" class="headerlink" title="移动/重命名文件：mv"></a>移动/重命名文件：mv</h3><p><code>mv</code>命令用来把文件从一个位置移动到另外一个位置，一般格式为：<br><code>mv␣[OPTION]...␣SOURCE␣DEST</code><br>主要选项：</p><ul><li><code>-i</code>：覆盖现存文件时提示，建议打开此选项，避免误操作覆盖掉目标<br>文件</li><li><code>-f</code>：不提示直接覆盖存在的目标文件</li></ul><h3 id="删除文件或目录：rm"><a href="#删除文件或目录：rm" class="headerlink" title="删除文件或目录：rm"></a>删除文件或目录：rm</h3><blockquote><p>删除了后基本不存在恢复的可能，小心</p></blockquote><p>rm命令用来删除文件，一般格式为：<br><code>rm␣[OPTION]...␣FILE... </code></p><p>主要选项：</p><ul><li><code>-f</code>：不提示直接删除指定的目标文件</li><li><code>-i</code>：指定交互模式，在执行删除前提示确认</li><li><code>-r</code>：删除文件列表中的目录</li></ul><p>删除文件名以-开头文件，比如‘-foo’可以使用以下方法之一：</p><ul><li><code>rm␣−−␣−foo</code></li><li><code>rm␣ ./−foo</code></li></ul><p>注：在使用<code>cp</code>、<code>mv</code>等许多命令时遇到此类文件名可类似处理</p><h3 id="在文件间建立连接：ln"><a href="#在文件间建立连接：ln" class="headerlink" title="在文件间建立连接：ln"></a>在文件间建立连接：ln</h3><blockquote><p>软连接，可以理解成指针，更形象点可以理解成快捷方式。</p></blockquote><p><code>ln</code>命令用来建立硬连接和符号连接</p><ul><li>硬连接是一个文件的额外的名字，相当于一个同步更新的副本，删除源文件，硬连接的内容还存在</li><li>符号连接相当于快捷方式，当源文件被删除后，符号连接仍然存在，<br>但链接的内容已经不存在</li></ul><p>一般格式为：<br><code>ln ␣ [ options ] ␣ source ␣ [ dest ]</code><br>主要选项：</p><ul><li><code>-d</code>：用于建立目录的硬连接，默认选项</li><li><code>-f</code>：覆盖已存在的目的文件</li><li><code>-i</code>：提示是否覆盖已存在的目的文件。</li><li><code>-s</code>：建立符号连接而不是硬连接</li></ul><h3 id="查找文件：find"><a href="#查找文件：find" class="headerlink" title="查找文件：find"></a>查找文件：find</h3><p><code>find</code>命令可以根据各种检索条件查找文件，一般格式为：<br><code>find ␣ [−H]␣[−L]␣[−P]␣[−D␣debugopts]␣[−Olevel]␣ [path ...] ␣ [ expression ]</code></p><ul><li><code>path…</code>：准备寻找文件所在的路径及它的子路径，也可是多个路径</li><li><code>expression</code>：包含要搜索文件的条件，可以包含文件名、拥有者、修改时间、权限等</li></ul><p>find主要选项:</p><ul><li><code>-atime n</code>：至少n*24小时内没有访问过的文件</li><li><code>-ctime n</code>：至少n*24小时内没有修改过的文件</li><li><code>-amin n</code>：n分钟之内没访问过的文件</li><li><code>-cmin n</code>：n分钟之内没修改过的文件</li><li><code>-empty</code>：文件为空</li><li><code>-name name</code>：指定要寻找的文件或目录的名称，区分大小写</li><li><code>-iname name</code>：指定要寻找的文件或目录的名称，不区分大小写</li><li><code>-type c</code>：以文件的类型作为寻找的条件，若c为：<ul><li><code>d</code>：表示寻找目录</li><li><code>f</code>：表示寻找普通文件</li><li><code>c</code>：表示寻找字符特殊设备</li><li><code>b</code>：表示寻找特殊块设备</li><li><code>p</code>：表示寻找命名管道</li><li><code>l</code>：表示寻找符号连接</li><li><code>s</code>：表示寻找套接字（socket）</li></ul></li></ul><p>find举例:</p><ul><li>查找/home子目录中至少7天没有被访问过的文件：<br><code>find ␣ /home␣−atime␣+7␣−print</code></li><li>找出/usr/src子目录中名字为core.*的文件并删除它们：<br><code>find ␣ / usr/ src ␣−name␣core.*␣−exec␣rm␣&#123;&#125; ␣ \;</code></li><li>找出/home中以.jpg结尾并且长度超过100KB的文件：<br><code>find ␣ /home␣−name␣&quot;*.jpg&quot;␣−size␣+100k</code></li><li>找出当前目录下权限不是755的目录并将其权限设置为755：<br><code>find ␣ . ␣−type ␣ d ␣ ! ␣−perm␣755␣−exec␣chmod␣755␣&#123;&#125;␣ \;</code></li></ul><p>注意：结合-exec选项时一定要小心，特别是后面跟<code>rm</code>等命令时</p><h3 id="查找文件所在目录：locate"><a href="#查找文件所在目录：locate" class="headerlink" title="查找文件所在目录：locate"></a>查找文件所在目录：locate</h3><p>从系统保存文件位置信息的数据库中搜索文件：<code>locate</code><br>如查看名字中含有libmkl_intel的库文件：<code>locate ␣ libmkl_intel</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">w a r ni n g : l o c a t e : w a r ni n g : d a t a b a s e / v a r / l i b / s l o c a t e / s</span><br><span class="line">l o c a t e . db ’ i s more t h a n 8 d a y s ol d</span><br><span class="line">/ o pt / i n t e l / C om pil e r / 1 1 . 0 / 0 8 3 / mkl / l i b / 3 2 / l i b m k l _ i n t e l . a</span><br><span class="line">/ o pt / i n t e l / C om pil e r / 1 1 . 0 / 0 8 3 / mkl / l i b / 3 2 / l i b m k l _ i n t e l . s o</span><br><span class="line">/ o pt / i n t e l / C om pil e r / 1 1 . 1 / 0 5 9 / mkl / l i b / 3 2 / l i b m k l _ i n t e l . a</span><br><span class="line">/ o pt / i n t e l / C om pil e r / 1 1 . 1 / 0 5 9 / mkl / l i b / 3 2 / l i b m k l _ i n t e l . s o</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>如果系统的数据库不够新，那么查找的结果将未必正确，比如上面提示数据库的信息至少已经8天没更新</li><li>root可以运行<code>updatedb</code>更新数据库，普通用户无权更新</li></ul><h3 id="显示命令的路径：which"><a href="#显示命令的路径：which" class="headerlink" title="显示命令的路径：which"></a>显示命令的路径：which</h3><p><code>which</code>查看命令的所在路径，如查看使用的是哪个mpif90：<br><code>which␣mpif90</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/ o pt / openmpi − 1 . 4 . 3 / bi n / m pi f 9 </span><br></pre></td></tr></table></figure><p><code>which</code>实际上是在环境变量PATH中指定的路径中显示第一个搜索到的命<br>令的路径，利用<code>echo␣$PATH</code>可以看到以:分隔的命令路径，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/ u s r / l o c a l / bi n : / u s r / bi n : / bi n : / o pt / openmpi − 1 . 4 . 3 / bi </span><br></pre></td></tr></table></figure><h3 id="改变文件的时间参数touch"><a href="#改变文件的时间参数touch" class="headerlink" title="改变文件的时间参数touch"></a>改变文件的时间参数touch</h3><p><code>touch</code>改变文件访问和修改时间或用指定时间建立新文件，一般格式为：<br><code>touch ␣ [OPTION]...␣FILE...</code><br>主要选项：</p><ul><li>不带参数：将文件的时间改为当前时间</li><li><code>-a</code>：只更改访问时间</li><li><code>-c</code>：若目标文件不存在，不建立空的目标文件</li><li><code>-t</code> [[CC]YY]MMDDhhmm[.ss]：以指定时间修改文件的时间，如下述<br>命令将文件<code>file1</code>的时间修改为1月20日15点30分：<br><code>touch ␣−t ␣ 01201530␣ file1</code></li></ul><hr><h2 id="显示文件内容的命令"><a href="#显示文件内容的命令" class="headerlink" title="显示文件内容的命令"></a>显示文件内容的命令</h2><ul><li><code>cat</code>：显示和合并文件</li><li><code>paste</code>：横向合并文件，将多个文件对应行合并</li><li><code>more</code>：分屏显示文件</li><li><code>less</code>：分屏显示文件</li><li><code>head</code>：显示文件的前几行</li><li><code>tail</code>：显示文件的最后几行</li></ul><h3 id="显示和合并文件：cat"><a href="#显示和合并文件：cat" class="headerlink" title="显示和合并文件：cat"></a>显示和合并文件：cat</h3><p><code>cat</code>可以结合多个文件，并将它们的内容输出到标准输出设备或者定向到<br>某个文件，一般格式为：<br><code>cat ␣ [OPTION]...␣[FILE ]...</code><br>主要选项：</p><ul><li><code>-b</code>：列出文件内容时，在所有非空白列开头标上编号，从1开始累加</li><li><code>-E</code>：在每一行的最后标上“$”符号</li><li><code>-n</code>：列出文件内容时，在每一行开头标上编号，从1开始累加</li></ul><p>cat举例:</p><ul><li>让<code>cat</code>命令从标准输入设备（如键盘）读取数据，转而输出至标准输出设备（如显示器）：<br><code>cat</code>不加任何参数之后回车，键入文字，按下回车键，系统将回应一模一样的文字</li><li>将屏幕输入定向到file2中：<br><code>cat ␣&gt;␣ file2</code><br>输完后按<code>&lt;ctrl−d&gt;</code>终止输入，就将屏幕输入的存到文件file2中</li><li>利用重定向符<code>&gt;</code>将名称为file1与file2的文件合并成一个文件file3：<br><code>cat ␣ file1 ␣ file2 ␣&gt;␣ file3</code><ul><li><code>&gt;</code>表示覆盖，若文件file3已经存在，则其内容会被覆盖</li><li><code>&gt;&gt;</code>表示追加，若用<code>&gt;&gt;</code>代替<code>&gt;</code>，新的内容就会追加在原有内容之后，<br>而不会覆盖它</li></ul></li></ul><h3 id="横向合并文件：paste"><a href="#横向合并文件：paste" class="headerlink" title="横向合并文件：paste"></a>横向合并文件：paste</h3><p><code>paste</code>横向合并文件，将多个文件对应行合并，一般格式为：<br><code>paste ␣ [OPTION]...␣[FILE ]...</code><br>一般选项：</p><ul><li><code>-d</code>, –delimiters=LIST：用LIST代替TABs</li><li><code>-s</code>, –serial：串行而非并行合并文件</li></ul><p>例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file1的内容如下： file2的内容如下：</span><br><span class="line">        1               a</span><br><span class="line">        2               b</span><br><span class="line">        3               c</span><br></pre></td></tr></table></figure><p>执行<code>paste ␣ file1 ␣ file2 </code>将显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 a</span><br><span class="line">2 b</span><br><span class="line">3 c</span><br></pre></td></tr></table></figure><h3 id="分屏显示文件：more"><a href="#分屏显示文件：more" class="headerlink" title="分屏显示文件：more"></a>分屏显示文件：more</h3><p><code>more</code>可将文件内容显示于屏幕上，每次只显示一页。可以往下翻页，但<br>无法回退翻页，一般格式为：<br><code>more␣[−dlfpcsu] ␣ [−num]␣[+/pattern] ␣ [+linenum]␣[ file ␣ ...]</code><br>主要选项：</p><ul><li><code>+/&lt;字符串&gt;</code>：在文件中查找选项中指定的字符串，然后显示字符串所在该页的内容</li><li><code>+&lt;行数&gt;</code>：从指定的行数开始显示</li><li><code>-n</code>：每次只显示n行</li><li><code>-c</code>：不滚屏，在显示下一屏之前先清屏</li></ul><p>more启动后的主要操作：</p><ul><li><code>空格</code>：翻页</li><li><code>/pattern</code>：查找匹配pattern的字符</li><li><code>v</code>：调用编辑器进行编辑</li><li><code>&lt;ctrl-L&gt;</code>；刷新屏幕</li><li><code>q</code>：退出</li></ul><p>more举例:</p><ul><li>在文件file1中查找“123”字符串，然后从该页开始显示内容：<br><code>more␣+/123␣ file1</code></li><li>显示文件file1的内容，每10行显示一次，且在显示之前先清屏：<br><code>more␣−c␣−10␣ file1</code></li></ul><h3 id="分屏显示文件：less"><a href="#分屏显示文件：less" class="headerlink" title="分屏显示文件：less"></a>分屏显示文件：less</h3><ul><li><code>less</code>类似<code>more</code>，也可以用来浏览超过一页的文件</li><li><code>less</code>命令除了可按空格键向下显示文件外，还可利用上下键来卷动文件</li><li>当要结束浏览时，只要下按q键即可</li><li>显示中按v，也可调用编辑器直接进行编辑</li></ul><p>建议使用功能更强大方便的<code>less</code>，<code>man</code>␣ <code>less</code>仔细看看用法以及功能</p><p>显示文件的前几行：head<br><code>head</code>显示指定文件的开头若干行，默认值是10行，一般格式为：<br><code>head␣[OPTION]...␣[FILE ]...</code></p><ul><li><code>-c N</code>：显示前N个字节</li><li><code>-n N</code>：显示前N行</li><li><code>-N</code>：显示前N行，如：<br><code>head␣−20␣ file</code></li></ul><p>显示文件的最后几行：tail<br><code>tail</code> 显示指定文件的末尾若干行，默认值是10行，一般格式为：<br><code>tail ␣ [OPTION]...␣[FILE ]...</code><br>主要选项：</p><ul><li><code>-c N</code>：显示后N个字节</li><li><code>-n N</code>：显示后N行</li><li><code>-N</code>：显示后N行</li><li><code>-f</code>：连续监测需要显示文件的最后几行，如果文件更新，将自动显示出更新，常用于监测输出日志，比如：<br><code>tail ␣−f ␣myjob.log</code></li></ul><h3 id="比较文件内容命令：comm与diff"><a href="#比较文件内容命令：comm与diff" class="headerlink" title="比较文件内容命令：comm与diff"></a>比较文件内容命令：comm与diff</h3><ul><li><code>comm</code>：比较两个已排过序的文件</li><li><code>diff</code> ：比较文件的差异</li></ul><h3 id="显示两个文件共同部分：comm"><a href="#显示两个文件共同部分：comm" class="headerlink" title="显示两个文件共同部分：comm"></a>显示两个文件共同部分：comm</h3><p><code>comm</code>用来对两个已排过序的文件进行逐行比较显示其共同部分，一般格式为：<br><code>comm␣[OPTION]...␣FILE1␣FILE2</code><br>OPTION可以为：</p><ul><li>-1：不显示只在第一个文件里出现的行</li><li>-2：不显示只在第二个文件里出现的行</li><li>-3：不显示在第一、二个文件里都出现的行</li></ul><p>comm举例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ile1的内容如下：                file2的内容如下：</span><br><span class="line">    main (                          main (</span><br><span class="line">    &#123;                               &#123;</span><br><span class="line">    printf(&quot;Hello!\n&quot;);             printf(&quot;Good!\n&quot;);</span><br><span class="line">    &#125;                               &#125;</span><br></pre></td></tr></table></figure><p>用comm命令对这两个文件进行比较只显示它们共有的行：<br><code>comm␣−12␣file1 ␣ file2</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main (</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="显示多个文件不同部分：diff"><a href="#显示多个文件不同部分：diff" class="headerlink" title="显示多个文件不同部分：diff"></a>显示多个文件不同部分：diff</h3><p><code>diff </code>可以比较多个文本文件，并显示它们的不同，一般格式为：<br><code>diff ␣ [OPTION]...␣FILES</code><br>主要选项：</p><ul><li><code>-c</code>：输出格式是带上下文的三行格式</li><li><code>-C n</code>：输出格式是带上下文的n行格式</li><li><code>-r</code>：两个文件都是目录时，递归比较找到的各子目录</li><li>输出的一般形式如下：<ul><li>n1 a n3,n4</li><li>n1,n2 d n3</li><li>n1,n2 c n3,n4</li></ul></li><li>a-附加，d-删除，c-修改</li><li>a、d、c前面的n1等表示第一个文件的行号，后面的n3等表示第二个文件的行号</li></ul><p>上面的n1 a n3,n4表示两个文件若要变成相同，那么第一个文件的n1行将附加第二个文件的行号为n3到n4行之间的内容</p><p>diff举例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">file1的内容如下：           file2的内容如下：</span><br><span class="line">main()                     main()</span><br><span class="line">&#123;                          &#123;</span><br><span class="line">printf(&quot;Hello!\n&quot;);        int n,m;</span><br><span class="line">&#125;                          n=10;</span><br><span class="line">                           printf(”%d\n”,m=n*10);</span><br><span class="line">                           &#125;</span><br></pre></td></tr></table></figure><p>输入命令：<br><code>diff ␣ file1 ␣ file2</code><br>将显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">3 , 5 c 3 , 6</span><br><span class="line">&lt;3 p r i n t f ( ” H ell o ! \ n ” ) ;</span><br><span class="line">&lt;4 &#125;</span><br><span class="line">&lt;5</span><br><span class="line">−−−</span><br><span class="line">&gt;3 i n t n ,m;</span><br><span class="line">&gt;4 n = 1 0;</span><br><span class="line">&gt;5 p r i n t f (”%d \ n ” ,m=n * 1 0 ) ;</span><br><span class="line">&gt;6&#125;</span><br></pre></td></tr></table></figure><h2 id="文件权限操作"><a href="#文件权限操作" class="headerlink" title="文件权限操作"></a>文件权限操作</h2><ul><li><code>chmod</code>：改变文件或目录的许可权限</li><li><code>chown</code>：改变文件的所有权</li><li><code>chgrp</code>：改变用户分组</li></ul><h2 id="文件的保护和权限"><a href="#文件的保护和权限" class="headerlink" title="文件的保护和权限"></a>文件的保护和权限</h2><p><code>ls ␣−l</code>显示的文件权限格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d rwx r−x r −x 2 hmli hmli 4096 10月 19 2 3: 2 5 e xam ple</span><br><span class="line">−rw−r −−r −− 1 hmli hmli 441611 10月 20 0 9: 0 1 f i l e . e p s</span><br></pre></td></tr></table></figure><p>drwxr-xr-x和-rw-r–r–的组成：第一列为文件类型标记，接着的三列为用户权限<br>位，之后的三列为组权限位，最后三列为组外用户权限位<br>文件权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rwx     rwx     rwx</span><br><span class="line">user    group   other </span><br></pre></td></tr></table></figure><ul><li>普通文件：<ul><li>r：可以查看文件内容</li><li>w：可以修改文件内容</li><li>x：可以执行文件</li></ul></li><li>目录：<ul><li>r：可以查看目录下的文件</li><li>w：可以在目录下创建和删除文件</li><li>x：可以进入目录或访问目录下的文件</li></ul></li></ul><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p>权限格式，可以为二进制、八进制或字符形式，如</p><table><thead><tr><th align="center"></th><th align="center">user</th><th align="center">group</th><th align="center">others</th></tr></thead><tbody><tr><td align="center">字符</td><td align="center">rwx</td><td align="center">rw-</td><td align="center">r–</td></tr><tr><td align="center">二进制</td><td align="center">111</td><td align="center">110</td><td align="center">100</td></tr><tr><td align="center">八进制</td><td align="center">7(4+2+1)</td><td align="center">7(4+2+1)</td><td align="center">4(4+0+0)</td></tr></tbody></table><p>多数文件的权限为：</p><ul><li>文件：−rw−r −−r −− 644</li><li>目录：d rwx r−x r −x 755</li></ul><h3 id="改变文件权限：chmod"><a href="#改变文件权限：chmod" class="headerlink" title="改变文件权限：chmod"></a>改变文件权限：chmod</h3><p><code>chmod</code>用于改变文件或目录的权限，一般格式为：<br><code>chmod␣[OPTION]...␣MODE[,MODE]...␣FILE...</code><br>MODE模式：</p><ul><li><code>u</code>：文件所属帐户</li><li><code>g</code>：文件所属组</li><li><code>o</code>：不同组的帐户</li><li><code>a</code>：所有帐户</li><li><code>+</code>：添加权限</li><li><code>-</code>：去除权限</li><li><code>=</code>：使得指定文件只具有这些权限</li></ul><p>主要选项：</p><ul><li><code>-v</code>：详细显示权限改变的信息</li><li><code>-c</code>：类似-v，仅权限改变时显示</li><li><code>-R</code>：对所有某目录下的文件进行递归处理</li></ul><p>chmod举例:</p><ul><li>使文件file各用户都拥有完全权限：<br><code>chmod␣777␣ file</code></li><li>允许所有人读file，但只有拥有者能改变它：<br><code>chmod␣644␣ file</code></li><li>给所有人增加写权：<br><code>chmod␣a+w␣file</code></li><li>对组级和其他用户除去写权和读权：<br><code>chmod␣o−wr,g−wr␣file</code></li><li>建立其他用户的只读权：<br><code>chmod␣o=r␣ file</code></li></ul><p>注意控制权限，尽量不要给其他用户修改删除文件等权限</p><h3 id="设置缺省权限：umask"><a href="#设置缺省权限：umask" class="headerlink" title="设置缺省权限：umask"></a>设置缺省权限：umask</h3><p>利用<code>umask</code>可以设置新生成的文件和目录的缺省权限，但不影响已经存在的文件或目录权限，一般格式为：<br><code>umask␣[−p]␣[−S]␣ [mode]</code><br>mode与<code>chmod</code>的类似，应该设其mode为<code>ls</code>看到的权限的异或，简单说就是<code>777−ls</code>显示的<br>如避免其他用户查看自己新建的文件，可用<code>umask␣077</code>，将设置缺省权限为：</p><ul><li>文件：−rw−−−−−−− 600</li><li>目录：drwx−−−−−− 700</li></ul><p>如想要每次登录都起作用，需要加入shell的启动初始文件，比如bash的<code>~/.bashrc</code></p><h3 id="改变文件的所有权：chown"><a href="#改变文件的所有权：chown" class="headerlink" title="改变文件的所有权：chown"></a>改变文件的所有权：chown</h3><blockquote><p>只有root用户能够进行这样的操作</p></blockquote><p><code>chown</code>可把一个文件的所有权修改为其他用户的，一般格式为：<br><code>chown␣[OPTION]...␣[OWNER][:[GROUP]]␣FILE...</code><br>主要选项：</p><ul><li><code>-v</code>：详细显示所有权的变化</li><li><code>-c</code>：类似-v，仅所有权改变时显示</li><li><code>-R</code>：递归改变目录及其内容的所有权<br>比如，将所有文件的所有者修改hmli及其所在的组nic：<br><code>chown␣−R␣hmli:nic ␣ dirname</code></li></ul><h3 id="改变文件的用户组：chgrp"><a href="#改变文件的用户组：chgrp" class="headerlink" title="改变文件的用户组：chgrp"></a>改变文件的用户组：chgrp</h3><blockquote><p>只有root才可以执行</p></blockquote><p><code>chgrp</code>命令可以改变一个文件的用户分组设置情况，一般格式为：<br><code>chgrp␣ [OPTION]...␣GROUP␣FILE...</code><br>主要选项：</p><ul><li><code>-v</code>：详细说明文件所属的用户组的变化</li><li><code>-c</code>：类似-v，仅所有权改变时显示</li><li><code>-r</code>：改变本目录及其所有子目录中的文件所属的用户组</li></ul><hr><p>此外还有很多命令，这些命令其实不用死记硬背（也背不完啊那么多），而是像HTML标签和css属性一样，遇到需要的可以去搜索引擎直接查来用（当然那几个常用的你得会）。</p><p><strong>推荐更多</strong></p><p>B站教学视频：<br><a href="https://www.bilibili.com/video/BV1Sv411r7vd?p=12">【小白入门 通俗易懂】2021韩顺平 一周学会Linux</a><br>(该教程有很多分P选集，可自行点击跳转)</p><p>几个命令查找网站：<br><a href="https://www.linuxcool.com/">Linux命令大全(手册)</a><br><a href="https://man.linuxde.net/">Linux命令大全</a><br><a href="http://linux.51yip.com/">Linux命令手册</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 高性能计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux操作系统使用基础丨（2）系统的运行</title>
      <link href="/2021/09/30/2021-10/"/>
      <url>/2021/09/30/2021-10/</url>
      
        <content type="html"><![CDATA[<div class="note red no-icon flat"><p>本篇为校内选修课教授内容的私人学习笔记，仅供在此博客网站观看，可分享此文链接给你需要分享的人，但暂时不开放转载权限，侵权必究，敬请理解。</p></div><h1 id="系统的运行"><a href="#系统的运行" class="headerlink" title="系统的运行"></a>系统的运行</h1><h2 id="登录及退出系统"><a href="#登录及退出系统" class="headerlink" title="登录及退出系统"></a>登录及退出系统</h2><ul><li><p>本地登录：文本或X图形界面</p></li><li><p>远程登录：SSH或TELNET</p><ul><li>SSH：<ul><li>Linux系统：<code>ssh ␣UserName@HostName&lt;sup&gt;5&lt;/sup&gt;</code></li><li>Windows系统：利用PuTTY、Xshell等支持SSH协议的客户端</li></ul></li><li>TELNET：<ul><li><code>telnet HostName</code>（<em>HostName指的是要登录系统的域名或 IP地址</em>）</li></ul></li></ul><blockquote><p>河师大高性能计算中心服务器不支持TELNET</p></blockquote><ul><li>退出系统： <code>exit</code> 或<code>&lt;ctrl−d&gt;</code>（<em>指的是按住 ctrl键与 d键</em>）</li></ul></li></ul><blockquote><p>高性能计算老师：虚拟机上安装Linux或者使用wsl形式的Linux都可以快速练习Linux系统的操作和命令的使用，但可能没法调用底层的结构（比如可能会影响“Linpack测试”的题）。高性能计算的目的是充分发挥底层的性能，虚拟机和wsl都加了一个跳板，这个跳板可能会限制我们有些东西没法用，影响我们使用的性能。所以对高性能计算来说安装Windows与Linux的双系统更好。</p></blockquote><h2 id="创建或修改密码"><a href="#创建或修改密码" class="headerlink" title="创建或修改密码"></a>创建或修改密码</h2><ul><li>一般系统：在系统提示符下输入<code>passwd</code></li><li>采用NIS的集群系统等：<blockquote><p>（NIS是网络信息服务，可用于在各节点系统中同步用户信息、系统配置等）</p></blockquote><ul><li>如果在NIS的主服务节点：可使用<code>passwd</code>或<code>yppasswd</code></li><li>如果在NIS的非主服务节点：应使用<code>yppasswd</code>，用<code>passwd</code>修改的无效</li></ul></li></ul><h2 id="Linux的命令格式"><a href="#Linux的命令格式" class="headerlink" title="Linux的命令格式"></a>Linux的命令格式</h2><ul><li>命令一般具有如下格式，具体各个命令有所不同，需要查看命令的帮助（<code>man␣command</code>）<br>  <code>command␣options␣arguments</code>即：<br>  <code>命令 选项 参数</code></li><li>命令中<code>[]</code>之内的表示是可选选项，<code>|</code>表示是或，几种中选择一种</li><li>一些常见正确与错误的例子：<table>  <tr>      <th>正确</th>      <th>错误</th>  </tr>  <tr>      <th colspan="2">-与选项分离</th>  </tr>  <tr>      <td>mail ␣−f ␣ newmail</td>      <td>mail ␣−␣ f ␣ newmail</td>  </tr>  <tr>      <th colspan="2">选项与参数的顺序</th>  </tr>  <tr>      <td>mail ␣−f ␣ newmail</td>      <td>mail ␣ newmail␣−f</td>  </tr>  <tr>      <th colspan="2">多选项</th>  </tr>  <tr>      <td>who␣−m␣−u</td>      <td>who␣−m−u</td>  </tr>  <tr>      <td>who␣−mu</td>      <td>who␣−m␣u</td>  </tr></li></ul></table><h2 id="键入命令"><a href="#键入命令" class="headerlink" title="键入命令"></a>键入命令</h2><blockquote><p>以下如非特殊说明，将以Bash(&gt; 3.0版本) 做为默认shell说明，其它shell也许略有不同</p></blockquote><ul><li>shell区分大小写</li><li>在shell提示符下输入命令，然后按回车键</li><li>如找不到输入的命令，会显示Command not Found</li><li>如命令太长，可在此行行尾键入\后按下回车键，在下一行的&gt;后接着输入</li></ul><h2 id="键盘的快捷方式"><a href="#键盘的快捷方式" class="headerlink" title="键盘的快捷方式"></a>键盘的快捷方式</h2><p>下面第一行代码表示按下ctrl键与c键，其他行类似，前面三四个一定要会。</p><p><code>&lt;ctrl−c&gt;</code>：停止命令执行（死机时不想等可以用）<br><code>&lt;ctrl−d&gt;</code>：结束传输或屏幕输入（或比如我现在SU到另一个用户上面，两个用户之间想退出也可以用）<br><code>&lt;ctrl−s&gt;</code>：临时停止输出（与ctrl−c彻底中断不同，这个可以恢复）<br><code>&lt;ctrl−q&gt;</code>：恢复输出</p><p><code>&lt;ctrl−u&gt;</code>：擦除光标以前的<br><code>&lt;ctrl−k&gt;</code>：擦除光标以后的<br><code>&lt;backspace&gt;</code>：纠正错误<br><code>&lt;ctrl−r&gt;</code>：在以前的命令中搜索</p><h2 id="自动补全命令行"><a href="#自动补全命令行" class="headerlink" title="自动补全命令行"></a>自动补全命令行</h2><p>自动补全命令行就是在输入命令时不必把命令输全，按·<Tab>·时shell能判断出所要输入的命令，如果有多个匹配将会列出，比如：</p><ul><li><code>ls ␣ /boot/v&lt;Tab&gt;</code>：系统将自动补全<code>/boot</code>下以v开头的文件或目录</li><li><code>pass&lt;Tab&gt;</code>：系统会显示所有以pass开始的命令，如果只有一个符合，则自动补全</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 高性能计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux操作系统使用基础丨（1）简介</title>
      <link href="/2021/09/30/2021-9/"/>
      <url>/2021/09/30/2021-9/</url>
      
        <content type="html"><![CDATA[<div class="note red no-icon flat"><p>本篇为校内选修课教授内容的私人学习笔记，仅供在此博客网站观看，可分享此文链接给你需要分享的人，但暂时不开放转载权限，侵权必究，敬请理解。</p></div><h1 id="Linux操作系统简介"><a href="#Linux操作系统简介" class="headerlink" title="Linux操作系统简介"></a>Linux操作系统简介</h1><ul><li><p>Linux以它的高效性和灵活性著称。具有多任务、多用户的能力</p></li><li><p>Linux实际应该只是内核，绝大多数基于Linux内核的操作系统使用了大量的GNU软件，包括了一个shell程序、程序库、编译器及工具，还有许多其他程序，例如Emacs。因此，GNU(GNU’s not Unix)计划的开创者Richard Matthew Stallma-RMS博士提议将Linux操作系统改名为GNU/Linux，但多数人仍习惯性地使用Linux</p></li><li><p>Linux之所以受到广大计算机爱好者的喜爱，其主要原因有两个：</p><ul><li>它属于自由软件，用户不用支付任何费用就可以它的源代码*，并且可以根据自己的需要对它进行必要的修改</li><li>它具有Unix的全部功能，任何使用Unix操作系统或想要学习Unix操作系统的人都可以从Linux中获益<blockquote><p>*指的是源代码可以免费获取，但有些二进制发布的，如Red Hat Enterprise Linux Server(RHEL)是收费的，但其源代码可以免费获取</p></blockquote></li></ul></li></ul><h2 id="Linux特点"><a href="#Linux特点" class="headerlink" title="Linux特点"></a>Linux特点</h2><ul><li><code>开放性</code>：系统遵循世界标准规范，特别是遵循开放系统互连（OSI）<br>国际标准</li><li><code>多用户</code>：系统资源可以被不同用户使用，每个用户对自己的资源<br>（例如：文件、设备）有特定的权限，互不影响</li><li><code>多任务</code>：计算机同时执行多个程序，而且各个程序的运行互相独立</li><li><code>良好的用户界面</code>：Linux提供两种界面：用户界面和系统调用<ol><li>用户界面（CLI接口）<ul><li>Linux的传统用户界面是基于文本的<code>命令行界面</code>，即<code>shell</code>，它既可以联机使用，又可存文件上脱机使用。shell有很强的程序设计能力，用户可方便地用它编制程序，从而为用户扩充系统功能提供了更高级的手段。可编程shell是指将多条命令组合在一起，形成一个shell程序，这个程序可以单独运行，也可以与其他程序同时运行。</li><li>Linux还为用户提供了<code>图形用户界面</code>。利用鼠标、菜单、窗口、滚动条等，给用户呈现一个直观、易操作、交互性强的友好的图形化界面。</li></ul></li><li>系统调用（GUI接口）<ul><li>用户可以<strong>在编程时直接使用系统提供的系统调用命令</strong></li><li>系统通过这个界面为用户程序提供低级、高效率的服务</li></ul></li></ol></li><li><code>设备独立性</code>：是指操作系统把所有外部设备统一当作成文件来看待，只要安装它们的驱动程序，任何用户都可以象使用文件一样，操纵、使用这些设备，而不必知道它们的具体存在形式。Linux是具有设备独立性的操作系统，它的内核具有高度适应能力</li><li><code>提供了丰富的网络功能</code>：完善的内置网络是Linux一大特点</li><li><code>可靠的安全系统</code>：Linux采取了许多安全技术措施，包括对读、写控制、带保护的子系统、审计跟踪、核心授权等，这为网络多用户环境中的用户提供了必要的安全保障</li><li><code>良好的可移植性</code>：是指将操作系统从一个平台转移到另一个平台使它仍然能按其自身的方式运行的能力。Linux是一种可移植的操作系统，能够在从微型计算机到大型计算机的任何环境中和任何平台上运行。比如，诺基亚的Maemo、谷歌的Android和Chrome OS，以及英特尔的Moblin。</li></ul><h2 id="Top500主流操作系统"><a href="#Top500主流操作系统" class="headerlink" title="Top500主流操作系统"></a>Top500主流操作系统</h2><p>超算界每年对全世界计算机进行排行，前500名中Linux占有率极高。</p><h2 id="Linux的主要组件"><a href="#Linux的主要组件" class="headerlink" title="Linux的主要组件"></a>Linux的主要组件</h2><p>1） <code>Kernel</code>：系统启动时将内核装入内存管理系统各种资源</p><blockquote><p>内部核心部分，Linux系统爱好者们会用到研发Kernel，我们普通用户只用得到下面两个</p></blockquote><p>2） <code>Shell用户界面</code>：shell英文翻译是“壳、贝壳”，即提供用户与内核交互处理接口，是<strong>命令解释器</strong>，提供强大编程环境bash（最常用）、csh、tcsh、ksh、zsh…</p><p>3） <code>Utility</code>:提供各种管理工具和应用程序。包含最常用的命令，如vi、gcc、Is、cat、who、wc、grep、diff…</p><h2 id="Linux内核版本"><a href="#Linux内核版本" class="headerlink" title="Linux内核版本"></a>Linux内核版本</h2><p>一些业内专业人士比较关注，不同版本号之间有着命名格式的约定，代表着不同程度的修改</p><h2 id="Linux发行版本"><a href="#Linux发行版本" class="headerlink" title="Linux发行版本"></a>Linux发行版本</h2><ol><li>Linux：</li></ol><ul><li><p>常见：Android、Arch、CentOS、Debian、Fedora、Gentoo、Mandriva、Red Hat Enterprise Linux(RHEL)、Slackware、SUSE Linux EnterpriseDesktop(SLED)、SUSE Linux Enterprise Server(SLES)、OpenSuSE、Ubuntu…</p></li><li><p>高性能计算系统常见：</p><ul><li>RHEL系：红帽Red Hat Enterprise Linux(RHEL)、CentOS、Scientific Linux-SL</li><li>SUSE系：SUSE Linux Enterprise Server(SLES)、OpenSuSE</li></ul></li></ul><ol start="2"><li>Unix：</li></ol><ul><li>学院派BSD：FreeBSD、OpenBSD、NetBSD…</li><li>商业Unix：IBM AIX、HP UX、Sun Solaris、OpenSolaris、Mac OSX、iOS、SGI IRIX…</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 高性能计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据库】第1章 绪论丨（第2节）数据模型</title>
      <link href="/2021/09/30/2021-8/"/>
      <url>/2021/09/30/2021-8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文所属《数据库系统原理》分类专栏，相关文章导航请点击<a href="https://barry-flynn.github.io/2021/09/29/2021-5/">《数据库系统原理》目录汇总贴</a></p></blockquote><h1 id="第2节-数据模型"><a href="#第2节-数据模型" class="headerlink" title="第2节 数据模型"></a>第2节 数据模型</h1><h2 id="两类数据模型"><a href="#两类数据模型" class="headerlink" title="两类数据模型"></a>两类数据模型</h2><h2 id="概念模型"><a href="#概念模型" class="headerlink" title="概念模型"></a>概念模型</h2><h2 id="数据模型的组成要素"><a href="#数据模型的组成要素" class="headerlink" title="数据模型的组成要素"></a>数据模型的组成要素</h2><h2 id="常用的数据模型"><a href="#常用的数据模型" class="headerlink" title="常用的数据模型"></a>常用的数据模型</h2><h2 id="层次模型"><a href="#层次模型" class="headerlink" title="层次模型"></a>层次模型</h2><h2 id="网状模型"><a href="#网状模型" class="headerlink" title="网状模型"></a>网状模型</h2><h2 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h2><hr><pre><code>》》下面是我最喜欢的自说自话环节《《</code></pre><blockquote><p><strong>【2021年09月30日】留言</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 《数据库系统原理》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo博客】如何使博客拥有星空背景和流星特效</title>
      <link href="/2021/09/30/2021-7/"/>
      <url>/2021/09/30/2021-7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文为让<code>深色模式</code>下的博客网页<br>增加<code>星空背景和流星特效</code>配置的小教程，<br>该效果如下：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/202108121834269.gif" alt="深色模式下星空背景和流星特效"></p><blockquote><p>本文以Hexo博客的Butterfly主题为例，其他博客框架、主题、网页如何生效请参考本文自行尝试，我不做解答。</p></blockquote><h1 id="1-插入Canvas标签"><a href="#1-插入Canvas标签" class="headerlink" title="1. 插入Canvas标签"></a>1. 插入Canvas标签</h1><p>首先打开Butterfly主题的<code>_config.yml</code>文件或者使用HTML直接插入，找到配置文件对应的<code>inject</code>部分，插入<code>&lt;canvas id=&quot;universe&quot;&gt;&lt;/canvas&gt;</code><br><img src="https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/202108121759902.png" alt="插入Canvas标签"></p><h1 id="2-创建JS文件"><a href="#2-创建JS文件" class="headerlink" title="2. 创建JS文件"></a>2. 创建JS文件</h1><p>在<code>butterfly/source/js/</code>创建一个<code>universe.js</code>文件，或者添加到自己的<code>js</code>文件中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dark</span>(<span class="params"></span>) </span>&#123;<span class="built_in">window</span>.requestAnimationFrame=<span class="built_in">window</span>.requestAnimationFrame||<span class="built_in">window</span>.mozRequestAnimationFrame||<span class="built_in">window</span>.webkitRequestAnimationFrame||<span class="built_in">window</span>.msRequestAnimationFrame;<span class="keyword">var</span> n,e,i,h,t=<span class="number">.05</span>,s=<span class="built_in">document</span>.getElementById(<span class="string">&quot;universe&quot;</span>),o=!<span class="number">0</span>,a=<span class="string">&quot;180,184,240&quot;</span>,r=<span class="string">&quot;226,225,142&quot;</span>,d=<span class="string">&quot;226,225,224&quot;</span>,c=[];<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;n=<span class="built_in">window</span>.innerWidth,e=<span class="built_in">window</span>.innerHeight,i=<span class="number">.216</span>*n,s.setAttribute(<span class="string">&quot;width&quot;</span>,n),s.setAttribute(<span class="string">&quot;height&quot;</span>,e)&#125;<span class="function"><span class="keyword">function</span> <span class="title">u</span>(<span class="params"></span>)</span>&#123;h.clearRect(<span class="number">0</span>,<span class="number">0</span>,n,e);<span class="keyword">for</span>(<span class="keyword">var</span> t=c.length,i=<span class="number">0</span>;i&lt;t;i++)&#123;<span class="keyword">var</span> s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">y</span>(<span class="params"></span>)</span>&#123;<span class="built_in">this</span>.reset=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">this</span>.giant=m(<span class="number">3</span>),<span class="built_in">this</span>.comet=!<span class="built_in">this</span>.giant&amp;&amp;!o&amp;&amp;m(<span class="number">10</span>),<span class="built_in">this</span>.x=l(<span class="number">0</span>,n-<span class="number">10</span>),<span class="built_in">this</span>.y=l(<span class="number">0</span>,e),<span class="built_in">this</span>.r=l(<span class="number">1.1</span>,<span class="number">2.6</span>),<span class="built_in">this</span>.dx=l(t,<span class="number">6</span>*t)+(<span class="built_in">this</span>.comet+<span class="number">1</span>-<span class="number">1</span>)*t*l(<span class="number">50</span>,<span class="number">120</span>)+<span class="number">2</span>*t,<span class="built_in">this</span>.dy=-l(t,<span class="number">6</span>*t)-(<span class="built_in">this</span>.comet+<span class="number">1</span>-<span class="number">1</span>)*t*l(<span class="number">50</span>,<span class="number">120</span>),<span class="built_in">this</span>.fadingOut=<span class="literal">null</span>,<span class="built_in">this</span>.fadingIn=!<span class="number">0</span>,<span class="built_in">this</span>.opacity=<span class="number">0</span>,<span class="built_in">this</span>.opacityTresh=l(<span class="number">.2</span>,<span class="number">1</span>-<span class="number">.4</span>*(<span class="built_in">this</span>.comet+<span class="number">1</span>-<span class="number">1</span>)),<span class="built_in">this</span>.do=l(<span class="number">5e-4</span>,<span class="number">.002</span>)+<span class="number">.001</span>*(<span class="built_in">this</span>.comet+<span class="number">1</span>-<span class="number">1</span>)&#125;,<span class="built_in">this</span>.fadeIn=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">this</span>.fadingIn&amp;&amp;(<span class="built_in">this</span>.fadingIn=!(<span class="built_in">this</span>.opacity&gt;<span class="built_in">this</span>.opacityTresh),<span class="built_in">this</span>.opacity+=<span class="built_in">this</span>.do)&#125;,<span class="built_in">this</span>.fadeOut=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">this</span>.fadingOut&amp;&amp;(<span class="built_in">this</span>.fadingOut=!(<span class="built_in">this</span>.opacity&lt;<span class="number">0</span>),<span class="built_in">this</span>.opacity-=<span class="built_in">this</span>.do/<span class="number">2</span>,(<span class="built_in">this</span>.x&gt;n||<span class="built_in">this</span>.y&lt;<span class="number">0</span>)&amp;&amp;(<span class="built_in">this</span>.fadingOut=!<span class="number">1</span>,<span class="built_in">this</span>.reset()))&#125;,<span class="built_in">this</span>.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">if</span>(h.beginPath(),<span class="built_in">this</span>.giant)h.fillStyle=<span class="string">&quot;rgba(&quot;</span>+a+<span class="string">&quot;,&quot;</span>+<span class="built_in">this</span>.opacity+<span class="string">&quot;)&quot;</span>,h.arc(<span class="built_in">this</span>.x,<span class="built_in">this</span>.y,<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">1</span>);<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">this</span>.comet)&#123;h.fillStyle=<span class="string">&quot;rgba(&quot;</span>+d+<span class="string">&quot;,&quot;</span>+<span class="built_in">this</span>.opacity+<span class="string">&quot;)&quot;</span>,h.arc(<span class="built_in">this</span>.x,<span class="built_in">this</span>.y,<span class="number">1.5</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">1</span>);<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;<span class="number">30</span>;t++)h.fillStyle=<span class="string">&quot;rgba(&quot;</span>+d+<span class="string">&quot;,&quot;</span>+(<span class="built_in">this</span>.opacity-<span class="built_in">this</span>.opacity/<span class="number">20</span>*t)+<span class="string">&quot;)&quot;</span>,h.rect(<span class="built_in">this</span>.x-<span class="built_in">this</span>.dx/<span class="number">4</span>*t,<span class="built_in">this</span>.y-<span class="built_in">this</span>.dy/<span class="number">4</span>*t-<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>),h.fill()&#125;<span class="keyword">else</span> h.fillStyle=<span class="string">&quot;rgba(&quot;</span>+r+<span class="string">&quot;,&quot;</span>+<span class="built_in">this</span>.opacity+<span class="string">&quot;)&quot;</span>,h.rect(<span class="built_in">this</span>.x,<span class="built_in">this</span>.y,<span class="built_in">this</span>.r,<span class="built_in">this</span>.r);h.closePath(),h.fill()&#125;,<span class="built_in">this</span>.move=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">this</span>.x+=<span class="built_in">this</span>.dx,<span class="built_in">this</span>.y+=<span class="built_in">this</span>.dy,!<span class="number">1</span>===<span class="built_in">this</span>.fadingOut&amp;&amp;<span class="built_in">this</span>.reset(),(<span class="built_in">this</span>.x&gt;n-n/<span class="number">4</span>||<span class="built_in">this</span>.y&lt;<span class="number">0</span>)&amp;&amp;(<span class="built_in">this</span>.fadingOut=!<span class="number">0</span>)&#125;,<span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;o=!<span class="number">1</span>&#125;,<span class="number">50</span>)&#125;<span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params">t</span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="number">1e3</span>*<span class="built_in">Math</span>.random())+<span class="number">1</span>&lt;<span class="number">10</span>*t&#125;<span class="function"><span class="keyword">function</span> <span class="title">l</span>(<span class="params">t,i</span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">Math</span>.random()*(i-t)+t&#125;f(),<span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>,f,!<span class="number">1</span>),<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;h=s.getContext(<span class="string">&quot;2d&quot;</span>);<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;i;t++)c[t]=<span class="keyword">new</span> y,c[t].reset();u()&#125;(),<span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params"></span>)</span>&#123;<span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;html&#x27;</span>)[<span class="number">0</span>].getAttribute(<span class="string">&#x27;data-theme&#x27;</span>)==<span class="string">&#x27;dark&#x27;</span>&amp;&amp;u(),<span class="built_in">window</span>.requestAnimationFrame(t)&#125;()&#125;;</span><br><span class="line">dark()</span><br></pre></td></tr></table></figure><p>其中代码里有这样一段内容：<br><img src="https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/202108121822274.png" alt="使暗色主题生效"><br>代码的这一部分要求<code>data-theme</code>也就是主题，必须为dark暗色主题（即夜间模式），因此仅在暗色主题生效。随后将js文件添加到配置文件的<code>inject</code>处或者其他需要的位置。</p><h1 id="3-CSS样式"><a href="#3-CSS样式" class="headerlink" title="3. CSS样式"></a>3. CSS样式</h1><p>将下方代码添加到Butterfly主题配置文件的<code>inject</code>的<code>head</code>里<br>作用是将此加入到每个页面的头部代码中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 背景宇宙星光  */</span></span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">      <span class="selector-id">#universe</span> &#123; </span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">        <span class="attribute">position</span>: fixed;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">pointer-events</span>: none;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>流星特效至此已经生效，<br>保存代码，预览本地，部署页面，备份源码。</p><p>星空背景自己在网络上找一张就行了，或者干脆不用星空背景，其他普通图片作为背景，用此特效也好看。</p><blockquote><p>这个教程学习自<a href="https://blog.justlovesmile.top/posts/6a260bf6.html">Justlovesmile’s BLOG</a>，在原文基础上有改动和补充。<br>该特效有一个小Bug是<code>暗色模式</code>调成<code>亮色模式</code>后流星特效还在，只是静止不动使其不明显了，没有清空画布。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo博客 </tag>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据库】第1章 绪论丨（第1节）数据库系统概述</title>
      <link href="/2021/09/29/2021-6/"/>
      <url>/2021/09/29/2021-6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文所属《数据库系统原理》分类专栏，相关文章导航请点击<a href="https://barry-flynn.github.io/2021/09/29/2021-5/">《数据库系统原理》目录汇总贴</a></p></blockquote><p>【数据库】第1章 绪论<br>本章介绍数据库系统的基本概念，包括数据管理技术的发展过程、数据库系统的组成部分等。从中可以学到为什么要使用数据库技术、数据库技术的重要性。本章是后面各章节的准备和基础。</p><h1 id="第1节-数据库系统概述"><a href="#第1节-数据库系统概述" class="headerlink" title="第1节 数据库系统概述"></a>第1节 数据库系统概述</h1><h2 id="数据库的4个基本概念"><a href="#数据库的4个基本概念" class="headerlink" title="数据库的4个基本概念"></a>数据库的4个基本概念</h2><ul><li>1、<strong>数据(data)</strong></li></ul><p>定义：描述事物的符号记录。描述事物的符号可以是数字，也可以是文字、图形、图像、音频、视频等，数据有多种表现形式，他们都可以经过数字化后存入计算机。<strong>数据的含义称为数据的语义，数据与其语义是不可分的。</strong></p><ul><li>2、<strong>数据库(DataBase, DB)</strong></li></ul><p>数据库是长期储存在计算机内、有组织的、可共享的大量数据的集合。数据库中的数据按一定的数据模型<strong>组织、描述和储存</strong>，具有<strong>较小的冗余度</strong> ，<strong>较高的数据独立性</strong>和<strong>易扩展性</strong>，并可为各种用户共享。概括地讲，数据库数据具有永久储存、有组织和可共享三个基本特点。</p><ul><li>3、<strong>数据库管理系统(DataBase Management System, DBMS)</strong></li></ul><p>数据库管理系统是位于用户与操作系统之间一层的数据管理软件。<strong>数据库管理系统</strong>和操作系统一样是<strong>计算机的基础软件</strong>。也是一个大型复杂的软件系统。它的主要功能包括以下几个方面：<br>（1）数据定义功能<br>（2）数据组织、存储和管理<br>（3）数据操纵功能<br>（4）数据库的事务管理和运行管理<br>（5）数据库的建立和维护功能<br>（6）其他功能</p><ul><li>4、<strong>数据库系统(DataBase System, DBS)</strong></li></ul><p>数据库系统是由数据库、数据库管理系统（及其应用开发工具）、应用程序和数据库管理员组成的存储、管理、处理和维护数据的系统。在一般不引起混淆的情况下，人们常常把数据库系统简称为数据库。</p><h2 id="数据管理技术的产生和发展"><a href="#数据管理技术的产生和发展" class="headerlink" title="数据管理技术的产生和发展"></a>数据管理技术的产生和发展</h2><ul><li><p>一、人工管理阶段<br>1）数据不保存<br>2）应用程序管理数据<br>3）数据不共享<br>4）程序不具有独立性<br><img src="https://i.loli.net/2021/09/29/mPk3Z28e4R5lyXD.png" alt="1-3 人工管理阶段应用程序与数据之间的一一对应关系.png"></p></li><li><p>二、文件系统阶段<br>1）数据可以长期保存<br>2）由文件系统管理数据</p><ul><li>数据共享性差，冗余度大</li><li>数据独立性差<br><img src="https://i.loli.net/2021/09/29/OdmPMA6zuDC3KJk.png" alt="1-4 文件系统阶段应用程序与数据之间的对应关系.png"></li></ul></li><li><p>三、数据库系统阶段<br>从文件系统到数据库系统标志着数据管理技术的飞跃。<br><img src="https://i.loli.net/2021/09/29/egnqXDRliHx2wIK.png" alt="1-6 数据库系统阶段应用程序与数据之间的对应关系.png"></p></li></ul><p>【总结】：在应用需求的推动下，在计算机硬件、软件发展的基础上，数据管理技术经历了<strong>人工管理</strong>、<strong>文件系统</strong>、<strong>数据库系统</strong>三个阶段。这三个阶段的特点及其比较如下表1-1所示：<br><img src="https://i.loli.net/2021/09/29/m9QzLhkvrK6geBf.png" alt="数据管理三个阶段的比较（表1-1）.png"></p><h2 id="数据库系统的特点"><a href="#数据库系统的特点" class="headerlink" title="数据库系统的特点"></a>数据库系统的特点</h2><p>与人工管理和文件系统相比，数据库系统的特点主要有以下几个方面。</p><ul><li><p><strong>数据结构化</strong><br>数据库系统实现整体数据的结构化，这是数据库的主要特征之一，也是数据库系统与文件系统的本质区别。所谓“整体”结构化是指数据库中的数据不再仅仅针对某一个应用，而是面向整个组织或企业：不仅数据内部是结构化的，而且整体是结构化的，数据之间是具有联系的。</p></li><li><p><strong>数据的共享性高、冗余度低且易扩充</strong><br>数据共享可以大大减少数据冗余，节约存储空间。数据共享还能够避免数据之间的不相容性与不一致性。<br>数据面向整个系统，且有结构，可以被多个应用共享使用，而且容易增加新的应用。这就使得数据库系统弹性大，易于扩充。</p></li><li><p><strong>数据独立性高</strong><br>数据独立性是借助数据库管理数据的一个显著优点，它已成为数据库领域中一个常用术语和重要概念，包括数据的<strong>物理独立性</strong>和<strong>逻辑独立性</strong>。</p><ul><li>1）物理独立性<br>指“用户的应用程序”与“数据库中数据的储存”是相互独立的。</li><li>2）逻辑独立性<br>指“用户的应用程序”与“数据库的逻辑结构”是相互独立的。</li></ul></li></ul><p>数据独立性是由数据库管理系统提供的二级映像来保证的。数据与程序的独立把数据的定义从程序中分离出去，加上储存数据的方法又由数据库管理系统负责提供，从而简化了应用程序的编制，大大减少了应用程序的维护和修改。</p><ul><li><strong>数据由数据库管理系统统一管理和控制</strong><br>它需提供以下几方面的数据控制功能：<ul><li>1）数据安全性保护<br>指保护数据以防止不合法使用造成的数据泄密和破坏。</li><li>2）数据完整性检查<br>指数据的正确性、有效性和相容性。</li><li>3）并发控制<br>对多用户的并发操作加以控制和协调。</li><li>4）数据库恢复<br>将数据库从错误状态恢复到某一已知的正确状态（亦称为完整状态或一致状态）的功能</li></ul></li></ul><hr><p>综上所述，<br><strong>【数据库】</strong>是长期储存在计算机内、有组织的、可共享的大量数据的集合。它可以供各种用户共享，具有最小冗余度和较高的数据独立性。<br><strong>【数据库管理系统】</strong>在数据库建立、运营和维护时对数据库进行统一控制，以保证数据的完整性和安全性，并在多用户同时使用数据库时进行并发控制，在发生故障后对数据库进行恢复。<br><strong>【数据库系统】</strong>的出现使信息系统从“<strong>以加工数据的程序为中心</strong>”转向“<strong>围绕共享的数据库为中心</strong>”的新阶段。这样既便于数据的集中处理，又能简化应用程序的研制和防护，提高了数据的利用率和相容性，提高了决策的可靠性。</p><hr><pre><code>》》下面是我最喜欢的自说自话环节《《</code></pre><blockquote><p><strong>【2021年09月29日】留言</strong><br>学了数据库的第一节，我的感悟是：<br>啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊脑子一团浆糊什么玩意啊满脑子都是数据数据数据库库库库库库…</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 《数据库系统原理》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数据库系统原理》目录汇总帖</title>
      <link href="/2021/09/29/2021-5/"/>
      <url>/2021/09/29/2021-5/</url>
      
        <content type="html"><![CDATA[<div class="note blue no-icon flat"><p><font size=2>本页作为我学习“数据库系统原理”这门课的博客笔记汇总帖，点击对应目录可跳转到我的对应博客，内容会持续完善，欢迎关注我今后的相关笔记文章。</font></p></div><blockquote><p>【声明】：相关博客仅作为学习笔记使用，如若内容构成侵权请及时联系我修改/关闭/删除相应内容。<br>转载请务必注明来自【百里飞洋】(<a href="https://barry-flynn.github.io/2021/09/29/2021-5/">https://barry-flynn.github.io/2021/09/29/2021-5/</a>) ，否则<code>侵权必究</code>！</p></blockquote><p>主要学习路线采用高等教育出版社的<kbd>《数据库系统概论 第5版》</kbd>目录，再次声明<code>相关博客仅作为学习笔记使用</code>，进行的知识点整理<code>目的是便于本人的理解与备忘</code>，分享纯属<code>为爱发电</code>，不会进行商业售卖，学习过程中也会吸收网络其他视频和博客博主的知识，并添加自己的原创理解，若对你有帮助欢迎到文章下方进行<code>打赏</code>（一分一毛一块也是爱）。</p><p>感谢所有老师、同学、前辈和引路人，在此脱帽致敬~</p><hr /><h1 id="第一篇-基础篇"><a href="#第一篇-基础篇" class="headerlink" title="第一篇 基础篇"></a>第一篇 基础篇</h1><h2 id="第1章-绪论"><a href="#第1章-绪论" class="headerlink" title="第1章 绪论"></a>第1章 绪论</h2><ul><li><a href="https://barry-flynn.github.io/2021/09/29/2021-6/">数据库系统概述</a></li><li><a href="https://barry-flynn.github.io/2021/09/30/2021-8/">数据模型</a></li><li>数据库系统的结构</li><li>数据库系统的组成</li><li>（小结与习题）</li></ul><h2 id="第2章-关系数据库"><a href="#第2章-关系数据库" class="headerlink" title="第2章 关系数据库"></a>第2章 关系数据库</h2><h2 id="第3章-关系数据库标准语言SQL"><a href="#第3章-关系数据库标准语言SQL" class="headerlink" title="第3章 关系数据库标准语言SQL"></a>第3章 关系数据库标准语言SQL</h2><h2 id="第4章-数据库安全性"><a href="#第4章-数据库安全性" class="headerlink" title="第4章 数据库安全性"></a>第4章 数据库安全性</h2><h2 id="第5章-数据库完整性"><a href="#第5章-数据库完整性" class="headerlink" title="第5章 数据库完整性"></a>第5章 数据库完整性</h2><hr /><h1 id="第二篇-设计与应用开发篇"><a href="#第二篇-设计与应用开发篇" class="headerlink" title="第二篇 设计与应用开发篇"></a>第二篇 设计与应用开发篇</h1><h2 id="第6章-关系数据理论"><a href="#第6章-关系数据理论" class="headerlink" title="第6章 关系数据理论"></a>第6章 关系数据理论</h2><h2 id="第7章-数据库设计"><a href="#第7章-数据库设计" class="headerlink" title="第7章 数据库设计"></a>第7章 数据库设计</h2><h2 id="第8章-数据库编程"><a href="#第8章-数据库编程" class="headerlink" title="第8章 数据库编程"></a>第8章 数据库编程</h2><hr /><h1 id="第三篇-系统篇"><a href="#第三篇-系统篇" class="headerlink" title="第三篇 系统篇"></a>第三篇 系统篇</h1><h2 id="第9章-关系查询处理和查询优化"><a href="#第9章-关系查询处理和查询优化" class="headerlink" title="第9章 关系查询处理和查询优化"></a>第9章 关系查询处理和查询优化</h2><h2 id="第10章-数据库恢复技术"><a href="#第10章-数据库恢复技术" class="headerlink" title="第10章 数据库恢复技术"></a>第10章 数据库恢复技术</h2><h2 id="第11章-并发控制"><a href="#第11章-并发控制" class="headerlink" title="第11章 并发控制"></a>第11章 并发控制</h2><h2 id="第12章-数据库管理系统"><a href="#第12章-数据库管理系统" class="headerlink" title="第12章 数据库管理系统*"></a>第12章 数据库管理系统*</h2><hr /><h1 id="第四篇-新技术篇"><a href="#第四篇-新技术篇" class="headerlink" title="第四篇 新技术篇"></a>第四篇 新技术篇</h1><h2 id="第13章-数据库技术发展概述"><a href="#第13章-数据库技术发展概述" class="headerlink" title="第13章 数据库技术发展概述"></a>第13章 数据库技术发展概述</h2><h2 id="第14章-大数据管理"><a href="#第14章-大数据管理" class="headerlink" title="第14章 大数据管理"></a>第14章 大数据管理</h2><h2 id="第15章-数据库设计"><a href="#第15章-数据库设计" class="headerlink" title="第15章 数据库设计"></a>第15章 数据库设计</h2><h2 id="第16章-数据仓库与联机分析处理技术"><a href="#第16章-数据仓库与联机分析处理技术" class="headerlink" title="第16章 数据仓库与联机分析处理技术"></a>第16章 数据仓库与联机分析处理技术</h2><hr /><p>THE END.</p>]]></content>
      
      
      <categories>
          
          <category> 《数据库系统原理》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【日常生活】大二学年规划清单</title>
      <link href="/2021/09/27/2021-4/"/>
      <url>/2021/09/27/2021-4/</url>
      
        <content type="html"><![CDATA[<div class="note green no-icon flat"><p>不断完善中……</p></div><p>卧槽已经大二了竟然啊啊啊！！！<br>因为疫情，天天家里蹲，我怕不是上了个家里蹲大学吧…<br>不行，大一对自己太放纵了，大二我得开始认真放在学习上了。</p><h1 id="专业学习"><a href="#专业学习" class="headerlink" title="专业学习"></a>专业学习</h1><ul><li><p>C语言复习巩固</p></li><li><p>前端技术学习要自律</p></li><li><p>专业课态度要认真</p></li></ul><hr><h1 id="英语积累"><a href="#英语积累" class="headerlink" title="英语积累"></a>英语积累</h1><p>为了四六级，冲冲冲！！！</p><ul><li>每天一组 Word list，并按计划复习</li><li>每天跟读一遍课文培养语感</li></ul><hr><h1 id="体育健身"><a href="#体育健身" class="headerlink" title="体育健身"></a>体育健身</h1><h2 id="单杠引体向上"><a href="#单杠引体向上" class="headerlink" title="单杠引体向上"></a>单杠引体向上</h2><p>为了体测成绩，冲啊！！！</p><iframe src="//player.bilibili.com/player.html?aid=633173378&bvid=BV1mb4y1y7aA&cid=414148388&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>暂时按上方视频中方法锻炼：</p><p>每周两次<kbd><a href="https://www.bilibili.com/video/BV1mb4y1y7aA?share_source=copy_web">点击跳转B站播放</a></kbd></p><ul><li>肩胛骨激活（10-12次）3组（最高点停顿1-2秒）</li><li>自重划船（10-12次）4组（逐渐往下走一点）</li><li>离心引力（10-12次）4组（增加离心时长到3秒以上）</li><li>核心 3组（做标准的时长-60秒）</li></ul><h2 id="跑步-amp-体前屈-amp-跳远"><a href="#跑步-amp-体前屈-amp-跳远" class="headerlink" title="跑步 &amp; 体前屈 &amp; 跳远"></a>跑步 &amp; 体前屈 &amp; 跳远</h2><p>暂定每周两次晚上去操场：</p><ul><li>跑圈 x 3</li><li>站位体前屈 x 8个节拍</li><li>坐位体前屈 x 8个节拍</li><li>跳远 x 5个来回</li></ul><hr><p>为监督自我成长与定期总结反馈，<br><del>提前适应未来的资本压榨生活</del><br>提前养成优秀学习生活习惯，<br>大二起，开始写<code>周报+月报</code>，<br>汇报每周学习/工作进程和收获，<br>嘿嘿，自个儿压榨自个儿~</p><p>交给谁呢？博客！！！写博客汇报！</p><pre><code>每篇周报须包括：</code></pre><ol><li>当周计划</li><li>计划完成情况</li><li>经验、心得和学习分享的总结</li><li>制定下周目标</li></ol><p><img src="https://i.loli.net/2021/10/04/Bu4JFXmdkrUQ8D9.jpg" alt="我的次元突破.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 日常生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【Linux安装】Win10安装Ubuntu双系统（含BIOS操作）</title>
      <link href="/2021/09/16/2021-3/"/>
      <url>/2021/09/16/2021-3/</url>
      
        <content type="html"><![CDATA[<h1 id="操作准备"><a href="#操作准备" class="headerlink" title="操作准备"></a>操作准备</h1><p>一个10多G以上大小的空U盘，一台Win10电脑（非Win10我不知是否可行）。</p><p>我的是联想ThinkPad笔记本，不同电脑操作起来可能与此文略有不同，</p><p>所以还需要准备一个善于思考能灵活变通的脑瓜儿~</p><h1 id="一、Ubuntu桌面系统镜像文件下载"><a href="#一、Ubuntu桌面系统镜像文件下载" class="headerlink" title="一、Ubuntu桌面系统镜像文件下载"></a>一、Ubuntu桌面系统镜像文件下载</h1><p>地址：<a href="https://cn.ubuntu.com/download/desktop"> 下载Ubuntu桌面系统 | Ubuntu </a></p><p>我选择下载的是长期支持(LTS)版本</p><div class="note default no-icon flat"><p>这篇文章下载的是Ubuntu 20.04.3 LTS，有2.9G那么大，下载时请耐心等待。</p></div><h1 id="二、U盘引导盘制作工具-Rufus-下载"><a href="#二、U盘引导盘制作工具-Rufus-下载" class="headerlink" title="二、U盘引导盘制作工具(Rufus)下载"></a>二、U盘引导盘制作工具(Rufus)下载</h1><p>地址：<a href="https://rufus.ie/zh/"> Rufus - 轻松创建USB启动盘 </a></p><p>我选择的是2021.08.03日更新的最新的rufus-3.15版本</p><div class="note default no-icon flat"><p>类似工具其实有很多，你可以用自己熟悉的。</p><p>Rufus 是一个开源免费的快速制作 U 盘系统启动盘和格式化 USB 的实用小工具，它可以快速把 ISO 格式的系统镜像文件快速制作成可引导的 USB 启动安装盘，支持 Windows 或 Linux 启动。rufus是一款实用的自启动u盘制作工具。用户可以通过该软件快速制作linux系统或者win启动u盘，不过在这之前你需要把重要资料备份到电脑中，因为格式化后什么都找不回来了。如果身边没有系统安装盘或者刻录光盘，那么使用rufus就可以帮你安装系统了。</p></div><h1 id="三、制作系统盘"><a href="#三、制作系统盘" class="headerlink" title="三、制作系统盘"></a>三、制作系统盘</h1><p>双击运行 rufus-3.15.exe 程序，</p><p>插入你的U盘，</p><p>点击“引导类型选项”后面的选择按钮，</p><p>选择刚刚下载的ubuntu-20.04.3-desktop-amd64.iso</p><p><img src="https://i.loli.net/2021/09/16/2yN1L6zgoCc5MEF.png" alt="rufus界面.png"></p><p>其他选项默认就可以，点击开始。</p><p><img src="https://i.loli.net/2021/09/16/MvHA4wf1k82FGXm.png" alt="Rufus弹出框.png"></p><p>选择以 ISO镜像 模式写入，点击OK。</p><p>接下来它就会把原来的东西格式化，然后把Ubuntu烧录进去。</p><p>（注意：U盘不要留东西，资料提前备份好！格式化后就全没了！！！）</p><p><img src="https://i.loli.net/2021/09/16/SFqnait5Nueb48j.png" alt="Rufus烧录完后的U盘.png"></p><p>上图就是烧录完后的U盘内文件了，</p><p>现在拔出U盘。</p><h1 id="四、制作分区"><a href="#四、制作分区" class="headerlink" title="四、制作分区"></a>四、制作分区</h1><p>按下图打开计算机管理（或者右键点击桌面“此电脑”，然后点击“管理”就行了）</p><p><img src="https://i.loli.net/2021/09/16/xtTvZY1mygUR9w3.png" alt="管理分区.png"></p><p>然后点击左侧磁盘管理，选择一个你想腾出来的盘（不会影响其中文件），</p><p>我选的是E盘，右键，选择压缩卷，</p><p><img src="https://i.loli.net/2021/09/16/ZF2KxUp35RIgLyl.png" alt="磁盘管理.png"></p><p>接着输入你想压缩的空间大小，</p><p>由于我笔记本盘容量小，于是就只给了50G，也就是51200MB，</p><p>你们可根据实际情况填写，当然是越大越爽，但如果不常用的话，倒也不用给太多。</p><p><img src="https://i.loli.net/2021/09/16/kvXctr4j3xHUygd.png" alt="输入压缩空间大小.png"></p><p>点击压缩，放心，这不会影响磁盘原有文件的。</p><p><img src="https://i.loli.net/2021/09/16/wxUCS7IDYbNHh4n.png" alt="磁盘压缩后.png"></p><h1 id="五、进入BIOS界面进行设置"><a href="#五、进入BIOS界面进行设置" class="headerlink" title="五、进入BIOS界面进行设置"></a>五、进入BIOS界面进行设置</h1><h2 id="1、进入BIOS"><a href="#1、进入BIOS" class="headerlink" title="1、进入BIOS"></a>1、进入BIOS</h2><div class="note default no-icon flat"><p>BIOS：(基本输入输出系统)，用于电脑开机运行系统各组件时的自我检测，以及加载系统启动引导程序，BIOS设置决定系统以什么方式启动，比如硬盘启动、U盘启动等，另外BIOS控制了电脑所有的低级功能，很多系统设置需进入BIOS界面才能更改。进入BIOS的方法因电脑品牌类型不同而有所差异。</p></div><h3 id="（方法1）：通过热键进入BIOS"><a href="#（方法1）：通过热键进入BIOS" class="headerlink" title="（方法1）：通过热键进入BIOS"></a>（方法1）：通过热键进入BIOS</h3><p>不同品牌的电脑进入所使用的按键不同，甚至同为联想笔记本ThinkPad但不同的系列，进入的方法都不同。你可以去网上搜一下你的电脑进入的按键是什么，比如很多电脑的方法是在启动和重新启动时按F2。</p><h3 id="（方法2）：通过UEFI固件设置进入BIOS"><a href="#（方法2）：通过UEFI固件设置进入BIOS" class="headerlink" title="（方法2）：通过UEFI固件设置进入BIOS"></a>（方法2）：通过UEFI固件设置进入BIOS</h3><p>按住shift键别撒手，点击重启电脑，电脑会进行高级启动。</p><p>选择右边“疑难解答”。</p><p><img src="https://i.loli.net/2021/09/16/63dvyJtGhEY1LuN.png" alt="选择疑难解答.png"></p><p>然后选择“高级选项”，</p><p><img src="https://i.loli.net/2021/09/16/8H5Q2jMyLahi4qY.png" alt="选择高级选项.png"></p><p>选择“ UEFI固件设置”，</p><p><img src="https://i.loli.net/2021/09/16/9ZSk1fW4gcvLy6q.png" alt="选择UEFI固件设置.png"></p><p>现在将刚刚那个系统U盘插入电脑，</p><p>点击“重启”，通过UEFI固件设置进入BIOS。</p><p><img src="https://i.loli.net/2021/09/16/UqjR6bwXEaCQZuI.png" alt="选择重启以更改UEFI固件设置.png"></p><h2 id="2、对BIOS进行U盘启动设置"><a href="#2、对BIOS进行U盘启动设置" class="headerlink" title="2、对BIOS进行U盘启动设置"></a>2、对BIOS进行U盘启动设置</h2><p>（以下内容，不同电脑操作键可能有差别，不同的主板BIOS的界面也是不同的）</p><h3 id="（1）设置Secure-Boot"><a href="#（1）设置Secure-Boot" class="headerlink" title="（1）设置Secure Boot"></a>（1）设置Secure Boot</h3><p>通过方向键，往右选择Security，再往下选择Security Boot，回车。</p><p><img src="https://i.loli.net/2021/09/17/qbZ8FyNjBWfQPxa.png" alt="选择Security.png"></p><p>选中SecureBoot并回车，上下键更改为Disabled，回车选中。</p><p>这里的作用是禁用UEFI安全启动（Disable Secure Boot for ASUS Motherboard），</p><p>因为如果主板设置了uefi安全启动，会与ubuntu安装的的第三方驱动发生冲突。</p><p><img src="https://i.loli.net/2021/09/17/R6lr4bmBzTwYCoq.png" alt="更改SecureBoot值.png"></p><p>按Esc退出Security。</p><h3 id="（2）将USB-HDD置顶"><a href="#（2）将USB-HDD置顶" class="headerlink" title="（2）将USB HDD置顶"></a>（2）将USB HDD置顶</h3><p>通过方向键，往右选择Starup，再往下选择Boot，回车。</p><p><img src="https://i.loli.net/2021/09/17/F687eEnKyoS4Db5.png" alt="选择Starup.png"></p><p>通过上下键选到USB HDD，</p><p>它后面的单词是我这次使用的U盘的牌子：金士顿（Kingston）</p><p><img src="https://i.loli.net/2021/09/17/rbDkoWGfv6ijN5K.png" alt="选择Ubuntu系统.png"></p><p>通过按 “+”（加号键）把Ubuntu系统顺序设为首位，（其他笔记本请参考你们的按键）</p><p>这里的作用是更改Ubuntu与Windows的启动顺序。</p><p><img src="https://i.loli.net/2021/09/17/zS13kqeAhCPXVdf.png" alt="把Ubuntu顺序置顶.png"></p><p>按 “F10” 保存退出。</p><h1 id="六、安装Ubuntu"><a href="#六、安装Ubuntu" class="headerlink" title="六、安装Ubuntu"></a>六、安装Ubuntu</h1><p>上一个操作完成后出现四行黑屏代码，</p><p>通过上下键选择第二行的Install Ubuntu并回车，进行安装Ubuntu。</p><p><img src="https://i.loli.net/2021/09/17/E9dw6Th4yrYAJgG.png" alt="U盘安装界面.png"></p><p>启动中，静静等待。</p><p><img src="https://i.loli.net/2021/09/17/wdQVUAak7cN26bP.png" alt="Ubuntu系统启动中.png"></p><h2 id="1、欢迎"><a href="#1、欢迎" class="headerlink" title="1、欢迎"></a>1、欢迎</h2><p>左边语言选择中文简体，然后选择右边安装Ubuntu，</p><p><img src="https://i.loli.net/2021/09/17/DZ9z4NxmIoKsBGu.png" alt="安装Ubuntu.png"></p><h2 id="2、键盘布局"><a href="#2、键盘布局" class="headerlink" title="2、键盘布局"></a>2、键盘布局</h2><p>默认中文就行，继续，</p><p><img src="https://i.loli.net/2021/09/17/89UcG6fWsBFA1oT.png" alt="安装Ubuntu-2-键盘布局.png"></p><h2 id="3、无线网络"><a href="#3、无线网络" class="headerlink" title="3、无线网络"></a>3、无线网络</h2><p>可以先跳过不连接，你选择现在连上也当然可以，下面继续。</p><h2 id="4、更新和其他软件"><a href="#4、更新和其他软件" class="headerlink" title="4、更新和其他软件"></a>4、更新和其他软件</h2><p>我选择最小安装（这个选项也是速度最快的），不安装多余应用，以后需要用到了再说。</p><p>当然你可以选择正常安装，会给你安装一些办公软件、游戏和媒体播放器啥的，不过时间会很长。</p><p><img src="https://i.loli.net/2021/09/17/25A8p4Vh71lXgoD.png" alt="安装Ubuntu-4-更新和其他软件.png"></p><h2 id="5、安装类型"><a href="#5、安装类型" class="headerlink" title="5、安装类型"></a>5、安装类型</h2><p>第一次安装的朋友在这一步请注意！！！一定要选“其他安装”！！！另一个选项会清除整个磁盘的所有文件，也就是你的Windows系统会被刷机！！！手别抖！！！一定要选“其他安装”！！！</p><p><img src="https://i.loli.net/2021/09/17/zTCJ94eYHZNAgpM.png" alt="安装Ubuntu-5-安装类型.png"></p><div class="note default no-icon flat"><p>接下来我们对Ubuntu进行分区，在分区之前先介绍一下Linux的文件系统：</p><p><b>/boot</b>:存放linux内核，用来引导系统的。如果是Legacy启动就要设置引导，UEFI就不用设置这个（UEFI要设置EFI引导区）</p><p><b>swap</b>：交换区，用作虚拟内存，这个一般和自己的物理内存一般大</p><p><b>/</b>：根目录，主要用来存放Linux系统文件</p><p><b>/usr</b>:存放用户程序，一般在/usr/bin中存放发行版提供的程序，用户自行安装的程序默认安装到/usr/local/bin中</p><p><b>/home</b>:存放用户文件</p></div><p>滚动鼠标滑轮，找到与你刚刚在Windows系统里分配给Ubuntu的相近大小的那个“空闲”磁盘空间（freespace），就像我刚刚给Linux分了50G大小，我就要选择下图那个50多个G（53688MB）的那个空闲空间。</p><p><img src="https://i.loli.net/2021/09/17/eWngyC5Zk7p12YR.png" alt="安装Ubuntu-5-安装类型2.png"></p><h3 id="（1）分配swap交换区"><a href="#（1）分配swap交换区" class="headerlink" title="（1）分配swap交换区"></a>（1）分配swap交换区</h3><p>选中那个空闲空间，点击左下角加号“+”，会弹出一个弹窗，</p><p>听朋友说，如果运行内存足够，其实swap交换区不设置也行，</p><p>我的电脑运行内存有8G的物理内存，应该够用，所以这个swap虚拟内存我就不设置很大了</p><p><img src="https://i.loli.net/2021/09/17/1XVhQPyb6ogli5D.png" alt="电脑物理内存RAM.png"></p><p>大小我给了1G，即“<b>1024MB</b>”，</p><p>分区选择第二个“<b>逻辑分区</b>”，位置选择“<b>空间起始位置</b>”，</p><p>用于“<b>交换空间</b>”，挂载点填“ / ”，也就是用来存放Linux系统文件的根目录，</p><p><img src="https://i.loli.net/2021/09/17/qdXYcKBo4h8fARV.png" alt="分配swap分区.png"></p><p>然后点击OK。</p><h3 id="（2）分配EFI引导区"><a href="#（2）分配EFI引导区" class="headerlink" title="（2）分配EFI引导区"></a>（2）分配EFI引导区</h3><p>选中那个空闲空间，点击左下角加号“+”，</p><p>大小我给了“<b>100MB</b>”，</p><p>分区选择“<b>逻辑分区</b>”，位置选择“<b>空间起始位置</b>”，</p><p>用于“<b>EFI系统分区</b>”模式，</p><p><img src="https://i.loli.net/2021/09/17/7lJksmynocCp6OA.png" alt="分配EFI引导.png"></p><p>然后点击OK。</p><h3 id="（3）分配-分区（根目录）"><a href="#（3）分配-分区（根目录）" class="headerlink" title="（3）分配 / 分区（根目录）"></a>（3）分配 / 分区（根目录）</h3><p>选中那个空闲空间，点击左下角加号“+”，</p><p>相当于Windows的C盘，</p><p>大小我给了10 G，即“<b>10240MB</b>”，</p><p>分区选择第一个“<b>主分区</b>”，位置选择“<b>空间起始位置</b>”，</p><p>用于“<b>Ext4日志文件</b>”，挂载点填“<b>/</b> ”，</p><p><img src="https://i.loli.net/2021/09/17/HoxtLwAl6JIyVZF.png" alt="分配根目录.png"></p><p>然后点击OK。</p><h3 id="（4）分配home分区"><a href="#（4）分配home分区" class="headerlink" title="（4）分配home分区"></a>（4）分配home分区</h3><p>选中那个空闲空间，点击左下角加号“+”，</p><p>相当于Windows的C盘下的“我的文档”，</p><p>大小：如果你不分配其他分区的话，那个空闲空间的剩余大小全给它就行，</p><p>分区选择“逻辑分区”，位置选择“空间起始位置”，</p><p>用于“Ext4日志文件”，挂载点填“ /home ”，</p><p><img src="https://i.loli.net/2021/09/17/pKl2DcEh5NU8Fxi.png" alt="分配home分区.png"></p><p> 然后点击OK。</p><h3 id="（5）分配一些其他区"><a href="#（5）分配一些其他区" class="headerlink" title="（5）分配一些其他区"></a>（5）分配一些其他区</h3><p>我只是初学，暂时用不到那么多的分区，所以把50多G空间都分给了上面那几个分区。想分其他分区的朋友们，感兴趣可以自行了解。</p><h3 id="（6）选择“安装启动引导器的设备”"><a href="#（6）选择“安装启动引导器的设备”" class="headerlink" title="（6）选择“安装启动引导器的设备”"></a>（6）选择“安装启动引导器的设备”</h3><p>下面那个“安装启动引导器的设备”选择我们刚刚分配的EFI引导区，</p><p>注意不要选成Windows的efi了！</p><p><img src="https://i.loli.net/2021/09/17/lJ7sgCqBkcRHmwD.png" alt="Windows的EFI.png"></p><p>而是要选刚刚咱们分配给Ubuntu的efi，比如我刚刚分配的100M的那个，</p><p><img src="https://i.loli.net/2021/09/17/XTROxJWrIV2Zitk.png" alt="Ubuntu的EFI.png"></p><h2 id="6、立即安装"><a href="#6、立即安装" class="headerlink" title="6、立即安装"></a>6、立即安装</h2><p>选择现在安装，</p><p>确认一下信息，无误后继续写入磁盘，</p><p><img src="https://i.loli.net/2021/09/17/Ld8GxMP6bqAW1pI.png" alt="安装Ubuntu-5-写入磁盘.png"></p><p>时区选默认的上海就可以，点击继续，</p><p><img src="https://i.loli.net/2021/09/17/9mndRu2AZiJeDow.png" alt="安装Ubuntu-6-时区.png"></p><p>下面的三个名字全输一样的就行，也别太长，</p><p>密码建议000000，或者123456等容易记忆又方便的，因为以后会经常输入。</p><p>选择“登录时需要密码”，点击继续。</p><p><img src="https://i.loli.net/2021/09/17/h2OetW1bGvC5EBy.png" alt="安装Ubuntu-7-名称与密码.png"></p><p>下面开始安装，漫长的等待中你可以看看轮播图了解一下Ubuntu。</p><p><img src="https://i.loli.net/2021/09/17/6nmAjvL4c1xY8zD.png" alt="安装Ubuntu-安装中.png"></p><p>然后Ubuntu安装成功，现在重启。</p><p><img src="https://i.loli.net/2021/09/17/M52mDN3kLBOEwjd.png" alt="Ubuntu安装成功-等待重启.png"></p><p>这个页面提示我们拔出U盘，并按下回车。</p><p><img src="https://i.loli.net/2021/09/17/lVNZsPtizORXuSr.png" alt="Ubuntu提醒拔出U盘并回车.png"></p><p>下面进入了Ubuntu的grub引导界面，以后电脑每次开机时都会出现，</p><p>可以通过上下键选择进入Ubuntu系统还是Windows系统，如下图：</p><p>选择第一行按回车就是进入Ubuntu，</p><p>选择第三行按回车就是进入Windows，</p><p>第二行和第四行不用管，</p><p>长时间不选择，默认进入第一个。</p><p><img src="https://i.loli.net/2021/09/17/i4xwUGeLNk75tOY.png" alt="双系统的进入选择界面.png"></p><p>安装完成后第一次打开时会有几个窗口，除了“Help Improve Ubuntu”那个窗口选择第二个选项<code>No</code>（不发送系统信息）之外，其他全跳过就行了。</p><p>这样我们就能使用Ubuntu系统了。</p><p>本文仅供参考，我是初学Linux，电脑磁盘容量不是很多，所以只分了50 G，<br>我所观看的教程中大多都是分配上百G，请根据你的情况进行合理调整分区大小。<br>若有疏漏之处，欢迎评论或联系我指出。</p><hr><h1 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h1><p>十分感谢网上朋友们的无私分享，包括但不限于：</p><p><a href="https://www.bilibili.com/video/BV11k4y1k7Li">【ubuntu20.04】10分钟win10安装ubuntu20.04双系统（无需Bios设置）_哔哩哔哩_bilibili</a></p><p><a href="https://blog.csdn.net/s717597589/article/details/79117112?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163128527816780255211054%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=163128527816780255211054&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-2-79117112.pc_v2_rank_blog_default&utm_term=Win10%E5%AE%89%E8%A3%85Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%90%ABBIOS%E6%93%8D%E4%BD%9C%EF%BC%89&spm=1018.2226.3001.4450">win10下安装Ubuntu16.04双系统_蔚然成风shang的博客-CSDN博客_win10安装ubuntu</a></p><p><a href="https://www.bilibili.com/video/BV1F44y1m7ZL/?spm_id_from=333.788.b_7265636f5f6c697374.2">Win10与Ubuntu双系统安装（绝对新手向）_哔哩哔哩_bilibili</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo博客】如何开始创作与更换好看的主题样式</title>
      <link href="/2021/09/16/2021-2/"/>
      <url>/2021/09/16/2021-2/</url>
      
        <content type="html"><![CDATA[<p>我先讲如何发布新的文章帖</p><h1 id="创作文章"><a href="#创作文章" class="headerlink" title="创作文章"></a>创作文章</h1><p>在上一篇文章中提到，初始化hexo博客后我们获得了它自动为我们生成的博客页面，同时还给我们生成了一个标题为“Hello World”的帖子。</p><p><img src="https://i.loli.net/2021/09/16/5B9MpQ3FWmbUuKC.png" alt="hexo博客搭建成功页面.png"></p><p>那么我们以后如何写新帖子发布到我们的博客网站呢？</p><p>打开“命令提示符窗口”进行操作，即之前用到的 cmd 终端窗口，</p><p>通过 cd 命令进入你电脑存放博客的文件夹，</p><p>（不知道怎么进入的朋友请拉到本文底部查看上篇文章）</p><h2 id="一、创建新帖子"><a href="#一、创建新帖子" class="headerlink" title="一、创建新帖子"></a>一、创建新帖子</h2><p>输入以下命令，并回车：</p><p>双引号内文字即为你要新建的文章帖子的标题，也会作为该文章的链接地址，<br>注意是英文输入法下的双引号！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;我的第一篇博客文章&quot;</span></span><br></pre></td></tr></table></figure><p> （或缩写成：hexo n “我的第一篇博客文章”）</p><p>回车后不一会儿，它提示我 <code> Barry-Flynn.github.io\source_posts\我的第一篇博客文章.md </code> 文件已经建好了。你会发现该文件后缀名是“.md”，没错，Hexo 默认我们用 Markdown 格式书写文章。</p><div class="note blue no-icon flat"><p>其实，Hexo 支持以任何格式书写文章，只要安装了相应的渲染插件。</p><p>例如，Hexo 默认安装了 hexo-renderer-marked 和 hexo-renderer-ejs，因此你不仅可以用 Markdown 写作，你还可以用 EJS 写作。如果你安装了 hexo-renderer-pug，你甚至可以用 Pug 模板语言书写文章。</p><p>只需要将文章的扩展名从 md 改成 ejs，Hexo 就会使用 hexo-renderer-ejs 渲染这个文件，其他格式同理。</p></div><p>现在，我之前让大家下载的VSCode编辑器这时候就派上用场了，当然，如果你对Markdown非常熟悉也有自己用的顺手的编辑器的话，当然可以根据你自己的习惯使用别的编辑器进行写作，但本文章仅使用VSCode进行演示。</p><h2 id="二、开始写作"><a href="#二、开始写作" class="headerlink" title="二、开始写作"></a>二、开始写作</h2><p>双击打开VSCode，</p><p>点击左上角“文件”，点击“选择文件”，</p><p>找到刚刚新建的“ <code> 我的第一篇博客文章.md </code> ” 并打开，</p><p>现在可以开始你的创作之旅了。</p><div class="note blue no-icon flat"><p>如果不会用Markdown语法书写文章的话可以在其他地方学习一下，</p><p>或进入官网进行学习：<a href="markdown-zh.readthedocs.io"> Markdown 中文文档 </a></p></div><p>写完后 <code> Ctrl+S </code> 保存你的文章（或点击vscode左上角“文件”，然后“保存”），关闭vscode。</p><p>插个话，我写文章的时候习惯用 <code> hexo s </code> 命令打开本地服务器预览，一边写文章，一边刷新 <a href="http://localhost:4000/">http://localhost:4000/</a> ，以此来查看我博客的实时效果。</p><p>当然，你也可以打开 vscode 右上角“侧边预览”小按钮实时查看效果：<br><img src="https://i.loli.net/2021/09/16/89zcNmhr7DbVKwJ.png" alt="我的第一篇博客vscode截图.png"></p><p>甚至你还可以给 vscode 安装小插件去得到一些更加丰富的功能和体验。</p><h2 id="三、提交到GitHub"><a href="#三、提交到GitHub" class="headerlink" title="三、提交到GitHub"></a>三、提交到GitHub</h2><p>我们需要对两个分支分别提交文件：</p><h3 id="1、main分支进行博客更新"><a href="#1、main分支进行博客更新" class="headerlink" title="1、main分支进行博客更新"></a>1、main分支进行博客更新</h3><p>下面这三句命令将是你以后每次写完文章后发布到main分支（存放的是你 hexo g 后的生成文件，即静态展示网页）时所需要输入的：<br>三行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean （清理缓存，可选用）</span><br><span class="line"> </span><br><span class="line">hexo g （生成资源文件）</span><br><span class="line"> </span><br><span class="line">hexo d （部署到服务器）</span><br></pre></td></tr></table></figure><p>其实这时候如果你刷新你的网站看一下，文章已经更新发布了，但我们还最好备份一下hexo分支代码到GitHub上，万一某一天咱们本地的代码出问题了，就可以直接从GitHub上克隆备份。</p><h3 id="2、hexo分支进行源码备份"><a href="#2、hexo分支进行源码备份" class="headerlink" title="2、hexo分支进行源码备份"></a>2、hexo分支进行源码备份</h3><p>如果嫌每次写完一篇文章都要备份 hexo 源文件分支很麻烦的话，你可以只对上面 main分支进行博客更新 ，这个hexo分支你自己想着去定期备份就行了（比如发布两三篇文章备份一次 / 每隔两天备份一次），或者你可以去了解一下如何实现自动部署。</p><p>我反正不觉得这个麻烦，也就三行命令。</p><p>下面这三句命令将是你以后每次想备份hexo分支（博客源代码文件）时所需要输入的：<br>三行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">（添加到缓存区）</span><br><span class="line">git add -A</span><br><span class="line"> </span><br><span class="line">（这次做了什么更改，简单描述下即可）</span><br><span class="line">git commit -m &quot;你的更新描述&quot;</span><br><span class="line"> </span><br><span class="line">（推送至远程仓库）</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>国内网络有时候很卡会导致最后一步 push 不上去而报错，该如何做你懂的吧？<br>多 push 几次，或者那个啥…咳咳…</p><hr><p>下面讲如何更换博客主题</p><h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><p>这是我们未更换前，默认主题的博客效果：</p><p><img src="https://i.loli.net/2021/09/16/5B9MpQ3FWmbUuKC.png" alt="hexo博客搭建成功页面.png"></p><h2 id="1、挑选Hexo主题"><a href="#1、挑选Hexo主题" class="headerlink" title="1、挑选Hexo主题"></a>1、挑选Hexo主题</h2><p>去哪挑选心仪的主题呢？</p><p>去官方文档给的链接地址：<a href="https://hexo.io/themes/"> Themes | Hexo </a> ，那里有好几百款其他大佬们制作好的主题。</p><p>此外还可以去某乎上或其他地方看看别人分享的好看的主题样式，如果实在没有合自己口味的，先选个差不多的凑合用吧，反正之后可以对主题进行个性化配置或者根据喜好进行魔改。</p><p>我这次演示的主题叫“ Butterfly ”，<br>作者演示的博客示例效果请见下方链接：<br> <a href="https://butterfly.js.org/"> Butterfly - A Simple and Card UI Design theme for Hexo </a><br>网友朋友们使用 Butterfly 主题后的博客：<br> <a href="https://butterfly.js.org/link/"> 可以看到很多朋友进行了魔改 </a></p><p>该主题的GitHub地址是：<br>🦋 A Hexo Theme: Butterfly<br><a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a></p><h2 id="2、安装Hexo主题"><a href="#2、安装Hexo主题" class="headerlink" title="2、安装Hexo主题"></a>2、安装Hexo主题</h2><p>方法很简单，就一行克隆命令。</p><p>老规矩，打开cmd，通过cd命令进入存放你博客源文件的文件夹进行操作，<br>（后面地址替换成你所选择的主题的GitHub项目地址）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>想和我安装一个主题的朋友们注意一下，<br>Butterfly 主题的作者在 GitHub 建了两个分支，<br>为了追求稳定，这行命令安装的是其稳定分支 （master分支），<br>当然你也可以选择去安装作者的开发测试版（dev分支），但可能存在 bug。</p><p>回车后非常快，就在本地克隆下载好了，这时可以发现在themes（主题）文件夹下出现了butterfly的文件夹。</p><h2 id="3、应用Hexo主题"><a href="#3、应用Hexo主题" class="headerlink" title="3、应用Hexo主题"></a>3、应用Hexo主题</h2><h3 id="1-更换主题"><a href="#1-更换主题" class="headerlink" title="1.更换主题"></a>1.更换主题</h3><p>用 VScode 打开 Hexo 根目录（博客源文件的文件夹）下的<code> _config.yml </code>，</p><p>拉到代码最下面，把主题（默认是<code> theme: landscape </code>）修改 为butterfly，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><p>Ctrl+S保存，最小化VScode。</p><h3 id="2-安装插件"><a href="#2-安装插件" class="headerlink" title="2.安装插件"></a>2.安装插件</h3><p>注意我这里安装插件的原因是该butterfly主题的HTML文件和CSS样式文件是用 pug 以及 stylus 写出来的，不安装没法正常显示。你们安装与否请参考你们所选主题的安装文档。</p><p>选择了 butterfly 主题，如果你没有 pug 以及 stylus 的渲染器，请下载安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>在国内下载过程可能会很慢，可以咳咳咳一下那个墙….</p><h3 id="3-查看效果"><a href="#3-查看效果" class="headerlink" title="3.查看效果"></a>3.查看效果</h3><p>我们先清理一下，<br><code>hexo clean</code></p><p>再生成一下，<br><code>hexo g</code></p><p>启动一下本地的服务器先瞅瞅，<br><code>hexo s</code></p><p> 浏览器地址栏输入：<code> <a href="http://localhost:4000/">http://localhost:4000</a> </code><br><img src="https://i.loli.net/2021/09/16/NkcuL2GjeaVvoFy.png" alt="更换butterfly主题后的博客.png"></p><p>OK，更换成功！之后进行一些简单的配置更改就行了。Ctrl+C关闭本地预览。</p><hr><p>接下来是博客主题的个性化配置<br>这个因主题不同而不同，<br>请参考你所选择的主题的作者给的文档教程<br>这里我列出我现在目前使用的Butterfly主题的作者撰写的文档教程</p><h1 id="个性化配置"><a href="#个性化配置" class="headerlink" title="个性化配置"></a>个性化配置</h1><p>Butterfly 主题的作者文档教程：</p><p><a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a><br><a href="https://butterfly.js.org/posts/dc584b87/">Butterfly 安装文档(二) 主题页面</a><br><a href="https://butterfly.js.org/posts/4aa8abbe/">Butterfly 安装文档(三) 主题配置-1</a><br><a href="https://butterfly.js.org/posts/ceeb73f/">Butterfly 安装文档(四) 主题配置-2</a><br><a href="https://butterfly.js.org/posts/98d20436/">Butterfly 安装文档(五) 主题问答</a><br><a href="https://butterfly.js.org/posts/4073eda/">Butterfly 安装文档(六) 进阶教程</a><br><a href="https://butterfly.js.org/posts/198a4240/">Butterfly 安装文档(七) 更新日誌</a><br>以及一些其他功能的实现，都请前往Butterfly主题作者的网站进行查找。</p><hr><h1 id="我的陌生知识点积累"><a href="#我的陌生知识点积累" class="headerlink" title="我的陌生知识点积累"></a>我的陌生知识点积累</h1><ul><li><p>pug ：一个HTML模板引擎<a href="https://pugjs.org/zh-cn/api/getting-started.html"> Pug中文文档 - 入门指南 </a>，效果示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--pug--&gt;</span><br><span class="line">&lt;template lang=&quot;pug&quot;&gt;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.box</span></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.box1</span></span><br><span class="line">            <span class="selector-tag">div</span><span class="selector-class">.box2</span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--解析成<span class="selector-tag">HTML</span>后--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;box&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;box1&quot;&gt;</span><br><span class="line">            &lt;<span class="selector-tag">div</span> class=&quot;box2&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>stylus ：Stylus 是一款 CSS 的预处理器，也就是我们常说的 CSS 框架，语法示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span></span><br><span class="line">  <span class="attribute">font</span>: <span class="number">12px</span> Helvetica, Arial, sans-serif;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.button</span></span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  -moz-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo博客 </tag>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
            <tag> VScode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo博客】从0开始进行搭建并部署到GitHub</title>
      <link href="/2021/09/15/2021-1/"/>
      <url>/2021/09/15/2021-1/</url>
      
        <content type="html"><![CDATA[<!--深灰--><div class="note blue no-icon flat"><p>【注意】：本文纯属才疏尚浅的我以笔记的形式进行的记录，很多知识其实我也不是太懂，可能存在理解偏差和认知错误，来学习的朋友们请自己甄别，路过的大神们也别喷我哈哈，有什么问题和建议可以评论提出或者其它方式联系我。我会尽可能保持更新该文章所使用到的技术和做法，并随时接受勘误。</p></div><div class="note green no-icon flat"><p>右下角设置可调为夜间模式阅读文章<br>PC端目录在侧边栏或右下角，手机端目录在右下角<br>点击目录可跳转到文章相应部分（本文强烈建议在PC端观看）<br>PC端右下角设置也可隐藏侧边栏，或者进入纯净的阅读模式</p></div><div class="note red no-icon flat"><p>本篇文章为 <a href="https://barry-flynn.github.io/">百里飞洋丨Barry Flynn</a> 版权所有，<br>转载与分享请务必携带原文链接：<a href="https://barry-flynn.github.io/2021/09/15/2021-1/">https://barry-flynn.github.io/2021/09/15/2021-1/</a><br>侵权必究！！！</p></div><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>&emsp;&emsp;每当在大佬们群里划水的时候，身为<big> <del>大佬</del> </big>菜鸡，总是很羡慕他们拥有自己的域名和博客。但由于我还是初学计算机的学生，买域名或者租云服务器主机其实也并不是很急迫的事情 <del>（才不是因为不想掏那份钱哈哈哈）</del> ，主要我是怕买了之后不会用，在那一边闲着 haha~ 因此我选择了 Hexo 作为我的博客框架，花了一两天时间，查找翻阅网上各种教程，将 Hexo 成功部署到了 GitHub Pages，建立了人生第一个真正属于自己的个人（博客）网站。</p><ul><li><p>什么是Hexo？<br>&emsp;&emsp;Hexo 是一个快速、简洁而强大的博客框架，基于 Node.js，同样托管于 GitHub 之上。生态中拥有众多插件主题。你可以基于它快速生成一些静态页面。你可以使用别人的各种主题与插件，也可以自己定制开发想要的功能。</p></li><li><p>为什么选择了Hexo而没有选择其他的？<br>&emsp;&emsp;其他常用的博客框架还有 <a href="https://wordpress.org/">WordPress</a>，<a href="https://typecho.org/">Typecho</a>，<a href="https://ghost.org/">Ghost</a> 等，但这些往往都需要购置自己的服务器，而无法静态化地部署到 GitHub Pages 上。个人博客的话，用 Hexo 完全不需要去另外购买空间，不需要有虚拟主机或者云服务器，可以直接托管到 Github、coding、gitee 等托管平台，免费提供的空间就完全足够了，毕竟一篇写完的文章大小都是kb级别的。<br>&emsp;&emsp;第二，因为 Hexo 是完全使用 markdown 文件写的博客（一种介于txt文本和Word文档之间的一种格式），后期备份和迁移非常方便。我的危机意识比较强，特别不放心那些空间商的数据库和空间的安全性，生怕某一天网站崩了就全没了。<br>&emsp;&emsp;第三，Hexo 生成的属于静态网站，体积小，访问速度快，性能更优，而且纯静态的方便网站的 SEO （搜索引擎优化）。</p></li></ul><div class="note default no-icon flat"><p>&emsp;&emsp;静态网站生成器还有 <a href="https://vuepress.vuejs.org/">Vuepress</a>，<a href="https://www.gatsbyjs.org/">Gatsby</a> 等。但这些多是为了写文档而量身定制的，你也可以使用它们，但是相较 Hexo 的博客定位，它们关于博客的插件和主题以及解决办法会少得多。<br>&emsp;&emsp;虽然Hexo 提供的功能 <a href="https://gohugo.io/">Hugo</a> 几乎都有，（生成大量文件时，甚至比 Hexo 更快）不过它是基于 GO 语言。日后你想对自己的网站进行自定义，即便是 Hugo，你编写前端的交互仍旧需要使用 JavaScript，所以选择基于 JavaScript 的 Hexo 可以降低学习成本。（你若对 GO 有兴趣，仍然可以自己尝试使用 Hugo）<br>&emsp;&emsp;所以对于新手来说，使用 Hexo 作为起始点，不失为一个好选择。（当然如果你有钱租服务器，并希望快速上手的话，就可以考虑考虑 WordPress 或者 Typecho）<br><em>——（云游君）</em></p></div><ul><li>为什么选择率先部署到 GitHub 而不是其他平台？<br>&emsp;&emsp;GitHub是一个面向开源及私有软件项目的托管平台，也是世界上最大的代码托管平台，因为只支持Git作为唯一的版本库格式进行托管，故名GitHub。GitHub中文社区,是国内领先的开源社区,是一个可以发现优质开源项目的地方。（由于程序员大多是男性，GitHub又被戏谑地调侃成全球最大同性交友网站”Gayhub”，哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈……咳咳，说多了）<br>&emsp;&emsp;Hexo 配合 GitHub 的 actions 或其他 CI/CD，比如 cycleci 等，能做到一键部署、发布。国内的代码托管平台比如 coding 和 gitee（码云）的服务可能没有GitHub全面，开源项目也少，也没有GitHub的社区归属感强，所以一般选择GitHub托管代码。（我不久之后可能也会选择 coding 或 gitee 啥的国内平台也同步备份和托管博客啥的了，因为GitHub服务器在国外，有时候访问我这个博客，那个网速啊真一言难尽……平时不卡的时候只能说还行吧）</li></ul><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><h2 id="一、用GitHub创建仓库"><a href="#一、用GitHub创建仓库" class="headerlink" title="一、用GitHub创建仓库"></a>一、用GitHub创建仓库</h2><h3 id="1-注册GitHub账号"><a href="#1-注册GitHub账号" class="headerlink" title="1. 注册GitHub账号"></a>1. 注册GitHub账号</h3><p>（有账号的可跳过此步骤）<br>&emsp;&emsp;虽然都是英文，但不必畏惧，也并不会造成使用障碍，只要记得最常用的选项含义即可，以及善用浏览器的网页翻译功能和手头的翻译软件。</p><!--深灰--><div class="note default no-icon flat"><p>注意：注册时的英文用户名将成为你可以使用的免费域名前缀。</p></div><p><img src="https://i.loli.net/2021/09/15/uIVQoxiedS41ZXp.jpg" alt="注册GitHub账号.jpg"></p><p>注册流程非常简单，这里不再赘述。</p><h3 id="2-创建一个新的项目"><a href="#2-创建一个新的项目" class="headerlink" title="2. 创建一个新的项目"></a>2. 创建一个新的项目</h3><p>单击 右上角【+】- New Repository 新建项目（以下简称仓库），然后填写项目信息。<br>仓库的名字格式应为：<code>你的用户名.github.io</code></p><div class="note default no-icon flat"><p>为什么必须这个作为仓库名？<br>因为这是GitHub Pages 服务的命名规范，同时它也将成为你的专属域名。当然，你也可以购置自己的专属域名并用它来提供内容。</p></div><p>比如我的用户名是Barry-Flynn，那么我的仓库就叫：<code>Barry-Flynn.github.io</code><br>(全部小写更好，有大写也没事，除了有时用大小写切换有一丢丢麻烦外，没有区别）</p><p>在description一栏填写简介，随便填填，比如我填的是：<code>百里飞洋的个人空间</code></p><p><img src="https://i.loli.net/2021/09/15/LXAF5pVCziEPace.png" alt="创建GitHub博客仓库.png"></p><p>然后选择 Public。<br>最后可以选择勾选一下 Initialize the repository with a README。（其实无所谓，此步的作用是用不用生成一个类似仓库说明书的 README.md 文件）<br>完成后点击下面的 Create Repository。</p><h2 id="二、安装-VS-Code"><a href="#二、安装-VS-Code" class="headerlink" title="二、安装 VS Code"></a>二、安装 VS Code</h2><p>&emsp;&emsp;在安装Git之前，我建议先安装<a href="https://code.visualstudio.com/"> VS Code </a>。因为安装 Git Bash 时，可以设置 VS Code 作为默认编辑器。Visual Studio Code，简称 VS Code。目前最为强大易用的编辑器，轻量且快速。<del>（宇宙第一编辑器哈哈哈）</del></p><div class="note default no-icon flat"><p>注意：它并不是我们常常听到的 VS，VS 常常指的是 Visual Studio，是一个功能强大的 IDE（集成开发环境），体积要比 VS Code 都要大上一个量级。</p></div><p>对于它的安装，直接官网下载就行了，免费的，不再赘述。</p><h2 id="三、安装-Git"><a href="#三、安装-Git" class="headerlink" title="三、安装 Git"></a>三、安装 Git</h2><p>&emsp;&emsp;Git 是一个开源的分布式版本控制系统，由 Linus Torvalds（同时也是 Linux 的作者）为了管理 Linux 开发而开发。类似的工具还有：SVN。但始终更推荐 Git，因为它功能更为强大且它的背后还有更强大的生态：GitHub。</p><div class="note default no-icon flat"><p>&emsp;&emsp;简而言之，是一个版本管理工具。譬如设计师设计好了第三版的海报，客户却说还是要第一版吧，这时便可以通过 Git 快速回退到最初的版本。<br>&emsp;&emsp;你只需要把每次更改的状态（Git 会自动进行检测，你只要掌握基础的几条命令就可以了）告诉 Git，而不需要每个版本都保存一份压缩包，既方便也能大大节约空间。<br>&emsp;&emsp;当然这主要只对代码文本起作用，因为 Git 的本质是记录各行代码的增减，倘若是像视频、海报这类二进制文件来说便体现不出丝毫优势了。当然想要应对这种场景还有<a href="https://git-lfs.github.com/"> Git LFS </a>。<br><em>——（云游君）</em></p></div><p>你可以直接去官网下载Git并安装，如果国内网速太慢可以“科学上网”或者从“腾讯软件中心”等平台下载。MacOS 用户可以下载官网的安装包进行安装，也可以直接安装 App Store 的 Xcode（附带会安装 Git，但是比较大）。安装时一路next到底就行了，也可以在网上找教程，我不再多说。</p><h2 id="四、安装-Node-js"><a href="#四、安装-Node-js" class="headerlink" title="四、安装 Node.js"></a>四、安装 Node.js</h2><p>&emsp;&emsp;何为Node.js ？<a href="https://nodejs.org/en/"> Node.js </a>是一个基于Chrome JavaScript 运行时建立的一个平台。简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js是一个事件驱动I/O（计算机接口）服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。<br>&emsp;&emsp;对的，第一次看到这个解释的时候其实我也很难理解，但不妨碍我们用它，想进一步了解的朋友们可以去官网浏览官方文档，或者看看下面这段其他博主的理解。</p><div class="note default no-icon flat"><p>什么是 Node.js ？<br>&emsp;&emsp;这得从什么是 JS 说起，JS 也就是 JavaScript。（为什么有种从盘古开天辟地开始的感觉）没错，JavaScript 就是网页的盘古。JavaScript 是一种编程语言，我们所见到的网页中的交互和逻辑处理几乎都是由 JavaScript 完成。JavaScript 语法简单，易学易用。（当然也请不要小瞧它，虽然它入门门槛低，但上限同样也很高。包括但不限于实现网站前后端，手机桌面应用程序，机器学习，计算机图形学等。）在 Node.js 诞生前，JavaScript 都运行于浏览器端。<br>&emsp;&emsp;也就是说，它是鱼，浏览器是装满了水的水缸。2008 年，Chrome V8 诞生。2009 年，Node.js 诞生。并成为 GitHub 早期最著名的开源项目。GitHub 可能大家已有所了解，后续再说。<br>&emsp;&emsp;Node.js 便是一个基于 Chrome V8 引擎的 JavaScript 运行环境。（当年第一次看到这句话时，我也一脸懵逼。）按照我的理解，JavaScript 是鱼，Chrome V8 就是抽水机，Node.js 则把这台抽水机也装在你电脑上。于是你的电脑也有了 Node.js 这个和浏览器相似的水缸，也可以在里面运行 JavaScript 了！当然 Node.js 和浏览器端还是因为自身定位和一些历史原因而有些许区别的，不再展开。<br><em>——（云游君）</em></p></div><p>建议下载<b>长期支持版(LTS)</b>而非<b>当前发布版</b>（因为如果是最新版，容易出现一些奇妙的 bug）。</p><p>全部默认下一步进行安装。然后，<br>Windows 用户打开命令提示符，即按住键盘 Win+R，输入<code> cmd </code>然后回车，弹出黑色代码窗口。（本文以 Windows10 为例）</p><div class="note default no-icon flat"><p>MacOS 用户打开终端。<br>Linux 用户右上角关闭本标签页。</p></div><p>后续如提到输入命令，均默认指打开终端进行输入。</p><p>输入<code> node --version </code>回车，如果得到的版本号与你方才安装的一致，那么 Node.js 就已经成功安装。</p><p>Node.js 安装成功时也默认安装了 npm，在此后将会用到。<br>npm 是随 Node.js 一起被安装的包管理工具，你可以理解成 Node.js 自带的应用商店。</p><p>对了，国内使用 npm 可能很慢，你可以“科学的上网”，或者考虑切换为国内镜像源（比如淘宝镜像源），即手动输入以下内容后按回车(也可以Ctrl+C复制和Ctrl+V粘贴以下代码到命令窗口按回车)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>（上面这行切换镜像源方法的代码我没用过，还不确定它的有效性，如果你会“科学的上网”的话不用管这种方法，不会的话可以输入这行命令试一下，没报错就OK，如果报错就自行搜索方法吧先，鄙人实在是不才）</p><h2 id="五、安装Hexo"><a href="#五、安装Hexo" class="headerlink" title="五、安装Hexo"></a>五、安装Hexo</h2><p>&emsp;&emsp;这里是它的官网：<a href="https://hexo.io/"> Hexo </a><br>&emsp;&emsp;这个是它的<a href="https://hexo.io/zh-cn/docs/index.html"> 中文官方文档 </a>（建议收藏，用到了就多看看）<br>&emsp;&emsp;这是它的GitHub项目链接: <a href="https://github.com/hexojs/hexo">https://github.com/hexojs/hexo</a></p><p>如何安装Hexo呢?</p><p>在cmd终端窗口中输入以下命令后回车：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>然后等待一会进度条走完，没报错就代表安装成功。<br>进度条卡住不动可能还是国内网络问题，“科学的上网”哦，咳咳….</p><p>如果安装失败，可能是没有权限，可以尝试头部加上 sudo 重新执行，即输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-cli -g </span><br></pre></td></tr></table></figure><div class="note default no-icon flat"><p>上面命令中，<br><code> install </code>自然是安装。<br><code> hexo-cli </code>则是 hexo 的终端工具，可以帮助你生成一些模版文件，之后再用到。<br><code> -g </code>代表的是全局安装。也就是在任何地方都可以使用，否则会只能在安装的目录下使用。</p></div><h1 id="正式操作"><a href="#正式操作" class="headerlink" title="正式操作"></a>正式操作</h1><h2 id="六、初始化-Hexo-工程"><a href="#六、初始化-Hexo-工程" class="headerlink" title="六、初始化 Hexo 工程"></a>六、初始化 Hexo 工程</h2><p>&emsp;&emsp;注意：接下来应该是你自己的自定义的目录，请不要完全复制粘贴我的！<br>比如说我是Windows用户，想把我的网站代码以后都储存在<br>电脑 E 盘的<code> BarryFlynn\Github\ </code>文件夹下<br>那么我要先在E盘建立相应的文件夹，然后再继续操作。<br>由于cmd终端最开始默认在C盘操作，我得先切换到E盘，那么我要输入<code> E: </code>然后回车,即我会看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Microsoft Windows [版本 10.0.19042.1165]</span><br><span class="line">(c) Microsoft Corporation。保留所有权利。</span><br><span class="line"> </span><br><span class="line">C:\Users\10272&gt;E:</span><br><span class="line"> </span><br><span class="line">E:\&gt;</span><br></pre></td></tr></table></figure><p>然后此时，我要通过 cd 命令进入我本地电脑打算存储网站代码的文件夹目录。（或者右键文件夹 Git Bash Here），即 BarryFlynn\Github\ 文件夹里</p><div class="note default no-icon flat"><p>百度百科：<br><a href="https://baike.baidu.com/item/cd/3516393"> cd | DOS 命令 </a><br><a href="https://baike.baidu.com/item/cd/3516411"> cd （LINUXSHELL 命令） </a></p></div><p>也就是说我需要输入<code> cd BarryFlynn\Github\ </code>然后回车，我会看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E:\&gt;cd BarryFlynn\Github\</span><br><span class="line">E:\BarryFlynn\Github&gt;</span><br></pre></td></tr></table></figure><p>好了成功进入，接下来输入下方代码，再按回车：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init 你的名字.github.io</span><br></pre></td></tr></table></figure><div class="note default no-icon flat"><p><code> hexo </code>：正是因为我们之前安装了 hexo-cli 这一个包，所以我们可以在终端中使用 hexo 这一命令。<br><code> init </code>：用来初始化博客的模版文件。后面跟的是你要新建的文件夹，最好和你此前新建的仓库名一致，比如我的是：<code> Barry-Flynn.github.io </code></p></div><p>然后我会看到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github&gt;hexo init Barry-Flynn.github.io</span><br><span class="line">INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span><br><span class="line">[32mINFO [39m Install dependencies</span><br><span class="line">added 242 packages from 207 contributors in 105.871s</span><br><span class="line"> </span><br><span class="line">15 packages are looking for funding</span><br><span class="line">  run `npm fund` for details</span><br><span class="line"> </span><br><span class="line">INFO  Start blogging with Hexo!</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github&gt;</span><br></pre></td></tr></table></figure><p>下面通过 cd  进入我的博客文件夹，</p><p>即输入 cd Barry-Flynn.github.io 后按回车，我会看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github&gt;cd Barry-Flynn.github.io</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;</span><br></pre></td></tr></table></figure><p>现在我就是处于 E:\BarryFlynn\Github\Barry-Flynn.github.io 文件夹下操作了（你的博客源文件的文件夹当然可以跟我的路径不一致，放到你想放的地方就好，不过也需要参照我的方法用命令进入里面），</p><p>现在在这个文件夹内默认安装所有 <code>package.json</code> 文件中提到的包，<br>即输入<code> npm install </code>然后回车，我会看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;npm install</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.3.2 (node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br><span class="line"> </span><br><span class="line">audited 243 packages in 4.956s</span><br><span class="line"> </span><br><span class="line">15 packages are looking for funding</span><br><span class="line">  run `npm fund` for details</span><br><span class="line"> </span><br><span class="line">found 0 vulnerabilities</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;</span><br></pre></td></tr></table></figure><p>这时候，我的 Barry-Flynn.github.io 文件夹里面会多出一堆文件，<br>文件夹结构应该大致是这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|  ├── _drafts</span><br><span class="line">|  └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>现在我们输入 <code> hexo server </code> 然后回车，会看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;hexo server</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p><code> server </code>代表开启本地的 Hexo 服务器，这时你就可以打开浏览器，在地址栏中输入 localhost:4000 就可以看到本地的网页了。<br><img src="https://i.loli.net/2021/09/16/5B9MpQ3FWmbUuKC.png" alt="hexo博客搭建成功页面.png"></p><p>这个网页就是Hexo为你自动生成的博客页面。<br>按 <code> Ctrl+C </code> 中断服务器的运行，<br>系统提示  终止批处理操作吗(Y/N)?  输入<code> Y </code>然后回车。<br>至此，基础的模版页面便已经搭建好了。</p><h2 id="七、生成静态文件"><a href="#七、生成静态文件" class="headerlink" title="七、生成静态文件"></a>七、生成静态文件</h2><p>&emsp;&emsp;到现在，我们的工作都是在本地进行，想必你也很想放到线上与小伙伴们分享。这便轮到了 GitHub Pages 的出场，不过 GitHub Pages 只支持纯静态文件。</p><p>所以我们需要使用下面一行命令先来生成站点的静态文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line"> </span><br><span class="line">（上方命令也可以缩写为 hexo g）</span><br></pre></td></tr></table></figure><p>输入后回车，我会看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;hexo g</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded in 209 ms</span><br><span class="line">INFO  Generated: archives/index.html</span><br><span class="line">INFO  Generated: archives/2021/index.html</span><br><span class="line">INFO  Generated: archives/2021/08/index.html</span><br><span class="line">(node:20772) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(Use `node --trace-warnings ...` to show where the warning was created)</span><br><span class="line">(node:20772) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:20772) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br><span class="line">(node:20772) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(node:20772) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:20772) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br><span class="line">INFO  Generated: index.html</span><br><span class="line">INFO  Generated: fancybox/jquery.fancybox.min.css</span><br><span class="line">INFO  Generated: js/script.js</span><br><span class="line">INFO  Generated: 2021/08/25/hello-world/index.html</span><br><span class="line">INFO  Generated: css/style.css</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.woff2</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.woff</span><br><span class="line">INFO  Generated: fancybox/jquery.fancybox.min.js</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.ttf</span><br><span class="line">INFO  Generated: css/fonts/FontAwesome.otf</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.eot</span><br><span class="line">INFO  Generated: js/jquery-3.4.1.min.js</span><br><span class="line">INFO  Generated: css/images/banner.jpg</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.svg</span><br><span class="line">INFO  17 files generated in 1.98 s</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;</span><br></pre></td></tr></table></figure><p>此时我的文件夹目录下会出现 public  这个文件夹，里面存放的就是我的站点的静态文件。</p><h2 id="八、与远程仓库建立关联"><a href="#八、与远程仓库建立关联" class="headerlink" title="八、与远程仓库建立关联"></a>八、与远程仓库建立关联</h2><p>接下来我们将本地的仓库与此前在 GitHub 上建立的仓库建立关联。</p><p>输入 <code> git init </code> 初始化 Git 仓库，只需要执行一次即可，以后不用执行了，因为这是进行初始化，看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;git init</span><br><span class="line">Initialized empty Git repository in E:/BarryFlynn/Github/Barry-Flynn.github.io/.git/</span><br></pre></td></tr></table></figure><p>在将其部署到 GitHub Pages 上之前，我们最好先建立一个分支。</p><div class="note default no-icon flat"><p>什么是分支？<br>Git 提供了版本管理功能，其中还有一个分支功能，你现在可以简单地将其理解为平行世界。比如，对同一个文件夹，切换到它的不同的分支会显示不同的文件内容。</p></div><p><code> 你的名字.github.io </code>部署后，GitHub Pages 将默认使用你的 main分支（以前叫 master分支，一个意思，主要分支的意思）作为静态文件部署。所以我们最好新建一个 hexo 分支（命名无所谓）用来存储 Hexo 的源代码，master 分支则用来存储部署后的静态文件。为了方便，不想其他名字了，这个分支我就直接起名叫 hexo 吧。</p><p>新建该分支的命令语句是 <code> git checkout -b hexo </code> ，然后回车，可以看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;git checkout -b hexo</span><br><span class="line">Switched to a new branch &#x27;hexo&#x27;</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;</span><br></pre></td></tr></table></figure><p>这时便成功建立了一个 hexo 分支。（此后基本上所有的命令工作都将在 hexo 分支下进行）</p><div class="note default no-icon flat"><p>你可以通过 git branch -v 来查看当前有哪些分支，使用 git checkout 分支名 来切换到对应的分支。<br>这是一位博主“云游君”的 <a href="https://www.yunyoujun.cn/note/git-learn-note/"> Git 学习笔记 </a></p></div><h2 id="九、部署-main分支"><a href="#九、部署-main分支" class="headerlink" title="九、部署 main分支"></a>九、部署 main分支</h2><p>为了更方便的将博客静态文件（ main 分支）部署到 GitHub Pages 上，Hexo 提供了 hexo-deployer-git 插件。</p><p>老规矩，安装该插件，要输入下面命令，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure><p>回车后可以看到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;npm install hexo-deployer-git</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.3.2 (node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br><span class="line"> </span><br><span class="line">+ hexo-deployer-git@3.0.0</span><br><span class="line">added 1 package from 1 contributor and audited 244 packages in 8.166s</span><br><span class="line"> </span><br><span class="line">15 packages are looking for funding</span><br><span class="line">  run `npm fund` for details</span><br><span class="line"> </span><br><span class="line">found 0 vulnerabilities</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;</span><br></pre></td></tr></table></figure><p>下面对 <code> 你的名字.github.io </code> 文件夹下的 <code> _config.yml </code> 文件进行配置。</p><p>右键 <code> _config.yml </code> ，打开方式选VS Code（或者直接用VS Code打开该文件），</p><p>滑到最下面，把关于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:&#x27; &#x27;</span><br></pre></td></tr></table></figure><p>的这段代码补充为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/你的名字/你的名字.github.io #仓库地址</span><br><span class="line">  branch: main # 默认使用 master 分支(Github现在改名为main分支)</span><br><span class="line">  message: Update Hexo Static Content # 自定义的此次部署更新的说明</span><br></pre></td></tr></table></figure><p>Ctrl+S保存代码，然后退出VS Code，部署！</p><p>终端里输入命令 <code> hexo deploy </code> 后（或者缩写为  hexo d  ）回车，我的电脑显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;hexo deploy</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Setting up Git deployment...</span><br><span class="line">Initialized empty Git repository in E:/BarryFlynn/Github/Barry-Flynn.github.io/.deploy_git/.git/</span><br><span class="line">Author identity unknown</span><br><span class="line"> </span><br><span class="line">*** Please tell me who you are.</span><br><span class="line"> </span><br><span class="line">Run</span><br><span class="line"> </span><br><span class="line">  git config --global user.email &quot;you@example.com&quot;</span><br><span class="line">  git config --global user.name &quot;Your Name&quot;</span><br><span class="line"> </span><br><span class="line">to set your account&#x27;s default identity.</span><br><span class="line">Omit --global to set the identity only in this repository.</span><br><span class="line"> </span><br><span class="line">fatal: unable to auto-detect email address (got &#x27;10272@DESKTOP-N3PNS7C.(none)&#x27;)</span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (E:\BarryFlynn\Github\Barry-Flynn.github.io\node_modules\hexo-util\lib\spawn.js:51:21)      at ChildProcess.emit (events.js:400:28)</span><br><span class="line">      at ChildProcess.cp.emit (E:\BarryFlynn\Github\Barry-Flynn.github.io\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;</span><br></pre></td></tr></table></figure><p>是的，部署出错（FATAL）了,“ Please tell me who you are.”</p><p>原来是创建git文件夹的时候信息不完善导致的，</p><p>它提示我需要运行（Run）下面两行程序，来设置我帐户的默认标识。</p><p>  git config –global user.email “<a href="mailto:&#121;&#x6f;&#x75;&#x40;&#x65;&#x78;&#x61;&#x6d;&#112;&#108;&#101;&#46;&#99;&#111;&#x6d;">&#121;&#x6f;&#x75;&#x40;&#x65;&#x78;&#x61;&#x6d;&#112;&#108;&#101;&#46;&#99;&#111;&#x6d;</a>“<br>  git config –global user.name “Your Name”</p><div class="note default no-icon flat"><p>注意双引号前有空格，邮箱随便填也可以，比如QQ邮箱啥的，</p><p>我用的这个邮箱查找路径是：点击Github主页右上角头像，点击settings，点击Emails，然后就能找到Github的这个邮箱了</p></div><p>那么我分别输入这两个命令按回车，执行两次代码，可见下方：<br>(如果你们没有报错，可以忽略这个)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;git config --global user.email &quot;Barry-Flynn@users.noreply.github.com&quot;</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;git config --global user.name &quot;Barry Flynn&quot;</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;</span><br></pre></td></tr></table></figure><p>再用命令 <code> git config -l </code> 查看所有的配置信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;git config -l</span><br><span class="line">diff.astextplain.textconv=astextplain</span><br><span class="line">filter.lfs.clean=git-lfs clean -- %f</span><br><span class="line">filter.lfs.smudge=git-lfs smudge -- %f</span><br><span class="line">filter.lfs.process=git-lfs filter-process</span><br><span class="line">filter.lfs.required=true</span><br><span class="line">http.sslbackend=openssl</span><br><span class="line">http.sslcainfo=E:/Git/mingw64/ssl/certs/ca-bundle.crt</span><br><span class="line">core.autocrlf=true</span><br><span class="line">core.fscache=true</span><br><span class="line">core.symlinks=false</span><br><span class="line">pull.rebase=false</span><br><span class="line">credential.helper=manager-core</span><br><span class="line">credential.https://dev.azure.com.usehttppath=true</span><br><span class="line">init.defaultbranch=master</span><br><span class="line">user.email=Barry-Flynn@users.noreply.github.com</span><br><span class="line">user.name=Barry Flynn</span><br><span class="line">core.repositoryformatversion=0</span><br><span class="line">core.filemode=false</span><br><span class="line">core.bare=false</span><br><span class="line">core.logallrefupdates=true</span><br><span class="line">core.symlinks=false</span><br><span class="line">core.ignorecase=true</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;</span><br></pre></td></tr></table></figure><p>可以看见下面这两条信息，代表信息以及完善上去了</p><p>user.email=<a href="mailto:&#66;&#97;&#x72;&#x72;&#x79;&#45;&#x46;&#108;&#121;&#110;&#110;&#64;&#x75;&#115;&#101;&#x72;&#115;&#x2e;&#x6e;&#111;&#x72;&#x65;&#112;&#108;&#121;&#46;&#103;&#x69;&#116;&#x68;&#x75;&#98;&#x2e;&#x63;&#x6f;&#x6d;">&#66;&#97;&#x72;&#x72;&#x79;&#45;&#x46;&#108;&#121;&#110;&#110;&#64;&#x75;&#115;&#101;&#x72;&#115;&#x2e;&#x6e;&#111;&#x72;&#x65;&#112;&#108;&#121;&#46;&#103;&#x69;&#116;&#x68;&#x75;&#98;&#x2e;&#x63;&#x6f;&#x6d;</a><br>user.name=Barry Flynn</p><p>那我就可以接着部署了！</p><p>终端里输入命令 <code> hexo deploy </code> 后（或者缩写为  hexo d  ）回车，这次，我的电脑却再次报错：<br>那一大坨的代码最底端为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access &#x27;https://github.com/Barry-Flynn/Barry-Flynn.github.io/&#x27;: OpenSSL SSL_read: Connection was reset, errno 10054</span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (E:\BarryFlynn\Github\Barry-Flynn.github.io\node_modules\hexo-util\lib\spawn.js:51:21)      at ChildProcess.emit (events.js:400:28)</span><br><span class="line">      at ChildProcess.cp.emit (E:\BarryFlynn\Github\Barry-Flynn.github.io\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;</span><br></pre></td></tr></table></figure><p>我电脑怎么又报错了？我很晕。问了群里大佬，说可能是网络问题。好吧，秒懂，咳咳咳……差点忘了GitHub服务器在国外啊！</p><p>解决方法是多 hexo d 几次或者那个啥…咳咳…<br>我第三次输入命令 <code> hexo deploy </code> ，回车</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;hexo deploy</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend dirs...</span><br><span class="line">warning: LF will be replaced by CRLF in 2021/08/25/hello-world/index.html.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">warning: LF will be replaced by CRLF in archives/2021/08/index.html.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">warning: LF will be replaced by CRLF in archives/2021/index.html.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">warning: LF will be replaced by CRLF in archives/index.html.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">warning: LF will be replaced by CRLF in css/fonts/fontawesome-webfont.svg.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">warning: LF will be replaced by CRLF in css/style.css.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">warning: LF will be replaced by CRLF in fancybox/jquery.fancybox.min.js.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">warning: LF will be replaced by CRLF in index.html.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">warning: LF will be replaced by CRLF in js/jquery-3.4.1.min.js.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">warning: LF will be replaced by CRLF in js/script.js.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">info: please complete authentication in your browser...</span><br><span class="line">Enumerating objects: 31, done.</span><br><span class="line">Counting objects: 100% (31/31), done.</span><br><span class="line">Delta compression using up to 4 threads</span><br><span class="line">Compressing objects: 100% (25/25), done.</span><br><span class="line">Writing objects: 100% (31/31), 882.21 KiB | 4.98 MiB/s, done.</span><br><span class="line">Total 31 (delta 3), reused 0 (delta 0), pack-reused 0</span><br><span class="line">remote: Resolving deltas: 100% (3/3), done.</span><br><span class="line">To https://github.com/Barry-Flynn/Barry-Flynn.github.io</span><br><span class="line"> + 4b62927...a9fc5f8 HEAD -&gt; main (forced update)</span><br><span class="line">Branch &#x27;master&#x27; set up to track remote branch &#x27;main&#x27; from &#x27;https://github.com/Barry-Flynn/Barry-Flynn.github.io&#x27;.</span><br><span class="line">[32mINFO [39m Deploy done: [35mgit[39m</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;</span><br></pre></td></tr></table></figure><p>成功了！Ohhhhhhhhhhh~</p><p>等待完成后，打开网址 <code> https://你的名字.github.io </code> ,稍等片刻不要着急，刷新一下就能看到你的线上网站了！</p><div class="note default no-icon flat"><ul><li>建议使用 https，因为 http 可能无法正常打开。HTTPS 是多了安全加密的 HTTP，Chrome 浏览器已经默认会显示 http 链接为不安全。为了安全，建议开启强制 https 跳转。<br>前往GitHub项目地址页面 -&gt; Settings -&gt; Options -&gt; GitHub Pages -&gt; Enforce HTTPS。（翻到下面）<br>此时，http 网址会自动重定向到 https</li></ul><p><em>——（云游君）</em></p><ul><li>但我根据这个去找了一些，我的GitHub Pages默认设置就是https，所以我不用管了。</li></ul></div><h2 id="十、备份-hexo-源代码分支"><a href="#十、备份-hexo-源代码分支" class="headerlink" title="十、备份 hexo 源代码分支"></a>十、备份 hexo 源代码分支</h2><p>我们当前只是将生成的静态文件部署到了云端，准确的说只是将生成文件 存进了 GitHub 的 main（或叫master）分支。<br>为了以防万一，我们应该将网站的源代码(也就是 hexo分支 里的)源文件也推送到 GitHub 仓库的 hexo分支 进行备份。</p><p>输入下方代码按回车，与远程 Git 仓库建立连接，只此一次即可，以后无需输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/你的用户名/你的名字.github.io</span><br></pre></td></tr></table></figure><p>但当时在这个时候我手抖了，这行代码后面那个仓库链接我还没输入完，输入了 <a href="https://github.com/Barry-Flynn">https://github.com/Barry-Flynn</a> 就按了回车。<br>查了一下，我需要运行输入 <code> git remote rm origin </code> 删除远程地址，然后再输入一遍正确的命令与远程 Git 仓库建立连接就行了：<br>（你们不用执行这一步哦，我是因为输错地址导致绑定错了）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;git remote rm origin</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;git remote add origin https://github.com/Barry-Flynn/Barry-Flynn.github.io</span><br></pre></td></tr></table></figure><p>好了，接下来大家准备提交，<br>第一次提交时，你可能需先运行下面命令设置一下默认提交分支,以后不用再输入这个了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --set-upstream origin hexo</span><br></pre></td></tr></table></figure><p>将网站的源代码(也就是 hexo分支 里的)源文件也推送到 GitHub 仓库的 hexo分支 进行备份的三行命令是<br>（括号内为注释，不用输入哈！）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">（添加到缓存区）</span><br><span class="line">git add -A</span><br><span class="line"> </span><br><span class="line">（这次做了什么更改，简单描述下即可）</span><br><span class="line">git commit -m &quot;你的更新描述&quot;</span><br><span class="line"> </span><br><span class="line">（推送至远程仓库）</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>最后那句命令如果push不上去的话多试几次，或者“科学的上网”，你懂得。</p><h2 id="十一、打开网址查看效果"><a href="#十一、打开网址查看效果" class="headerlink" title="十一、打开网址查看效果"></a>十一、打开网址查看效果</h2><p>如果与之前本地预览时一样，就代表成功了。<br><img src="https://i.loli.net/2021/09/16/5B9MpQ3FWmbUuKC.png" alt="hexo博客搭建成功页面.png"></p><br /><br /><br /><br /><br /><b><font size=6>恭喜你有自己博客啦！</font></b><br /><b><font size=2>下篇文章我会讲讲怎么创作和更换好看的博客主题</font></b><br /><b><font size=6>THE END.</font></b><hr><div class="note green no-icon flat"><p>嘿咻~终于写完了 <del>快累死我了</del> ，很开心！<br>看到这篇文章写了八千三百多字我也很惊讶，如果能对你有一些帮助，可以根据心情在文章末尾进行小小的打赏支持啊，一分一毛一块也是爱。[真诚.jpg]<br>另外，我可能后续还会更新相关文章，确定不收藏我的博客网站吗？[乖巧.jpg]<br>哈哈好啦，感谢能够读到这里的你，祝你学习进步、生活愉快，我们有缘再见（或许吧）！See you！</p></div><div class="note red no-icon flat"><p>本篇文章为 <a href="https://barry-flynn.github.io/">百里飞洋丨Barry Flynn</a> 版权所有，<br>转载与分享请务必携带原文链接：<a href="https://barry-flynn.github.io/2021/09/15/2021-1/">https://barry-flynn.github.io/2021/09/15/2021-1/</a><br>侵权必究！！！</p></div><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><b><font size=4>感谢下方作者提供技术参考:</font></b><br>1、《教你如何从零开始搭建一个属于自己的网站》<br>-作者云游君 - 地址<a href="https://www.yunyoujun.cn/share/how-to-build-your-site/">https://www.yunyoujun.cn/share/how-to-build-your-site/</a><br>2、《手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo》<br>-作者CodeSheep - 哔哩哔哩<a href="https://www.bilibili.com/video/BV1Yb411a7ty/">https://www.bilibili.com/video/BV1Yb411a7ty/</a><br>3、《基于 Github Action 的 CI/CD 流程》<br>-作者Feng Nie - 知乎<a href="https://zhuanlan.zhihu.com/p/250534172">https://zhuanlan.zhihu.com/p/250534172</a></p><hr><h1 id="我的陌生知识点积累"><a href="#我的陌生知识点积累" class="headerlink" title="我的陌生知识点积累"></a>我的陌生知识点积累</h1><ul><li><p>SEO（Search Engine Optimization）：汉译为搜索引擎优化。是一种方式：利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。目的是让其在行业内占据领先地位，获得品牌收益。很大程度上是网站经营者的一种商业行为，将自己或自己公司的排名前移。</p></li><li><p>Github Actions：是由Github创建推出的持续集成 (Con­tin­u­ous in­te­gra­tion，简称 CI) 服务。 它提供了配置非常不错的虚拟服务器环境，目的是使所有软件开发工作流程的自动化变得容易，可直接从GitHub构建，测试、打包和部署项目代码。CI（持续集成）由很多操作组成，比如代码合并、运行测试、登录远程服务器，发布到第三方服务等等。Github Actions 的最大优势就是它是与 GitHub 高度整合的，只需一个配置文件即可自动开启服务。甚至你不需要购买服务器，因为 GitHub Actions 自带云环境运行，包括私有仓库也可以享用，而且云环境性能也非常不错。持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。</p></li><li><p>持续集成指的是，频繁地（一天多次）将代码集成到主干。 它的好处主要有两个：<br>（1）快速发现错误。每完成一点更新，就集成到主干，可以快速发现错误，定位错误也比较容易。<br>（2）防止分支大幅偏离主干。如果不是经常集成，主干又在不断更新，会导致以后集成的难度变大，甚至难以集成。</p></li><li><p>持续交付（Continuous delivery）指的是，频繁地将软件的新版本，交付给质量团队或者用户，以供评审。如果评审通过，代码就进入生产阶段。 持续交付可以看作持续集成的下一步。它强调的是，不管怎么更新，软件是随时随地可以交付的。</p></li><li><p>持续部署（Continuous deployment，简称CD）是持续交付的下一步，指的是代码通过评审以后，自动部署到生产环境。持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo博客 </tag>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
            <tag> VScode </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客文章</title>
      <link href="/2021/09/02/2021-0/"/>
      <url>/2021/09/02/2021-0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hello，我是百里飞洋。前些日子用了很大功夫学会把Hexo博客部署到Github Pages上，今天开始写这第一篇博客了。</p><hr><h2 id="如何制作这样的博客"><a href="#如何制作这样的博客" class="headerlink" title="如何制作这样的博客"></a>如何制作这样的博客</h2><p>Emm…其实我的学习过程是很曲折的，因为这种学校老师不教的东西只能想方设法在网上找别人的文章或者教程视频一点点摸索和理解。截止此篇博客发出时，我已经将搭建方法以系列笔记文章的形式发布到了CSDN以及阿里云开发者社区。如果想跟着我的总结进行搭建的朋友们可以直接去搜索我的名字，在主页找就行了，基本上算非常详细的教程了。当然，是免费文章啦！后期也打算总结整理一下搭建过程中遇到的一些问题，整理出更详细的博客搭建教程，并发布在这个博客上。</p><hr><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>我是一个00后小白程序员，平时可能比较中二，在各个平台也基本上都可以找到我，比如：</p><ul><li><p>哔哩哔哩 :<a href="https://space.bilibili.com/349963315">点击这里跳转我的B站</a></p></li><li><p>新浪微博 :<a href="https://weibo.com/6327778914/profile?rightmod=1&wvr=6&mod=personinfo&is_all=1">点击这里跳转我的微博</a></p></li><li><p>微信公众号：<a href="https://mp.weixin.qq.com/s/m1Ls3804TJ_Ag0s6kg8WeA">百里飞洋</a>（但目前暂时还没有在这个上面发东西的欲望）</p></li></ul><p>有时候喜欢自说自话发表一些“贼幼稚”的鸡汤和牢骚啥的，上传着关于梦想、成长、编程、沙雕等等各种类型的图片和视频。如果在哪看见了我，可以跟我打个招呼啊！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/08/25/hello-world/"/>
      <url>/2021/08/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
