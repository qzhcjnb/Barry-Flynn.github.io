<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【数据库】第1章 绪论丨数据库系统概述</title>
      <link href="/2021/09/29/2021-6/"/>
      <url>/2021/09/29/2021-6/</url>
      
        <content type="html"><![CDATA[<p>本章介绍数据库系统的基本概念，包括数据管理技术的发展过程、数据库系统的组成部分等。从中可以学到为什么要使用数据库技术、数据库技术的重要性。本章是后面各章节的准备和基础。</p><h1 id="第1节-数据库系统概述"><a href="#第1节-数据库系统概述" class="headerlink" title="第1节 数据库系统概述"></a>第1节 数据库系统概述</h1><h2 id="数据库的4个基本概念"><a href="#数据库的4个基本概念" class="headerlink" title="数据库的4个基本概念"></a>数据库的4个基本概念</h2><ul><li>1、<strong>数据(data)</strong></li></ul><p>定义：描述事物的符号记录。描述事物的符号可以是数字，也可以是文字、图形、图像、音频、视频等，数据有多种表现形式，他们都可以经过数字化后存入计算机。<strong>数据的含义称为数据的语义，数据与其语义是不可分的。</strong></p><ul><li>2、<strong>数据库(DataBase, DB)</strong></li></ul><p>数据库是长期储存在计算机内、有组织的、可共享的大量数据的集合。数据库中的数据按一定的数据模型<strong>组织、描述和储存</strong>，具有<strong>较小的冗余度</strong> ，<strong>较高的数据独立性</strong>和<strong>易扩展性</strong>，并可为各种用户共享。概括地讲，数据库数据具有永久储存、有组织和可共享三个基本特点。</p><ul><li>3、<strong>数据库管理系统(DataBase Management System, DBMS)</strong></li></ul><p>数据库管理系统是位于用户与操作系统之间一层的数据管理软件。<strong>数据库管理系统</strong>和操作系统一样是<strong>计算机的基础软件</strong>。也是一个大型复杂的软件系统。它的主要功能包括以下几个方面：<br>（1）数据定义功能<br>（2）数据组织、存储和管理<br>（3）数据操纵功能<br>（4）数据库的事务管理和运行管理<br>（5）数据库的建立和维护功能<br>（6）其他功能</p><ul><li>4、<strong>数据库系统(DataBase System, DBS)</strong></li></ul><p>数据库系统是由数据库、数据库管理系统（及其应用开发工具）、应用程序和数据库管理员组成的存储、管理、处理和维护数据的系统。在一般不引起混淆的情况下，人们常常把数据库系统简称为数据库。</p><h2 id="数据管理技术的产生和发展"><a href="#数据管理技术的产生和发展" class="headerlink" title="数据管理技术的产生和发展"></a>数据管理技术的产生和发展</h2><ul><li><p>一、人工管理阶段<br>1）数据不保存<br>2）应用程序管理数据<br>3）数据不共享<br>4）程序不具有独立性<br><img src="https://i.loli.net/2021/09/29/mPk3Z28e4R5lyXD.png" alt="1-3 人工管理阶段应用程序与数据之间的一一对应关系.png"></p></li><li><p>二、文件系统阶段<br>1）数据可以长期保存<br>2）由文件系统管理数据</p><ul><li>数据共享性差，冗余度大</li><li>数据独立性差<br><img src="https://i.loli.net/2021/09/29/OdmPMA6zuDC3KJk.png" alt="1-4 文件系统阶段应用程序与数据之间的对应关系.png"></li></ul></li><li><p>三、数据库系统阶段<br>从文件系统到数据库系统标志着数据管理技术的飞跃。<br><img src="https://i.loli.net/2021/09/29/egnqXDRliHx2wIK.png" alt="1-6 数据库系统阶段应用程序与数据之间的对应关系.png"></p></li></ul><p>【总结】：在应用需求的推动下，在计算机硬件、软件发展的基础上，数据管理技术经历了<strong>人工管理</strong>、<strong>文件系统</strong>、<strong>数据库系统</strong>三个阶段。这三个阶段的特点及其比较如下表1-1所示：<br><img src="https://i.loli.net/2021/09/29/m9QzLhkvrK6geBf.png" alt="数据管理三个阶段的比较（表1-1）.png"></p><h2 id="数据库系统的特点"><a href="#数据库系统的特点" class="headerlink" title="数据库系统的特点"></a>数据库系统的特点</h2><p>与人工管理和文件系统相比，数据库系统的特点主要有以下几个方面。</p><ul><li><p><strong>数据结构化</strong><br>数据库系统实现整体数据的结构化，这是数据库的主要特征之一，也是数据库系统与文件系统的本质区别。所谓“整体”结构化是指数据库中的数据不再仅仅针对某一个应用，而是面向整个组织或企业：不仅数据内部是结构化的，而且整体是结构化的，数据之间是具有联系的。</p></li><li><p><strong>数据的共享性高、冗余度低且易扩充</strong><br>数据共享可以大大减少数据冗余，节约存储空间。数据共享还能够避免数据之间的不相容性与不一致性。<br>数据面向整个系统，且有结构，可以被多个应用共享使用，而且容易增加新的应用。这就使得数据库系统弹性大，易于扩充。</p></li><li><p><strong>数据独立性高</strong><br>数据独立性是借助数据库管理数据的一个显著优点，它已成为数据库领域中一个常用术语和重要概念，包括数据的<strong>物理独立性</strong>和<strong>逻辑独立性</strong>。</p><ul><li>1）物理独立性<br>指“用户的应用程序”与“数据库中数据的储存”是相互独立的。</li><li>2）逻辑独立性<br>指“用户的应用程序”与“数据库的逻辑结构”是相互独立的。</li></ul></li></ul><p>数据独立性是由数据库管理系统提供的二级映像来保证的。数据与程序的独立把数据的定义从程序中分离出去，加上储存数据的方法又由数据库管理系统负责提供，从而简化了应用程序的编制，大大减少了应用程序的维护和修改。</p><ul><li><strong>数据由数据库管理系统统一管理和控制</strong><br>它需提供以下几方面的数据控制功能：<ul><li>1）数据安全性保护<br>指保护数据以防止不合法使用造成的数据泄密和破坏。</li><li>2）数据完整性检查<br>指数据的正确性、有效性和相容性。</li><li>3）并发控制<br>对多用户的并发操作加以控制和协调。</li><li>4）数据库恢复<br>将数据库从错误状态恢复到某一已知的正确状态（亦称为完整状态或一致状态）的功能</li></ul></li></ul><hr><p>综上所述，<br><strong>【数据库】</strong>是长期储存在计算机内、有组织的、可共享的大量数据的集合。它可以供各种用户共享，具有最小冗余度和较高的数据独立性。<br><strong>【数据库管理系统】</strong>在数据库建立、运营和维护时对数据库进行统一控制，以保证数据的完整性和安全性，并在多用户同时使用数据库时进行并发控制，在发生故障后对数据库进行恢复。<br><strong>【数据库系统】</strong>的出现使信息系统从“<strong>以加工数据的程序为中心</strong>”转向“<strong>围绕共享的数据库为中心</strong>”的新阶段。这样既便于数据的集中处理，又能简化应用程序的研制和防护，提高了数据的利用率和相容性，提高了决策的可靠性。</p><hr><pre><code>》》下面是我最喜欢的自说自话环节《《</code></pre><blockquote><p><strong>【2021年09月29日】留言</strong><br>学了数据库的第一节，我的感悟是：<br>啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊脑子一团浆糊什么玩意啊满脑子都是数据数据数据库库库库库库…</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 《数据库系统原理》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数据库系统原理》目录汇总帖</title>
      <link href="/2021/09/29/2021-5/"/>
      <url>/2021/09/29/2021-5/</url>
      
        <content type="html"><![CDATA[<div class="note blue no-icon flat"><p><font size=4>本页作为我学习“数据库系统原理”这门课的博客笔记汇总帖，内容会不断完善，欢迎关注我今后的相关笔记文章。没错，说的就是想要发光的你呀~</font></p></div><p>主要学习路线采用高等教育出版社的<kbd>《数据库系统概论 第5版》</kbd>目录，学习过程中也会吸收网络其他视频和博客博主的知识，感谢所有老师、同学、前辈和引路人，在此脱帽致敬~</p><hr /><h1 id="第一篇-基础篇"><a href="#第一篇-基础篇" class="headerlink" title="第一篇 基础篇"></a>第一篇 基础篇</h1><h2 id="第1章-绪论"><a href="#第1章-绪论" class="headerlink" title="第1章 绪论"></a>第1章 绪论</h2><ul><li>数据库系统概述</li><li>数据模型</li><li>数据库系统的结构</li><li>数据库系统的组成</li><li>（小结与习题）</li></ul><h2 id="第2章-关系数据库"><a href="#第2章-关系数据库" class="headerlink" title="第2章 关系数据库"></a>第2章 关系数据库</h2><h2 id="第3章-关系数据库标准语言SQL"><a href="#第3章-关系数据库标准语言SQL" class="headerlink" title="第3章 关系数据库标准语言SQL"></a>第3章 关系数据库标准语言SQL</h2><h2 id="第4章-数据库安全性"><a href="#第4章-数据库安全性" class="headerlink" title="第4章 数据库安全性"></a>第4章 数据库安全性</h2><h2 id="第5章-数据库完整性"><a href="#第5章-数据库完整性" class="headerlink" title="第5章 数据库完整性"></a>第5章 数据库完整性</h2><hr /><h1 id="第二篇-设计与应用开发篇"><a href="#第二篇-设计与应用开发篇" class="headerlink" title="第二篇 设计与应用开发篇"></a>第二篇 设计与应用开发篇</h1><h2 id="第6章-关系数据理论"><a href="#第6章-关系数据理论" class="headerlink" title="第6章 关系数据理论"></a>第6章 关系数据理论</h2><h2 id="第7章-数据库设计"><a href="#第7章-数据库设计" class="headerlink" title="第7章 数据库设计"></a>第7章 数据库设计</h2><h2 id="第8章-数据库编程"><a href="#第8章-数据库编程" class="headerlink" title="第8章 数据库编程"></a>第8章 数据库编程</h2><hr /><h1 id="第三篇-系统篇"><a href="#第三篇-系统篇" class="headerlink" title="第三篇 系统篇"></a>第三篇 系统篇</h1><h2 id="第9章-关系查询处理和查询优化"><a href="#第9章-关系查询处理和查询优化" class="headerlink" title="第9章 关系查询处理和查询优化"></a>第9章 关系查询处理和查询优化</h2><h2 id="第10章-数据库恢复技术"><a href="#第10章-数据库恢复技术" class="headerlink" title="第10章 数据库恢复技术"></a>第10章 数据库恢复技术</h2><h2 id="第11章-并发控制"><a href="#第11章-并发控制" class="headerlink" title="第11章 并发控制"></a>第11章 并发控制</h2><h2 id="第12章-数据库管理系统"><a href="#第12章-数据库管理系统" class="headerlink" title="第12章 数据库管理系统*"></a>第12章 数据库管理系统*</h2><hr /><h1 id="第四篇-新技术篇"><a href="#第四篇-新技术篇" class="headerlink" title="第四篇 新技术篇"></a>第四篇 新技术篇</h1><h2 id="第13章-数据库技术发展概述"><a href="#第13章-数据库技术发展概述" class="headerlink" title="第13章 数据库技术发展概述"></a>第13章 数据库技术发展概述</h2><h2 id="第14章-大数据管理"><a href="#第14章-大数据管理" class="headerlink" title="第14章 大数据管理"></a>第14章 大数据管理</h2><h2 id="第15章-数据库设计"><a href="#第15章-数据库设计" class="headerlink" title="第15章 数据库设计"></a>第15章 数据库设计</h2><h2 id="第16章-数据仓库与联机分析处理技术"><a href="#第16章-数据仓库与联机分析处理技术" class="headerlink" title="第16章 数据仓库与联机分析处理技术"></a>第16章 数据仓库与联机分析处理技术</h2><hr /><p>THE END.</p>]]></content>
      
      
      <categories>
          
          <category> 《数据库系统原理》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【日常生活】大二学年规划清单</title>
      <link href="/2021/09/27/2021-4/"/>
      <url>/2021/09/27/2021-4/</url>
      
        <content type="html"><![CDATA[<div class="note green no-icon flat"><p><font size=4>不断完善中……</font></p></div><p>卧槽已经大二了竟然啊啊啊！！！<br>因为疫情，天天家里蹲，我怕不是上了个家里蹲大学吧…<br>不行，大一对自己太放纵了，大二我得开始认真放在学习上了。</p><h1 id="专业学习"><a href="#专业学习" class="headerlink" title="专业学习"></a>专业学习</h1><ul><li><p>C语言复习巩固</p></li><li><p>前端技术学习</p></li></ul><br /><h1 id="英语积累"><a href="#英语积累" class="headerlink" title="英语积累"></a>英语积累</h1><p>为了四六级，冲冲冲！！！</p><ul><li>每天一组 Word list，并按计划复习</li><li>每天跟读一遍课文培养语感</li></ul><br /><h1 id="体育健身"><a href="#体育健身" class="headerlink" title="体育健身"></a>体育健身</h1><h2 id="单杠引体向上"><a href="#单杠引体向上" class="headerlink" title="单杠引体向上"></a>单杠引体向上</h2><p>为了体测成绩，冲啊！！！</p><iframe src="//player.bilibili.com/player.html?aid=633173378&bvid=BV1mb4y1y7aA&cid=414148388&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>暂时按上方视频中方法锻炼：</p><p>每周两次<kbd><a href="https://www.bilibili.com/video/BV1mb4y1y7aA?share_source=copy_web">点击跳转B站播放</a></kbd></p><ul><li>肩胛骨激活（10-12次）3组（最高点停顿1-2秒）</li><li>自重划船（10-12次）4组（逐渐往下走一点）</li><li>离心引力（10-12次）4组（增加离心时长到3秒以上）</li><li>核心 3组（做标准的时长-60秒）</li></ul><h2 id="跑步-amp-体前屈-amp-跳远"><a href="#跑步-amp-体前屈-amp-跳远" class="headerlink" title="跑步 &amp; 体前屈 &amp; 跳远"></a>跑步 &amp; 体前屈 &amp; 跳远</h2><p>暂定每周两次晚上去操场：</p><ul><li>跑圈 x 3</li><li>站位体前屈 x 8个节拍</li><li>坐位体前屈 x 8个节拍</li><li>跳远 x 5个来回</li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【Linux安装】Win10安装Ubuntu双系统（含BIOS操作）</title>
      <link href="/2021/09/16/2021-3/"/>
      <url>/2021/09/16/2021-3/</url>
      
        <content type="html"><![CDATA[<h1 id="操作准备"><a href="#操作准备" class="headerlink" title="操作准备"></a>操作准备</h1><p>一个10多G以上大小的空U盘，一台Win10电脑（非Win10我不知是否可行）。</p><p>我的是联想ThinkPad笔记本，不同电脑操作起来可能与此文略有不同，</p><p>所以还需要准备一个善于思考能灵活变通的脑瓜儿~</p><h1 id="一、Ubuntu桌面系统镜像文件下载"><a href="#一、Ubuntu桌面系统镜像文件下载" class="headerlink" title="一、Ubuntu桌面系统镜像文件下载"></a>一、Ubuntu桌面系统镜像文件下载</h1><p>地址：<a href="https://cn.ubuntu.com/download/desktop"> 下载Ubuntu桌面系统 | Ubuntu </a></p><p>我选择下载的是长期支持(LTS)版本</p><div class="note default no-icon flat"><p>这篇文章下载的是Ubuntu 20.04.3 LTS，有2.9G那么大，下载时请耐心等待。</p></div><h1 id="二、U盘引导盘制作工具-Rufus-下载"><a href="#二、U盘引导盘制作工具-Rufus-下载" class="headerlink" title="二、U盘引导盘制作工具(Rufus)下载"></a>二、U盘引导盘制作工具(Rufus)下载</h1><p>地址：<a href="https://rufus.ie/zh/"> Rufus - 轻松创建USB启动盘 </a></p><p>我选择的是2021.08.03日更新的最新的rufus-3.15版本</p><div class="note default no-icon flat"><p>类似工具其实有很多，你可以用自己熟悉的。</p><p>Rufus 是一个开源免费的快速制作 U 盘系统启动盘和格式化 USB 的实用小工具，它可以快速把 ISO 格式的系统镜像文件快速制作成可引导的 USB 启动安装盘，支持 Windows 或 Linux 启动。rufus是一款实用的自启动u盘制作工具。用户可以通过该软件快速制作linux系统或者win启动u盘，不过在这之前你需要把重要资料备份到电脑中，因为格式化后什么都找不回来了。如果身边没有系统安装盘或者刻录光盘，那么使用rufus就可以帮你安装系统了。</p></div><h1 id="三、制作系统盘"><a href="#三、制作系统盘" class="headerlink" title="三、制作系统盘"></a>三、制作系统盘</h1><p>双击运行 rufus-3.15.exe 程序，</p><p>插入你的U盘，</p><p>点击“引导类型选项”后面的选择按钮，</p><p>选择刚刚下载的ubuntu-20.04.3-desktop-amd64.iso</p><p><img src="https://i.loli.net/2021/09/16/2yN1L6zgoCc5MEF.png" alt="rufus界面.png"></p><p>其他选项默认就可以，点击开始。</p><p><img src="https://i.loli.net/2021/09/16/MvHA4wf1k82FGXm.png" alt="Rufus弹出框.png"></p><p>选择以 ISO镜像 模式写入，点击OK。</p><p>接下来它就会把原来的东西格式化，然后把Ubuntu烧录进去。</p><p>（注意：U盘不要留东西，资料提前备份好！格式化后就全没了！！！）</p><p><img src="https://i.loli.net/2021/09/16/SFqnait5Nueb48j.png" alt="Rufus烧录完后的U盘.png"></p><p>上图就是烧录完后的U盘内文件了，</p><p>现在拔出U盘。</p><h1 id="四、制作分区"><a href="#四、制作分区" class="headerlink" title="四、制作分区"></a>四、制作分区</h1><p>按下图打开计算机管理（或者右键点击桌面“此电脑”，然后点击“管理”就行了）</p><p><img src="https://i.loli.net/2021/09/16/xtTvZY1mygUR9w3.png" alt="管理分区.png"></p><p>然后点击左侧磁盘管理，选择一个你想腾出来的盘（不会影响其中文件），</p><p>我选的是E盘，右键，选择压缩卷，</p><p><img src="https://i.loli.net/2021/09/16/ZF2KxUp35RIgLyl.png" alt="磁盘管理.png"></p><p>接着输入你想压缩的空间大小，</p><p>由于我笔记本盘容量小，于是就只给了50G，也就是51200MB，</p><p>你们可根据实际情况填写，当然是越大越爽，但如果不常用的话，倒也不用给太多。</p><p><img src="https://i.loli.net/2021/09/16/kvXctr4j3xHUygd.png" alt="输入压缩空间大小.png"></p><p>点击压缩，放心，这不会影响磁盘原有文件的。</p><p><img src="https://i.loli.net/2021/09/16/wxUCS7IDYbNHh4n.png" alt="磁盘压缩后.png"></p><h1 id="五、进入BIOS界面进行设置"><a href="#五、进入BIOS界面进行设置" class="headerlink" title="五、进入BIOS界面进行设置"></a>五、进入BIOS界面进行设置</h1><h2 id="1、进入BIOS"><a href="#1、进入BIOS" class="headerlink" title="1、进入BIOS"></a>1、进入BIOS</h2><div class="note default no-icon flat"><p>BIOS：(基本输入输出系统)，用于电脑开机运行系统各组件时的自我检测，以及加载系统启动引导程序，BIOS设置决定系统以什么方式启动，比如硬盘启动、U盘启动等，另外BIOS控制了电脑所有的低级功能，很多系统设置需进入BIOS界面才能更改。进入BIOS的方法因电脑品牌类型不同而有所差异。</p></div><h3 id="（方法1）：通过热键进入BIOS"><a href="#（方法1）：通过热键进入BIOS" class="headerlink" title="（方法1）：通过热键进入BIOS"></a>（方法1）：通过热键进入BIOS</h3><p>不同品牌的电脑进入所使用的按键不同，甚至同为联想笔记本ThinkPad但不同的系列，进入的方法都不同。你可以去网上搜一下你的电脑进入的按键是什么，比如很多电脑的方法是在启动和重新启动时按F2。</p><h3 id="（方法2）：通过UEFI固件设置进入BIOS"><a href="#（方法2）：通过UEFI固件设置进入BIOS" class="headerlink" title="（方法2）：通过UEFI固件设置进入BIOS"></a>（方法2）：通过UEFI固件设置进入BIOS</h3><p>按住shift键别撒手，点击重启电脑，电脑会进行高级启动。</p><p>选择右边“疑难解答”。</p><p><img src="https://i.loli.net/2021/09/16/63dvyJtGhEY1LuN.png" alt="选择疑难解答.png"></p><p>然后选择“高级选项”，</p><p><img src="https://i.loli.net/2021/09/16/8H5Q2jMyLahi4qY.png" alt="选择高级选项.png"></p><p>选择“ UEFI固件设置”，</p><p><img src="https://i.loli.net/2021/09/16/9ZSk1fW4gcvLy6q.png" alt="选择UEFI固件设置.png"></p><p>现在将刚刚那个系统U盘插入电脑，</p><p>点击“重启”，通过UEFI固件设置进入BIOS。</p><p><img src="https://i.loli.net/2021/09/16/UqjR6bwXEaCQZuI.png" alt="选择重启以更改UEFI固件设置.png"></p><h2 id="2、对BIOS进行U盘启动设置"><a href="#2、对BIOS进行U盘启动设置" class="headerlink" title="2、对BIOS进行U盘启动设置"></a>2、对BIOS进行U盘启动设置</h2><p>（以下内容，不同电脑操作键可能有差别，不同的主板BIOS的界面也是不同的）</p><h3 id="（1）设置Secure-Boot"><a href="#（1）设置Secure-Boot" class="headerlink" title="（1）设置Secure Boot"></a>（1）设置Secure Boot</h3><p>通过方向键，往右选择Security，再往下选择Security Boot，回车。</p><p><img src="https://i.loli.net/2021/09/17/qbZ8FyNjBWfQPxa.png" alt="选择Security.png"></p><p>选中SecureBoot并回车，上下键更改为Disabled，回车选中。</p><p>这里的作用是禁用UEFI安全启动（Disable Secure Boot for ASUS Motherboard），</p><p>因为如果主板设置了uefi安全启动，会与ubuntu安装的的第三方驱动发生冲突。</p><p><img src="https://i.loli.net/2021/09/17/R6lr4bmBzTwYCoq.png" alt="更改SecureBoot值.png"></p><p>按Esc退出Security。</p><h3 id="（2）将USB-HDD置顶"><a href="#（2）将USB-HDD置顶" class="headerlink" title="（2）将USB HDD置顶"></a>（2）将USB HDD置顶</h3><p>通过方向键，往右选择Starup，再往下选择Boot，回车。</p><p><img src="https://i.loli.net/2021/09/17/F687eEnKyoS4Db5.png" alt="选择Starup.png"></p><p>通过上下键选到USB HDD，</p><p>它后面的单词是我这次使用的U盘的牌子：金士顿（Kingston）</p><p><img src="https://i.loli.net/2021/09/17/rbDkoWGfv6ijN5K.png" alt="选择Ubuntu系统.png"></p><p>通过按 “+”（加号键）把Ubuntu系统顺序设为首位，（其他笔记本请参考你们的按键）</p><p>这里的作用是更改Ubuntu与Windows的启动顺序。</p><p><img src="https://i.loli.net/2021/09/17/zS13kqeAhCPXVdf.png" alt="把Ubuntu顺序置顶.png"></p><p>按 “F10” 保存退出。</p><h1 id="六、安装Ubuntu"><a href="#六、安装Ubuntu" class="headerlink" title="六、安装Ubuntu"></a>六、安装Ubuntu</h1><p>上一个操作完成后出现四行黑屏代码，</p><p>通过上下键选择第二行的Install Ubuntu并回车，进行安装Ubuntu。</p><p><img src="https://i.loli.net/2021/09/17/E9dw6Th4yrYAJgG.png" alt="U盘安装界面.png"></p><p>启动中，静静等待。</p><p><img src="https://i.loli.net/2021/09/17/wdQVUAak7cN26bP.png" alt="Ubuntu系统启动中.png"></p><h2 id="1、欢迎"><a href="#1、欢迎" class="headerlink" title="1、欢迎"></a>1、欢迎</h2><p>左边语言选择中文简体，然后选择右边安装Ubuntu，</p><p><img src="https://i.loli.net/2021/09/17/DZ9z4NxmIoKsBGu.png" alt="安装Ubuntu.png"></p><h2 id="2、键盘布局"><a href="#2、键盘布局" class="headerlink" title="2、键盘布局"></a>2、键盘布局</h2><p>默认中文就行，继续，</p><p><img src="https://i.loli.net/2021/09/17/89UcG6fWsBFA1oT.png" alt="安装Ubuntu-2-键盘布局.png"></p><h2 id="3、无线网络"><a href="#3、无线网络" class="headerlink" title="3、无线网络"></a>3、无线网络</h2><p>可以先跳过不连接，你选择现在连上也当然可以，下面继续。</p><h2 id="4、更新和其他软件"><a href="#4、更新和其他软件" class="headerlink" title="4、更新和其他软件"></a>4、更新和其他软件</h2><p>我选择最小安装（这个选项也是速度最快的），不安装多余应用，以后需要用到了再说。</p><p>当然你可以选择正常安装，会给你安装一些办公软件、游戏和媒体播放器啥的，不过时间会很长。</p><p><img src="https://i.loli.net/2021/09/17/25A8p4Vh71lXgoD.png" alt="安装Ubuntu-4-更新和其他软件.png"></p><h2 id="5、安装类型"><a href="#5、安装类型" class="headerlink" title="5、安装类型"></a>5、安装类型</h2><p>第一次安装的朋友在这一步请注意！！！一定要选“其他安装”！！！另一个选项会清除整个磁盘的所有文件，也就是你的Windows系统会被刷机！！！手别抖！！！一定要选“其他安装”！！！</p><p><img src="https://i.loli.net/2021/09/17/zTCJ94eYHZNAgpM.png" alt="安装Ubuntu-5-安装类型.png"></p><div class="note default no-icon flat"><p>接下来我们对Ubuntu进行分区，在分区之前先介绍一下Linux的文件系统：</p><p><b>/boot</b>:存放linux内核，用来引导系统的。如果是Legacy启动就要设置引导，UEFI就不用设置这个（UEFI要设置EFI引导区）</p><p><b>swap</b>：交换区，用作虚拟内存，这个一般和自己的物理内存一般大</p><p><b>/</b>：根目录，主要用来存放Linux系统文件</p><p><b>/usr</b>:存放用户程序，一般在/usr/bin中存放发行版提供的程序，用户自行安装的程序默认安装到/usr/local/bin中</p><p><b>/home</b>:存放用户文件</p></div><p>滚动鼠标滑轮，找到与你刚刚在Windows系统里分配给Ubuntu的相近大小的那个“空闲”磁盘空间（freespace），就像我刚刚给Linux分了50G大小，我就要选择下图那个50多个G（53688MB）的那个空闲空间。</p><p><img src="https://i.loli.net/2021/09/17/eWngyC5Zk7p12YR.png" alt="安装Ubuntu-5-安装类型2.png"></p><h3 id="（1）分配swap交换区"><a href="#（1）分配swap交换区" class="headerlink" title="（1）分配swap交换区"></a>（1）分配swap交换区</h3><p>选中那个空闲空间，点击左下角加号“+”，会弹出一个弹窗，</p><p>听朋友说，如果运行内存足够，其实swap交换区不设置也行，</p><p>我的电脑运行内存有8G的物理内存，应该够用，所以这个swap虚拟内存我就不设置很大了</p><p><img src="https://i.loli.net/2021/09/17/1XVhQPyb6ogli5D.png" alt="电脑物理内存RAM.png"></p><p>大小我给了1G，即“<b>1024MB</b>”，</p><p>分区选择第二个“<b>逻辑分区</b>”，位置选择“<b>空间起始位置</b>”，</p><p>用于“<b>交换空间</b>”，挂载点填“ / ”，也就是用来存放Linux系统文件的根目录，</p><p><img src="https://i.loli.net/2021/09/17/qdXYcKBo4h8fARV.png" alt="分配swap分区.png"></p><p>然后点击OK。</p><h3 id="（2）分配EFI引导区"><a href="#（2）分配EFI引导区" class="headerlink" title="（2）分配EFI引导区"></a>（2）分配EFI引导区</h3><p>选中那个空闲空间，点击左下角加号“+”，</p><p>大小我给了“<b>100MB</b>”，</p><p>分区选择“<b>逻辑分区</b>”，位置选择“<b>空间起始位置</b>”，</p><p>用于“<b>EFI系统分区</b>”模式，</p><p><img src="https://i.loli.net/2021/09/17/7lJksmynocCp6OA.png" alt="分配EFI引导.png"></p><p>然后点击OK。</p><h3 id="（3）分配-分区（根目录）"><a href="#（3）分配-分区（根目录）" class="headerlink" title="（3）分配 / 分区（根目录）"></a>（3）分配 / 分区（根目录）</h3><p>选中那个空闲空间，点击左下角加号“+”，</p><p>相当于Windows的C盘，</p><p>大小我给了10 G，即“<b>10240MB</b>”，</p><p>分区选择第一个“<b>主分区</b>”，位置选择“<b>空间起始位置</b>”，</p><p>用于“<b>Ext4日志文件</b>”，挂载点填“<b>/</b> ”，</p><p><img src="https://i.loli.net/2021/09/17/HoxtLwAl6JIyVZF.png" alt="分配根目录.png"></p><p>然后点击OK。</p><h3 id="（4）分配home分区"><a href="#（4）分配home分区" class="headerlink" title="（4）分配home分区"></a>（4）分配home分区</h3><p>选中那个空闲空间，点击左下角加号“+”，</p><p>相当于Windows的C盘下的“我的文档”，</p><p>大小：如果你不分配其他分区的话，那个空闲空间的剩余大小全给它就行，</p><p>分区选择“逻辑分区”，位置选择“空间起始位置”，</p><p>用于“Ext4日志文件”，挂载点填“ /home ”，</p><p><img src="https://i.loli.net/2021/09/17/pKl2DcEh5NU8Fxi.png" alt="分配home分区.png"></p><p> 然后点击OK。</p><h3 id="（5）分配一些其他区"><a href="#（5）分配一些其他区" class="headerlink" title="（5）分配一些其他区"></a>（5）分配一些其他区</h3><p>我只是初学，暂时用不到那么多的分区，所以把50多G空间都分给了上面那几个分区。想分其他分区的朋友们，感兴趣可以自行了解。</p><h3 id="（6）选择“安装启动引导器的设备”"><a href="#（6）选择“安装启动引导器的设备”" class="headerlink" title="（6）选择“安装启动引导器的设备”"></a>（6）选择“安装启动引导器的设备”</h3><p>下面那个“安装启动引导器的设备”选择我们刚刚分配的EFI引导区，</p><p>注意不要选成Windows的efi了！</p><p><img src="https://i.loli.net/2021/09/17/lJ7sgCqBkcRHmwD.png" alt="Windows的EFI.png"></p><p>而是要选刚刚咱们分配给Ubuntu的efi，比如我刚刚分配的100M的那个，</p><p><img src="https://i.loli.net/2021/09/17/XTROxJWrIV2Zitk.png" alt="Ubuntu的EFI.png"></p><h2 id="6、立即安装"><a href="#6、立即安装" class="headerlink" title="6、立即安装"></a>6、立即安装</h2><p>选择现在安装，</p><p>确认一下信息，无误后继续写入磁盘，</p><p><img src="https://i.loli.net/2021/09/17/Ld8GxMP6bqAW1pI.png" alt="安装Ubuntu-5-写入磁盘.png"></p><p>时区选默认的上海就可以，点击继续，</p><p><img src="https://i.loli.net/2021/09/17/9mndRu2AZiJeDow.png" alt="安装Ubuntu-6-时区.png"></p><p>下面的三个名字全输一样的就行，也别太长，</p><p>密码建议000000，或者123456等容易记忆又方便的，因为以后会经常输入。</p><p>选择“登录时需要密码”，点击继续。</p><p><img src="https://i.loli.net/2021/09/17/h2OetW1bGvC5EBy.png" alt="安装Ubuntu-7-名称与密码.png"></p><p>下面开始安装，漫长的等待中你可以看看轮播图了解一下Ubuntu。</p><p><img src="https://i.loli.net/2021/09/17/6nmAjvL4c1xY8zD.png" alt="安装Ubuntu-安装中.png"></p><p>然后Ubuntu安装成功，现在重启。</p><p><img src="https://i.loli.net/2021/09/17/M52mDN3kLBOEwjd.png" alt="Ubuntu安装成功-等待重启.png"></p><p>这个页面提示我们拔出U盘，并按下回车。</p><p><img src="https://i.loli.net/2021/09/17/lVNZsPtizORXuSr.png" alt="Ubuntu提醒拔出U盘并回车.png"></p><p>下面进入了Ubuntu的grub引导界面，以后电脑每次开机时都会出现，</p><p>可以通过上下键选择进入Ubuntu系统还是Windows系统，如下图：</p><p>选择第一行按回车就是进入Ubuntu，</p><p>选择第三行按回车就是进入Windows，</p><p>第二行和第四行不用管，</p><p>长时间不选择，默认进入第一个。</p><p><img src="https://i.loli.net/2021/09/17/i4xwUGeLNk75tOY.png" alt="双系统的进入选择界面.png"></p><p>这样我们就能使用Ubuntu系统了。</p><p>本文仅供参考，我是初学Linux，电脑磁盘容量不是很多，所以只分了50 G，<br>我所观看的教程中大多都是分配上百G，请根据你的情况进行合理调整分区大小。<br>若有疏漏之处，欢迎评论或联系我指出。</p><hr><h1 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h1><p>十分感谢网上朋友们的无私分享，包括但不限于：</p><p><a href="https://www.bilibili.com/video/BV11k4y1k7Li">【ubuntu20.04】10分钟win10安装ubuntu20.04双系统（无需Bios设置）_哔哩哔哩_bilibili</a></p><p><a href="https://blog.csdn.net/s717597589/article/details/79117112?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163128527816780255211054%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=163128527816780255211054&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-2-79117112.pc_v2_rank_blog_default&utm_term=Win10%E5%AE%89%E8%A3%85Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%90%ABBIOS%E6%93%8D%E4%BD%9C%EF%BC%89&spm=1018.2226.3001.4450">win10下安装Ubuntu16.04双系统_蔚然成风shang的博客-CSDN博客_win10安装ubuntu</a></p><p><a href="https://www.bilibili.com/video/BV1F44y1m7ZL/?spm_id_from=333.788.b_7265636f5f6c697374.2">Win10与Ubuntu双系统安装（绝对新手向）_哔哩哔哩_bilibili</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo博客】如何开始创作与更换好看的主题样式</title>
      <link href="/2021/09/16/2021-2/"/>
      <url>/2021/09/16/2021-2/</url>
      
        <content type="html"><![CDATA[<p>我先讲如何发布新的文章帖</p><h1 id="创作文章"><a href="#创作文章" class="headerlink" title="创作文章"></a>创作文章</h1><p>在上一篇文章中提到，初始化hexo博客后我们获得了它自动为我们生成的博客页面，同时还给我们生成了一个标题为“Hello World”的帖子。</p><p><img src="https://i.loli.net/2021/09/16/5B9MpQ3FWmbUuKC.png" alt="hexo博客搭建成功页面.png"></p><p>那么我们以后如何写新帖子发布到我们的博客网站呢？</p><p>打开“命令提示符窗口”进行操作，即之前用到的 cmd 终端窗口，</p><p>通过 cd 命令进入你电脑存放博客的文件夹，</p><p>（不知道怎么进入的朋友请拉到本文底部查看上篇文章）</p><h2 id="一、创建新帖子"><a href="#一、创建新帖子" class="headerlink" title="一、创建新帖子"></a>一、创建新帖子</h2><p>输入以下命令，并回车：</p><p>双引号内文字即为你要新建的文章帖子的标题，也会作为该文章的链接地址，<br>注意是英文输入法下的双引号！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;我的第一篇博客文章&quot;</span></span><br></pre></td></tr></table></figure><p> （或缩写成：hexo n “我的第一篇博客文章”）</p><p>回车后不一会儿，它提示我 <code> Barry-Flynn.github.io\source_posts\我的第一篇博客文章.md </code> 文件已经建好了。你会发现该文件后缀名是“.md”，没错，Hexo 默认我们用 Markdown 格式书写文章。</p><div class="note blue no-icon flat"><p>其实，Hexo 支持以任何格式书写文章，只要安装了相应的渲染插件。</p><p>例如，Hexo 默认安装了 hexo-renderer-marked 和 hexo-renderer-ejs，因此你不仅可以用 Markdown 写作，你还可以用 EJS 写作。如果你安装了 hexo-renderer-pug，你甚至可以用 Pug 模板语言书写文章。</p><p>只需要将文章的扩展名从 md 改成 ejs，Hexo 就会使用 hexo-renderer-ejs 渲染这个文件，其他格式同理。</p></div><p>现在，我之前让大家下载的VSCode编辑器这时候就派上用场了，当然，如果你对Markdown非常熟悉也有自己用的顺手的编辑器的话，当然可以根据你自己的习惯使用别的编辑器进行写作，但本文章仅使用VSCode进行演示。</p><h2 id="二、开始写作"><a href="#二、开始写作" class="headerlink" title="二、开始写作"></a>二、开始写作</h2><p>双击打开VSCode，</p><p>点击左上角“文件”，点击“选择文件”，</p><p>找到刚刚新建的“ <code> 我的第一篇博客文章.md </code> ” 并打开，</p><p>现在可以开始你的创作之旅了。</p><div class="note blue no-icon flat"><p>如果不会用Markdown语法书写文章的话可以在其他地方学习一下，</p><p>或进入官网进行学习：<a href="markdown-zh.readthedocs.io"> Markdown 中文文档 </a></p></div><p>写完后 <code> Ctrl+S </code> 保存你的文章（或点击vscode左上角“文件”，然后“保存”），关闭vscode。</p><p>插个话，我写文章的时候习惯用 <code> hexo s </code> 命令打开本地服务器预览，一边写文章，一边刷新 <a href="http://localhost:4000/">http://localhost:4000/</a> ，以此来查看我博客的实时效果。</p><p>当然，你也可以打开 vscode 右上角“侧边预览”小按钮实时查看效果：<br><img src="https://i.loli.net/2021/09/16/89zcNmhr7DbVKwJ.png" alt="我的第一篇博客vscode截图.png"></p><p>甚至你还可以给 vscode 安装小插件去得到一些更加丰富的功能和体验。</p><h2 id="三、提交到GitHub"><a href="#三、提交到GitHub" class="headerlink" title="三、提交到GitHub"></a>三、提交到GitHub</h2><p>我们需要对两个分支分别提交文件：</p><h3 id="1、main分支进行博客更新"><a href="#1、main分支进行博客更新" class="headerlink" title="1、main分支进行博客更新"></a>1、main分支进行博客更新</h3><p>下面这三句命令将是你以后每次写完文章后发布到main分支（存放的是你 hexo g 后的生成文件，即静态展示网页）时所需要输入的：<br>三行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean （清理缓存，可选用）</span><br><span class="line"> </span><br><span class="line">hexo g （生成资源文件）</span><br><span class="line"> </span><br><span class="line">hexo d （部署到服务器）</span><br></pre></td></tr></table></figure><p>其实这时候如果你刷新你的网站看一下，文章已经更新发布了，但我们还最好备份一下hexo分支代码到GitHub上，万一某一天咱们本地的代码出问题了，就可以直接从GitHub上克隆备份。</p><h3 id="2、hexo分支进行源码备份"><a href="#2、hexo分支进行源码备份" class="headerlink" title="2、hexo分支进行源码备份"></a>2、hexo分支进行源码备份</h3><p>如果嫌每次写完一篇文章都要备份 hexo 源文件分支很麻烦的话，你可以只对上面 main分支进行博客更新 ，这个hexo分支你自己想着去定期备份就行了（比如发布两三篇文章备份一次 / 每隔两天备份一次），或者你可以去了解一下如何实现自动部署。</p><p>我反正不觉得这个麻烦，也就三行命令。</p><p>下面这三句命令将是你以后每次想备份hexo分支（博客源代码文件）时所需要输入的：<br>三行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">（添加到缓存区）</span><br><span class="line">git add -A</span><br><span class="line"> </span><br><span class="line">（这次做了什么更改，简单描述下即可）</span><br><span class="line">git commit -m &quot;你的更新描述&quot;</span><br><span class="line"> </span><br><span class="line">（推送至远程仓库）</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>国内网络有时候很卡会导致最后一步 push 不上去而报错，该如何做你懂的吧？<br>多 push 几次，或者那个啥…咳咳…</p><hr><p>下面讲如何更换博客主题</p><h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><p>这是我们未更换前，默认主题的博客效果：</p><p><img src="https://i.loli.net/2021/09/16/5B9MpQ3FWmbUuKC.png" alt="hexo博客搭建成功页面.png"></p><h2 id="1、挑选Hexo主题"><a href="#1、挑选Hexo主题" class="headerlink" title="1、挑选Hexo主题"></a>1、挑选Hexo主题</h2><p>去哪挑选心仪的主题呢？</p><p>去官方文档给的链接地址：<a href="https://hexo.io/themes/"> Themes | Hexo </a> ，那里有好几百款其他大佬们制作好的主题。</p><p>此外还可以去某乎上或其他地方看看别人分享的好看的主题样式，如果实在没有合自己口味的，先选个差不多的凑合用吧，反正之后可以对主题进行个性化配置或者根据喜好进行魔改。</p><p>我这次演示的主题叫“ Butterfly ”，<br>作者演示的博客示例效果请见下方链接：<br> <a href="https://butterfly.js.org/"> Butterfly - A Simple and Card UI Design theme for Hexo </a><br>网友朋友们使用 Butterfly 主题后的博客：<br> <a href="https://butterfly.js.org/link/"> 可以看到很多朋友进行了魔改 </a></p><p>该主题的GitHub地址是：<br>🦋 A Hexo Theme: Butterfly<br><a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a></p><h2 id="2、安装Hexo主题"><a href="#2、安装Hexo主题" class="headerlink" title="2、安装Hexo主题"></a>2、安装Hexo主题</h2><p>方法很简单，就一行克隆命令。</p><p>老规矩，打开cmd，通过cd命令进入存放你博客源文件的文件夹进行操作，<br>（后面地址替换成你所选择的主题的GitHub项目地址）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>想和我安装一个主题的朋友们注意一下，<br>Butterfly 主题的作者在 GitHub 建了两个分支，<br>为了追求稳定，这行命令安装的是其稳定分支 （master分支），<br>当然你也可以选择去安装作者的开发测试版（dev分支），但可能存在 bug。</p><p>回车后非常快，就在本地克隆下载好了，这时可以发现在themes（主题）文件夹下出现了butterfly的文件夹。</p><h2 id="3、应用Hexo主题"><a href="#3、应用Hexo主题" class="headerlink" title="3、应用Hexo主题"></a>3、应用Hexo主题</h2><h3 id="1-更换主题"><a href="#1-更换主题" class="headerlink" title="1.更换主题"></a>1.更换主题</h3><p>用 VScode 打开 Hexo 根目录（博客源文件的文件夹）下的<code> _config.yml </code>，</p><p>拉到代码最下面，把主题（默认是<code> theme: landscape </code>）修改 为butterfly，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><p>Ctrl+S保存，最小化VScode。</p><h3 id="2-安装插件"><a href="#2-安装插件" class="headerlink" title="2.安装插件"></a>2.安装插件</h3><p>注意我这里安装插件的原因是该butterfly主题的HTML文件和CSS样式文件是用 pug 以及 stylus 写出来的，不安装没法正常显示。你们安装与否请参考你们所选主题的安装文档。</p><p>选择了 butterfly 主题，如果你没有 pug 以及 stylus 的渲染器，请下载安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>在国内下载过程可能会很慢，可以咳咳咳一下那个墙….</p><h3 id="3-查看效果"><a href="#3-查看效果" class="headerlink" title="3.查看效果"></a>3.查看效果</h3><p>我们先清理一下，<br><code>hexo clean</code></p><p>再生成一下，<br><code>hexo g</code></p><p>启动一下本地的服务器先瞅瞅，<br><code>hexo s</code></p><p> 浏览器地址栏输入：<code> <a href="http://localhost:4000/">http://localhost:4000</a> </code><br><img src="https://i.loli.net/2021/09/16/NkcuL2GjeaVvoFy.png" alt="更换butterfly主题后的博客.png"></p><p>OK，更换成功！之后进行一些简单的配置更改就行了。Ctrl+C关闭本地预览。</p><hr><p>接下来是博客主题的个性化配置<br>这个因主题不同而不同，<br>请参考你所选择的主题的作者给的文档教程<br>这里我列出我现在目前使用的Butterfly主题的作者撰写的文档教程</p><h1 id="个性化配置"><a href="#个性化配置" class="headerlink" title="个性化配置"></a>个性化配置</h1><p>Butterfly 主题的作者文档教程：</p><p><a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a><br><a href="https://butterfly.js.org/posts/dc584b87/">Butterfly 安装文档(二) 主题页面</a><br><a href="https://butterfly.js.org/posts/4aa8abbe/">Butterfly 安装文档(三) 主题配置-1</a><br><a href="https://butterfly.js.org/posts/ceeb73f/">Butterfly 安装文档(四) 主题配置-2</a><br><a href="https://butterfly.js.org/posts/98d20436/">Butterfly 安装文档(五) 主题问答</a><br><a href="https://butterfly.js.org/posts/4073eda/">Butterfly 安装文档(六) 进阶教程</a><br><a href="https://butterfly.js.org/posts/198a4240/">Butterfly 安装文档(七) 更新日誌</a><br>以及一些其他功能的实现，都请前往Butterfly主题作者的网站进行查找。</p><hr><h1 id="我的陌生知识点积累"><a href="#我的陌生知识点积累" class="headerlink" title="我的陌生知识点积累"></a>我的陌生知识点积累</h1><ul><li><p>pug ：一个HTML模板引擎<a href="https://pugjs.org/zh-cn/api/getting-started.html"> Pug中文文档 - 入门指南 </a>，效果示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--pug--&gt;</span><br><span class="line">&lt;template lang=&quot;pug&quot;&gt;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.box</span></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.box1</span></span><br><span class="line">            <span class="selector-tag">div</span><span class="selector-class">.box2</span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--解析成<span class="selector-tag">HTML</span>后--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;box&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;box1&quot;&gt;</span><br><span class="line">            &lt;<span class="selector-tag">div</span> class=&quot;box2&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>stylus ：Stylus 是一款 CSS 的预处理器，也就是我们常说的 CSS 框架，语法示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span></span><br><span class="line">  <span class="attribute">font</span>: <span class="number">12px</span> Helvetica, Arial, sans-serif;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.button</span></span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  -moz-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo博客 </tag>
            
            <tag> GitHub </tag>
            
            <tag> VScode </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo博客】从0开始进行搭建并部署到GitHub</title>
      <link href="/2021/09/15/2021-1/"/>
      <url>/2021/09/15/2021-1/</url>
      
        <content type="html"><![CDATA[<!--深灰--><div class="note blue no-icon flat"><p>【注意】：本文纯属才疏尚浅的我以笔记的形式进行的记录，很多知识其实我也不是太懂，可能存在理解偏差和认知错误，来学习的朋友们请自己甄别，路过的大神们也别喷我哈哈，有什么问题和建议可以评论提出或者其它方式联系我。我会尽可能保持更新该文章所使用到的技术和做法，并随时接受勘误。</p></div><div class="note green no-icon flat"><p>右下角设置可调为夜间模式阅读文章<br>PC端目录在侧边栏或右下角，手机端目录在右下角<br>点击目录可跳转到文章相应部分（本文强烈建议在PC端观看）<br>PC端右下角设置也可隐藏侧边栏，或者进入纯净的阅读模式</p></div><div class="note red no-icon flat"><p>本篇文章为 <a href="https://barry-flynn.github.io/">百里飞洋丨Barry Flynn</a> 版权所有，<br>转载与分享请务必携带原文链接：<a href="https://barry-flynn.github.io/2021/09/15/2021-1/">https://barry-flynn.github.io/2021/09/15/2021-1/</a><br>侵权必究！！！</p></div><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>&emsp;&emsp;每当在大佬们群里划水的时候，身为<big> <del>大佬</del> </big>菜鸡，总是很羡慕他们拥有自己的域名和博客。但由于我还是初学计算机的学生，买域名或者租云服务器主机其实也并不是很急迫的事情 <del>（才不是因为不想掏那份钱哈哈哈）</del> ，主要我是怕买了之后不会用，在那一边闲着 haha~ 因此我选择了 Hexo 作为我的博客框架，花了一两天时间，查找翻阅网上各种教程，将 Hexo 成功部署到了 GitHub Pages，建立了人生第一个真正属于自己的个人（博客）网站。</p><ul><li><p>什么是Hexo？<br>&emsp;&emsp;Hexo 是一个快速、简洁而强大的博客框架，基于 Node.js，同样托管于 GitHub 之上。生态中拥有众多插件主题。你可以基于它快速生成一些静态页面。你可以使用别人的各种主题与插件，也可以自己定制开发想要的功能。</p></li><li><p>为什么选择了Hexo而没有选择其他的？<br>&emsp;&emsp;其他常用的博客框架还有 <a href="https://wordpress.org/">WordPress</a>，<a href="https://typecho.org/">Typecho</a>，<a href="https://ghost.org/">Ghost</a> 等，但这些往往都需要购置自己的服务器，而无法静态化地部署到 GitHub Pages 上。个人博客的话，用 Hexo 完全不需要去另外购买空间，不需要有虚拟主机或者云服务器，可以直接托管到 Github、coding、gitee 等托管平台，免费提供的空间就完全足够了，毕竟一篇写完的文章大小都是kb级别的。<br>&emsp;&emsp;第二，因为 Hexo 是完全使用 markdown 文件写的博客（一种介于txt文本和Word文档之间的一种格式），后期备份和迁移非常方便。我的危机意识比较强，特别不放心那些空间商的数据库和空间的安全性，生怕某一天网站崩了就全没了。<br>&emsp;&emsp;第三，Hexo 生成的属于静态网站，体积小，访问速度快，性能更优，而且纯静态的方便网站的 SEO （搜索引擎优化）。</p></li></ul><div class="note default no-icon flat"><p>&emsp;&emsp;静态网站生成器还有 <a href="https://vuepress.vuejs.org/">Vuepress</a>，<a href="https://www.gatsbyjs.org/">Gatsby</a> 等。但这些多是为了写文档而量身定制的，你也可以使用它们，但是相较 Hexo 的博客定位，它们关于博客的插件和主题以及解决办法会少得多。<br>&emsp;&emsp;虽然Hexo 提供的功能 <a href="https://gohugo.io/">Hugo</a> 几乎都有，（生成大量文件时，甚至比 Hexo 更快）不过它是基于 GO 语言。日后你想对自己的网站进行自定义，即便是 Hugo，你编写前端的交互仍旧需要使用 JavaScript，所以选择基于 JavaScript 的 Hexo 可以降低学习成本。（你若对 GO 有兴趣，仍然可以自己尝试使用 Hugo）<br>&emsp;&emsp;所以对于新手来说，使用 Hexo 作为起始点，不失为一个好选择。（当然如果你有钱租服务器，并希望快速上手的话，就可以考虑考虑 WordPress 或者 Typecho）<br><em>——（云游君）</em></p></div><ul><li>为什么选择率先部署到 GitHub 而不是其他平台？<br>&emsp;&emsp;GitHub是一个面向开源及私有软件项目的托管平台，也是世界上最大的代码托管平台，因为只支持Git作为唯一的版本库格式进行托管，故名GitHub。GitHub中文社区,是国内领先的开源社区,是一个可以发现优质开源项目的地方。（由于程序员大多是男性，GitHub又被戏谑地调侃成全球最大同性交友网站”Gayhub”，哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈……咳咳，说多了）<br>&emsp;&emsp;Hexo 配合 GitHub 的 actions 或其他 CI/CD，比如 cycleci 等，能做到一键部署、发布。国内的代码托管平台比如 coding 和 gitee（码云）的服务可能没有GitHub全面，开源项目也少，也没有GitHub的社区归属感强，所以一般选择GitHub托管代码。（我不久之后可能也会选择 coding 或 gitee 啥的国内平台也同步备份和托管博客啥的了，因为GitHub服务器在国外，有时候访问我这个博客，那个网速啊真一言难尽……平时不卡的时候只能说还行吧）</li></ul><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><h2 id="一、用GitHub创建仓库"><a href="#一、用GitHub创建仓库" class="headerlink" title="一、用GitHub创建仓库"></a>一、用GitHub创建仓库</h2><h3 id="1-注册GitHub账号"><a href="#1-注册GitHub账号" class="headerlink" title="1. 注册GitHub账号"></a>1. 注册GitHub账号</h3><p>（有账号的可跳过此步骤）<br>&emsp;&emsp;虽然都是英文，但不必畏惧，也并不会造成使用障碍，只要记得最常用的选项含义即可，以及善用浏览器的网页翻译功能和手头的翻译软件。</p><!--深灰--><div class="note default no-icon flat"><p>注意：注册时的英文用户名将成为你可以使用的免费域名前缀。</p></div><p><img src="https://i.loli.net/2021/09/15/uIVQoxiedS41ZXp.jpg" alt="注册GitHub账号.jpg"></p><p>注册流程非常简单，这里不再赘述。</p><h3 id="2-创建一个新的项目"><a href="#2-创建一个新的项目" class="headerlink" title="2. 创建一个新的项目"></a>2. 创建一个新的项目</h3><p>单击 右上角【+】- New Repository 新建项目（以下简称仓库），然后填写项目信息。<br>仓库的名字格式应为：<code>你的用户名.github.io</code></p><div class="note default no-icon flat"><p>为什么必须这个作为仓库名？<br>因为这是GitHub Pages 服务的命名规范，同时它也将成为你的专属域名。当然，你也可以购置自己的专属域名并用它来提供内容。</p></div><p>比如我的用户名是Barry-Flynn，那么我的仓库就叫：<code>Barry-Flynn.github.io</code><br>(全部小写更好，有大写也没事，除了有时用大小写切换有一丢丢麻烦外，没有区别）</p><p>在description一栏填写简介，随便填填，比如我填的是：<code>百里飞洋的个人空间</code></p><p><img src="https://i.loli.net/2021/09/15/LXAF5pVCziEPace.png" alt="创建GitHub博客仓库.png"></p><p>然后选择 Public。<br>最后可以选择勾选一下 Initialize the repository with a README。（其实无所谓，此步的作用是用不用生成一个类似仓库说明书的 README.md 文件）<br>完成后点击下面的 Create Repository。</p><h2 id="二、安装-VS-Code"><a href="#二、安装-VS-Code" class="headerlink" title="二、安装 VS Code"></a>二、安装 VS Code</h2><p>&emsp;&emsp;在安装Git之前，我建议先安装<a href="https://code.visualstudio.com/"> VS Code </a>。因为安装 Git Bash 时，可以设置 VS Code 作为默认编辑器。Visual Studio Code，简称 VS Code。目前最为强大易用的编辑器，轻量且快速。<del>（宇宙第一编辑器哈哈哈）</del></p><div class="note default no-icon flat"><p>注意：它并不是我们常常听到的 VS，VS 常常指的是 Visual Studio，是一个功能强大的 IDE（集成开发环境），体积要比 VS Code 都要大上一个量级。</p></div><p>对于它的安装，直接官网下载就行了，免费的，不再赘述。</p><h2 id="三、安装-Git"><a href="#三、安装-Git" class="headerlink" title="三、安装 Git"></a>三、安装 Git</h2><p>&emsp;&emsp;Git 是一个开源的分布式版本控制系统，由 Linus Torvalds（同时也是 Linux 的作者）为了管理 Linux 开发而开发。类似的工具还有：SVN。但始终更推荐 Git，因为它功能更为强大且它的背后还有更强大的生态：GitHub。</p><div class="note default no-icon flat"><p>&emsp;&emsp;简而言之，是一个版本管理工具。譬如设计师设计好了第三版的海报，客户却说还是要第一版吧，这时便可以通过 Git 快速回退到最初的版本。<br>&emsp;&emsp;你只需要把每次更改的状态（Git 会自动进行检测，你只要掌握基础的几条命令就可以了）告诉 Git，而不需要每个版本都保存一份压缩包，既方便也能大大节约空间。<br>&emsp;&emsp;当然这主要只对代码文本起作用，因为 Git 的本质是记录各行代码的增减，倘若是像视频、海报这类二进制文件来说便体现不出丝毫优势了。当然想要应对这种场景还有<a href="https://git-lfs.github.com/"> Git LFS </a>。<br><em>——（云游君）</em></p></div><p>你可以直接去官网下载Git并安装，如果国内网速太慢可以“科学上网”或者从“腾讯软件中心”等平台下载。MacOS 用户可以下载官网的安装包进行安装，也可以直接安装 App Store 的 Xcode（附带会安装 Git，但是比较大）。安装时一路next到底就行了，也可以在网上找教程，我不再多说。</p><h2 id="四、安装-Node-js"><a href="#四、安装-Node-js" class="headerlink" title="四、安装 Node.js"></a>四、安装 Node.js</h2><p>&emsp;&emsp;何为Node.js ？<a href="https://nodejs.org/en/"> Node.js </a>是一个基于Chrome JavaScript 运行时建立的一个平台。简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js是一个事件驱动I/O（计算机接口）服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。<br>&emsp;&emsp;对的，第一次看到这个解释的时候其实我也很难理解，但不妨碍我们用它，想进一步了解的朋友们可以去官网浏览官方文档，或者看看下面这段其他博主的理解。</p><div class="note default no-icon flat"><p>什么是 Node.js ？<br>&emsp;&emsp;这得从什么是 JS 说起，JS 也就是 JavaScript。（为什么有种从盘古开天辟地开始的感觉）没错，JavaScript 就是网页的盘古。JavaScript 是一种编程语言，我们所见到的网页中的交互和逻辑处理几乎都是由 JavaScript 完成。JavaScript 语法简单，易学易用。（当然也请不要小瞧它，虽然它入门门槛低，但上限同样也很高。包括但不限于实现网站前后端，手机桌面应用程序，机器学习，计算机图形学等。）在 Node.js 诞生前，JavaScript 都运行于浏览器端。<br>&emsp;&emsp;也就是说，它是鱼，浏览器是装满了水的水缸。2008 年，Chrome V8 诞生。2009 年，Node.js 诞生。并成为 GitHub 早期最著名的开源项目。GitHub 可能大家已有所了解，后续再说。<br>&emsp;&emsp;Node.js 便是一个基于 Chrome V8 引擎的 JavaScript 运行环境。（当年第一次看到这句话时，我也一脸懵逼。）按照我的理解，JavaScript 是鱼，Chrome V8 就是抽水机，Node.js 则把这台抽水机也装在你电脑上。于是你的电脑也有了 Node.js 这个和浏览器相似的水缸，也可以在里面运行 JavaScript 了！当然 Node.js 和浏览器端还是因为自身定位和一些历史原因而有些许区别的，不再展开。<br><em>——（云游君）</em></p></div><p>建议下载<b>长期支持版(LTS)</b>而非<b>当前发布版</b>（因为如果是最新版，容易出现一些奇妙的 bug）。</p><p>全部默认下一步进行安装。然后，<br>Windows 用户打开命令提示符，即按住键盘 Win+R，输入<code> cmd </code>然后回车，弹出黑色代码窗口。（本文以 Windows10 为例）</p><div class="note default no-icon flat"><p>MacOS 用户打开终端。<br>Linux 用户右上角关闭本标签页。</p></div><p>后续如提到输入命令，均默认指打开终端进行输入。</p><p>输入<code> node --version </code>回车，如果得到的版本号与你方才安装的一致，那么 Node.js 就已经成功安装。</p><p>Node.js 安装成功时也默认安装了 npm，在此后将会用到。<br>npm 是随 Node.js 一起被安装的包管理工具，你可以理解成 Node.js 自带的应用商店。</p><p>对了，国内使用 npm 可能很慢，你可以“科学的上网”，或者考虑切换为国内镜像源（比如淘宝镜像源），即手动输入以下内容后按回车(也可以Ctrl+C复制和Ctrl+V粘贴以下代码到命令窗口按回车)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>（上面这行切换镜像源方法的代码我没用过，还不确定它的有效性，如果你会“科学的上网”的话不用管这种方法，不会的话可以输入这行命令试一下，没报错就OK，如果报错就自行搜索方法吧先，鄙人实在是不才）</p><h2 id="五、安装Hexo"><a href="#五、安装Hexo" class="headerlink" title="五、安装Hexo"></a>五、安装Hexo</h2><p>&emsp;&emsp;这里是它的官网：<a href="https://hexo.io/"> Hexo </a><br>&emsp;&emsp;这个是它的<a href="https://hexo.io/zh-cn/docs/index.html"> 中文官方文档 </a>（建议收藏，用到了就多看看）<br>&emsp;&emsp;这是它的GitHub项目链接: <a href="https://github.com/hexojs/hexo">https://github.com/hexojs/hexo</a></p><p>如何安装Hexo呢?</p><p>在cmd终端窗口中输入以下命令后回车：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>然后等待一会进度条走完，没报错就代表安装成功。<br>进度条卡住不动可能还是国内网络问题，“科学的上网”哦，咳咳….</p><p>如果安装失败，可能是没有权限，可以尝试头部加上 sudo 重新执行，即输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-cli -g </span><br></pre></td></tr></table></figure><div class="note default no-icon flat"><p>上面命令中，<br><code> install </code>自然是安装。<br><code> hexo-cli </code>则是 hexo 的终端工具，可以帮助你生成一些模版文件，之后再用到。<br><code> -g </code>代表的是全局安装。也就是在任何地方都可以使用，否则会只能在安装的目录下使用。</p></div><h1 id="正式操作"><a href="#正式操作" class="headerlink" title="正式操作"></a>正式操作</h1><h2 id="六、初始化-Hexo-工程"><a href="#六、初始化-Hexo-工程" class="headerlink" title="六、初始化 Hexo 工程"></a>六、初始化 Hexo 工程</h2><p>&emsp;&emsp;注意：接下来应该是你自己的自定义的目录，请不要完全复制粘贴我的！<br>比如说我是Windows用户，想把我的网站代码以后都储存在<br>电脑 E 盘的<code> BarryFlynn\Github\ </code>文件夹下<br>那么我要先在E盘建立相应的文件夹，然后再继续操作。<br>由于cmd终端最开始默认在C盘操作，我得先切换到E盘，那么我要输入<code> E: </code>然后回车,即我会看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Microsoft Windows [版本 10.0.19042.1165]</span><br><span class="line">(c) Microsoft Corporation。保留所有权利。</span><br><span class="line"> </span><br><span class="line">C:\Users\10272&gt;E:</span><br><span class="line"> </span><br><span class="line">E:\&gt;</span><br></pre></td></tr></table></figure><p>然后此时，我要通过 cd 命令进入我本地电脑打算存储网站代码的文件夹目录。（或者右键文件夹 Git Bash Here），即 BarryFlynn\Github\ 文件夹里</p><div class="note default no-icon flat"><p>百度百科：<br><a href="https://baike.baidu.com/item/cd/3516393"> cd | DOS 命令 </a><br><a href="https://baike.baidu.com/item/cd/3516411"> cd （LINUXSHELL 命令） </a></p></div><p>也就是说我需要输入<code> cd BarryFlynn\Github\ </code>然后回车，我会看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E:\&gt;cd BarryFlynn\Github\</span><br><span class="line">E:\BarryFlynn\Github&gt;</span><br></pre></td></tr></table></figure><p>好了成功进入，接下来输入下方代码，再按回车：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init 你的名字.github.io</span><br></pre></td></tr></table></figure><div class="note default no-icon flat"><p><code> hexo </code>：正是因为我们之前安装了 hexo-cli 这一个包，所以我们可以在终端中使用 hexo 这一命令。<br><code> init </code>：用来初始化博客的模版文件。后面跟的是你要新建的文件夹，最好和你此前新建的仓库名一致，比如我的是：<code> Barry-Flynn.github.io </code></p></div><p>然后我会看到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github&gt;hexo init Barry-Flynn.github.io</span><br><span class="line">INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span><br><span class="line">[32mINFO [39m Install dependencies</span><br><span class="line">added 242 packages from 207 contributors in 105.871s</span><br><span class="line"> </span><br><span class="line">15 packages are looking for funding</span><br><span class="line">  run `npm fund` for details</span><br><span class="line"> </span><br><span class="line">INFO  Start blogging with Hexo!</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github&gt;</span><br></pre></td></tr></table></figure><p>下面通过 cd  进入我的博客文件夹，</p><p>即输入 cd Barry-Flynn.github.io 后按回车，我会看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github&gt;cd Barry-Flynn.github.io</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;</span><br></pre></td></tr></table></figure><p>现在我就是处于 E:\BarryFlynn\Github\Barry-Flynn.github.io 文件夹下操作了（你的博客源文件的文件夹当然可以跟我的路径不一致，放到你想放的地方就好，不过也需要参照我的方法用命令进入里面），</p><p>现在在这个文件夹内默认安装所有 <code>package.json</code> 文件中提到的包，<br>即输入<code> npm install </code>然后回车，我会看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;npm install</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.3.2 (node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br><span class="line"> </span><br><span class="line">audited 243 packages in 4.956s</span><br><span class="line"> </span><br><span class="line">15 packages are looking for funding</span><br><span class="line">  run `npm fund` for details</span><br><span class="line"> </span><br><span class="line">found 0 vulnerabilities</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;</span><br></pre></td></tr></table></figure><p>这时候，我的 Barry-Flynn.github.io 文件夹里面会多出一堆文件，<br>文件夹结构应该大致是这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|  ├── _drafts</span><br><span class="line">|  └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>现在我们输入 <code> hexo server </code> 然后回车，会看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;hexo server</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p><code> server </code>代表开启本地的 Hexo 服务器，这时你就可以打开浏览器，在地址栏中输入 localhost:4000 就可以看到本地的网页了。<br><img src="https://i.loli.net/2021/09/16/5B9MpQ3FWmbUuKC.png" alt="hexo博客搭建成功页面.png"></p><p>这个网页就是Hexo为你自动生成的博客页面。<br>按 <code> Ctrl+C </code> 中断服务器的运行，<br>系统提示  终止批处理操作吗(Y/N)?  输入<code> Y </code>然后回车。<br>至此，基础的模版页面便已经搭建好了。</p><h2 id="七、生成静态文件"><a href="#七、生成静态文件" class="headerlink" title="七、生成静态文件"></a>七、生成静态文件</h2><p>&emsp;&emsp;到现在，我们的工作都是在本地进行，想必你也很想放到线上与小伙伴们分享。这便轮到了 GitHub Pages 的出场，不过 GitHub Pages 只支持纯静态文件。</p><p>所以我们需要使用下面一行命令先来生成站点的静态文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line"> </span><br><span class="line">（上方命令也可以缩写为 hexo g）</span><br></pre></td></tr></table></figure><p>输入后回车，我会看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;hexo g</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded in 209 ms</span><br><span class="line">INFO  Generated: archives/index.html</span><br><span class="line">INFO  Generated: archives/2021/index.html</span><br><span class="line">INFO  Generated: archives/2021/08/index.html</span><br><span class="line">(node:20772) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(Use `node --trace-warnings ...` to show where the warning was created)</span><br><span class="line">(node:20772) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:20772) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br><span class="line">(node:20772) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(node:20772) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:20772) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br><span class="line">INFO  Generated: index.html</span><br><span class="line">INFO  Generated: fancybox/jquery.fancybox.min.css</span><br><span class="line">INFO  Generated: js/script.js</span><br><span class="line">INFO  Generated: 2021/08/25/hello-world/index.html</span><br><span class="line">INFO  Generated: css/style.css</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.woff2</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.woff</span><br><span class="line">INFO  Generated: fancybox/jquery.fancybox.min.js</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.ttf</span><br><span class="line">INFO  Generated: css/fonts/FontAwesome.otf</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.eot</span><br><span class="line">INFO  Generated: js/jquery-3.4.1.min.js</span><br><span class="line">INFO  Generated: css/images/banner.jpg</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.svg</span><br><span class="line">INFO  17 files generated in 1.98 s</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;</span><br></pre></td></tr></table></figure><p>此时我的文件夹目录下会出现 public  这个文件夹，里面存放的就是我的站点的静态文件。</p><h2 id="八、与远程仓库建立关联"><a href="#八、与远程仓库建立关联" class="headerlink" title="八、与远程仓库建立关联"></a>八、与远程仓库建立关联</h2><p>接下来我们将本地的仓库与此前在 GitHub 上建立的仓库建立关联。</p><p>输入 <code> git init </code> 初始化 Git 仓库，只需要执行一次即可，以后不用执行了，因为这是进行初始化，看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;git init</span><br><span class="line">Initialized empty Git repository in E:/BarryFlynn/Github/Barry-Flynn.github.io/.git/</span><br></pre></td></tr></table></figure><p>在将其部署到 GitHub Pages 上之前，我们最好先建立一个分支。</p><div class="note default no-icon flat"><p>什么是分支？<br>Git 提供了版本管理功能，其中还有一个分支功能，你现在可以简单地将其理解为平行世界。比如，对同一个文件夹，切换到它的不同的分支会显示不同的文件内容。</p></div><p><code> 你的名字.github.io </code>部署后，GitHub Pages 将默认使用你的 main分支（以前叫 master分支，一个意思，主要分支的意思）作为静态文件部署。所以我们最好新建一个 hexo 分支（命名无所谓）用来存储 Hexo 的源代码，master 分支则用来存储部署后的静态文件。为了方便，不想其他名字了，这个分支我就直接起名叫 hexo 吧。</p><p>新建该分支的命令语句是 <code> git checkout -b hexo </code> ，然后回车，可以看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;git checkout -b hexo</span><br><span class="line">Switched to a new branch &#x27;hexo&#x27;</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;</span><br></pre></td></tr></table></figure><p>这时便成功建立了一个 hexo 分支。（此后基本上所有的命令工作都将在 hexo 分支下进行）</p><div class="note default no-icon flat"><p>你可以通过 git branch -v 来查看当前有哪些分支，使用 git checkout 分支名 来切换到对应的分支。<br>这是一位博主“云游君”的 <a href="https://www.yunyoujun.cn/note/git-learn-note/"> Git 学习笔记 </a></p></div><h2 id="九、部署-main分支"><a href="#九、部署-main分支" class="headerlink" title="九、部署 main分支"></a>九、部署 main分支</h2><p>为了更方便的将博客静态文件（ main 分支）部署到 GitHub Pages 上，Hexo 提供了 hexo-deployer-git 插件。</p><p>老规矩，安装该插件，要输入下面命令，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure><p>回车后可以看到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;npm install hexo-deployer-git</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.3.2 (node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br><span class="line"> </span><br><span class="line">+ hexo-deployer-git@3.0.0</span><br><span class="line">added 1 package from 1 contributor and audited 244 packages in 8.166s</span><br><span class="line"> </span><br><span class="line">15 packages are looking for funding</span><br><span class="line">  run `npm fund` for details</span><br><span class="line"> </span><br><span class="line">found 0 vulnerabilities</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;</span><br></pre></td></tr></table></figure><p>下面对 <code> 你的名字.github.io </code> 文件夹下的 <code> _config.yml </code> 文件进行配置。</p><p>右键 <code> _config.yml </code> ，打开方式选VS Code（或者直接用VS Code打开该文件），</p><p>滑到最下面，把关于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:&#x27; &#x27;</span><br></pre></td></tr></table></figure><p>的这段代码补充为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/你的名字/你的名字.github.io #仓库地址</span><br><span class="line">  branch: main # 默认使用 master 分支(Github现在改名为main分支)</span><br><span class="line">  message: Update Hexo Static Content # 自定义的此次部署更新的说明</span><br></pre></td></tr></table></figure><p>Ctrl+S保存代码，然后退出VS Code，部署！</p><p>终端里输入命令 <code> hexo deploy </code> 后（或者缩写为  hexo d  ）回车，我的电脑显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;hexo deploy</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Setting up Git deployment...</span><br><span class="line">Initialized empty Git repository in E:/BarryFlynn/Github/Barry-Flynn.github.io/.deploy_git/.git/</span><br><span class="line">Author identity unknown</span><br><span class="line"> </span><br><span class="line">*** Please tell me who you are.</span><br><span class="line"> </span><br><span class="line">Run</span><br><span class="line"> </span><br><span class="line">  git config --global user.email &quot;you@example.com&quot;</span><br><span class="line">  git config --global user.name &quot;Your Name&quot;</span><br><span class="line"> </span><br><span class="line">to set your account&#x27;s default identity.</span><br><span class="line">Omit --global to set the identity only in this repository.</span><br><span class="line"> </span><br><span class="line">fatal: unable to auto-detect email address (got &#x27;10272@DESKTOP-N3PNS7C.(none)&#x27;)</span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (E:\BarryFlynn\Github\Barry-Flynn.github.io\node_modules\hexo-util\lib\spawn.js:51:21)      at ChildProcess.emit (events.js:400:28)</span><br><span class="line">      at ChildProcess.cp.emit (E:\BarryFlynn\Github\Barry-Flynn.github.io\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;</span><br></pre></td></tr></table></figure><p>是的，部署出错（FATAL）了,“ Please tell me who you are.”</p><p>原来是创建git文件夹的时候信息不完善导致的，</p><p>它提示我需要运行（Run）下面两行程序，来设置我帐户的默认标识。</p><p>  git config –global user.email “<a href="mailto:&#121;&#111;&#117;&#x40;&#101;&#x78;&#97;&#109;&#112;&#108;&#x65;&#46;&#99;&#x6f;&#x6d;">&#121;&#111;&#117;&#x40;&#101;&#x78;&#97;&#109;&#112;&#108;&#x65;&#46;&#99;&#x6f;&#x6d;</a>“<br>  git config –global user.name “Your Name”</p><div class="note default no-icon flat"><p>注意双引号前有空格，邮箱随便填也可以，比如QQ邮箱啥的，</p><p>我用的这个邮箱查找路径是：点击Github主页右上角头像，点击settings，点击Emails，然后就能找到Github的这个邮箱了</p></div><p>那么我分别输入这两个命令按回车，执行两次代码，可见下方：<br>(如果你们没有报错，可以忽略这个)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;git config --global user.email &quot;Barry-Flynn@users.noreply.github.com&quot;</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;git config --global user.name &quot;Barry Flynn&quot;</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;</span><br></pre></td></tr></table></figure><p>再用命令 <code> git config -l </code> 查看所有的配置信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;git config -l</span><br><span class="line">diff.astextplain.textconv=astextplain</span><br><span class="line">filter.lfs.clean=git-lfs clean -- %f</span><br><span class="line">filter.lfs.smudge=git-lfs smudge -- %f</span><br><span class="line">filter.lfs.process=git-lfs filter-process</span><br><span class="line">filter.lfs.required=true</span><br><span class="line">http.sslbackend=openssl</span><br><span class="line">http.sslcainfo=E:/Git/mingw64/ssl/certs/ca-bundle.crt</span><br><span class="line">core.autocrlf=true</span><br><span class="line">core.fscache=true</span><br><span class="line">core.symlinks=false</span><br><span class="line">pull.rebase=false</span><br><span class="line">credential.helper=manager-core</span><br><span class="line">credential.https://dev.azure.com.usehttppath=true</span><br><span class="line">init.defaultbranch=master</span><br><span class="line">user.email=Barry-Flynn@users.noreply.github.com</span><br><span class="line">user.name=Barry Flynn</span><br><span class="line">core.repositoryformatversion=0</span><br><span class="line">core.filemode=false</span><br><span class="line">core.bare=false</span><br><span class="line">core.logallrefupdates=true</span><br><span class="line">core.symlinks=false</span><br><span class="line">core.ignorecase=true</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;</span><br></pre></td></tr></table></figure><p>可以看见下面这两条信息，代表信息以及完善上去了</p><p>user.email=<a href="mailto:&#66;&#97;&#x72;&#114;&#x79;&#45;&#x46;&#x6c;&#121;&#110;&#110;&#x40;&#x75;&#x73;&#101;&#x72;&#115;&#x2e;&#x6e;&#x6f;&#x72;&#101;&#x70;&#108;&#121;&#x2e;&#103;&#x69;&#116;&#104;&#117;&#x62;&#46;&#99;&#111;&#x6d;">&#66;&#97;&#x72;&#114;&#x79;&#45;&#x46;&#x6c;&#121;&#110;&#110;&#x40;&#x75;&#x73;&#101;&#x72;&#115;&#x2e;&#x6e;&#x6f;&#x72;&#101;&#x70;&#108;&#121;&#x2e;&#103;&#x69;&#116;&#104;&#117;&#x62;&#46;&#99;&#111;&#x6d;</a><br>user.name=Barry Flynn</p><p>那我就可以接着部署了！</p><p>终端里输入命令 <code> hexo deploy </code> 后（或者缩写为  hexo d  ）回车，这次，我的电脑却再次报错：<br>那一大坨的代码最底端为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access &#x27;https://github.com/Barry-Flynn/Barry-Flynn.github.io/&#x27;: OpenSSL SSL_read: Connection was reset, errno 10054</span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (E:\BarryFlynn\Github\Barry-Flynn.github.io\node_modules\hexo-util\lib\spawn.js:51:21)      at ChildProcess.emit (events.js:400:28)</span><br><span class="line">      at ChildProcess.cp.emit (E:\BarryFlynn\Github\Barry-Flynn.github.io\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;</span><br></pre></td></tr></table></figure><p>我电脑怎么又报错了？我很晕。问了群里大佬，说可能是网络问题。好吧，秒懂，咳咳咳……差点忘了GitHub服务器在国外啊！</p><p>解决方法是多 hexo d 几次或者那个啥…咳咳…<br>我第三次输入命令 <code> hexo deploy </code> ，回车</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;hexo deploy</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend dirs...</span><br><span class="line">warning: LF will be replaced by CRLF in 2021/08/25/hello-world/index.html.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">warning: LF will be replaced by CRLF in archives/2021/08/index.html.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">warning: LF will be replaced by CRLF in archives/2021/index.html.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">warning: LF will be replaced by CRLF in archives/index.html.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">warning: LF will be replaced by CRLF in css/fonts/fontawesome-webfont.svg.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">warning: LF will be replaced by CRLF in css/style.css.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">warning: LF will be replaced by CRLF in fancybox/jquery.fancybox.min.js.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">warning: LF will be replaced by CRLF in index.html.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">warning: LF will be replaced by CRLF in js/jquery-3.4.1.min.js.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">warning: LF will be replaced by CRLF in js/script.js.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">info: please complete authentication in your browser...</span><br><span class="line">Enumerating objects: 31, done.</span><br><span class="line">Counting objects: 100% (31/31), done.</span><br><span class="line">Delta compression using up to 4 threads</span><br><span class="line">Compressing objects: 100% (25/25), done.</span><br><span class="line">Writing objects: 100% (31/31), 882.21 KiB | 4.98 MiB/s, done.</span><br><span class="line">Total 31 (delta 3), reused 0 (delta 0), pack-reused 0</span><br><span class="line">remote: Resolving deltas: 100% (3/3), done.</span><br><span class="line">To https://github.com/Barry-Flynn/Barry-Flynn.github.io</span><br><span class="line"> + 4b62927...a9fc5f8 HEAD -&gt; main (forced update)</span><br><span class="line">Branch &#x27;master&#x27; set up to track remote branch &#x27;main&#x27; from &#x27;https://github.com/Barry-Flynn/Barry-Flynn.github.io&#x27;.</span><br><span class="line">[32mINFO [39m Deploy done: [35mgit[39m</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;</span><br></pre></td></tr></table></figure><p>成功了！Ohhhhhhhhhhh~</p><p>等待完成后，打开网址 <code> https://你的名字.github.io </code> ,稍等片刻不要着急，刷新一下就能看到你的线上网站了！</p><div class="note default no-icon flat"><ul><li>建议使用 https，因为 http 可能无法正常打开。HTTPS 是多了安全加密的 HTTP，Chrome 浏览器已经默认会显示 http 链接为不安全。为了安全，建议开启强制 https 跳转。<br>前往GitHub项目地址页面 -&gt; Settings -&gt; Options -&gt; GitHub Pages -&gt; Enforce HTTPS。（翻到下面）<br>此时，http 网址会自动重定向到 https</li></ul><p><em>——（云游君）</em></p><ul><li>但我根据这个去找了一些，我的GitHub Pages默认设置就是https，所以我不用管了。</li></ul></div><h2 id="十、备份-hexo-源代码分支"><a href="#十、备份-hexo-源代码分支" class="headerlink" title="十、备份 hexo 源代码分支"></a>十、备份 hexo 源代码分支</h2><p>我们当前只是将生成的静态文件部署到了云端，准确的说只是将生成文件 存进了 GitHub 的 main（或叫master）分支。<br>为了以防万一，我们应该将网站的源代码(也就是 hexo分支 里的)源文件也推送到 GitHub 仓库的 hexo分支 进行备份。</p><p>输入下方代码按回车，与远程 Git 仓库建立连接，只此一次即可，以后无需输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/你的用户名/你的名字.github.io</span><br></pre></td></tr></table></figure><p>但当时在这个时候我手抖了，这行代码后面那个仓库链接我还没输入完，输入了 <a href="https://github.com/Barry-Flynn">https://github.com/Barry-Flynn</a> 就按了回车。<br>查了一下，我需要运行输入 <code> git remote rm origin </code> 删除远程地址，然后再输入一遍正确的命令与远程 Git 仓库建立连接就行了：<br>（你们不用执行这一步哦，我是因为输错地址导致绑定错了）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;git remote rm origin</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;git remote add origin https://github.com/Barry-Flynn/Barry-Flynn.github.io</span><br></pre></td></tr></table></figure><p>好了，接下来大家准备提交，<br>第一次提交时，你可能需先运行下面命令设置一下默认提交分支,以后不用再输入这个了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --set-upstream origin hexo</span><br></pre></td></tr></table></figure><p>将网站的源代码(也就是 hexo分支 里的)源文件也推送到 GitHub 仓库的 hexo分支 进行备份的三行命令是<br>（括号内为注释，不用输入哈！）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">（添加到缓存区）</span><br><span class="line">git add -A</span><br><span class="line"> </span><br><span class="line">（这次做了什么更改，简单描述下即可）</span><br><span class="line">git commit -m &quot;你的更新描述&quot;</span><br><span class="line"> </span><br><span class="line">（推送至远程仓库）</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>最后那句命令如果push不上去的话多试几次，或者“科学的上网”，你懂得。</p><h2 id="十一、打开网址查看效果"><a href="#十一、打开网址查看效果" class="headerlink" title="十一、打开网址查看效果"></a>十一、打开网址查看效果</h2><p>如果与之前本地预览时一样，就代表成功了。<br><img src="https://i.loli.net/2021/09/16/5B9MpQ3FWmbUuKC.png" alt="hexo博客搭建成功页面.png"></p><br /><br /><br /><br /><br /><b><font size=6>恭喜你有自己博客啦！</font></b><br /><b><font size=2>下篇文章我会讲讲怎么创作和更换好看的博客主题</font></b><br /><b><font size=6>THE END.</font></b><hr><div class="note green no-icon flat"><p>嘿咻~终于写完了 <del>快累死我了</del> ，很开心！<br>看到这篇文章写了八千三百多字我也很惊讶，如果能对你有一些帮助，可以根据心情在文章末尾进行小小的打赏支持啊，一分一毛一块也是爱。[真诚.jpg]<br>另外，我可能后续还会更新相关文章，确定不收藏我的博客网站吗？[乖巧.jpg]<br>哈哈好啦，感谢能够读到这里的你，祝你学习进步、生活愉快，我们有缘再见（或许吧）！See you！</p></div><div class="note red no-icon flat"><p>本篇文章为 <a href="https://barry-flynn.github.io/">百里飞洋丨Barry Flynn</a> 版权所有，<br>转载与分享请务必携带原文链接：<a href="https://barry-flynn.github.io/2021/09/15/2021-1/">https://barry-flynn.github.io/2021/09/15/2021-1/</a><br>侵权必究！！！</p></div><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><b><font size=4>感谢下方作者提供技术参考:</font></b><br>1、《教你如何从零开始搭建一个属于自己的网站》<br>-作者云游君 - 地址<a href="https://www.yunyoujun.cn/share/how-to-build-your-site/">https://www.yunyoujun.cn/share/how-to-build-your-site/</a><br>2、《手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo》<br>-作者CodeSheep - 哔哩哔哩<a href="https://www.bilibili.com/video/BV1Yb411a7ty/">https://www.bilibili.com/video/BV1Yb411a7ty/</a><br>3、《基于 Github Action 的 CI/CD 流程》<br>-作者Feng Nie - 知乎<a href="https://zhuanlan.zhihu.com/p/250534172">https://zhuanlan.zhihu.com/p/250534172</a></p><hr><h1 id="我的陌生知识点积累"><a href="#我的陌生知识点积累" class="headerlink" title="我的陌生知识点积累"></a>我的陌生知识点积累</h1><ul><li><p>SEO（Search Engine Optimization）：汉译为搜索引擎优化。是一种方式：利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。目的是让其在行业内占据领先地位，获得品牌收益。很大程度上是网站经营者的一种商业行为，将自己或自己公司的排名前移。</p></li><li><p>Github Actions：是由Github创建推出的持续集成 (Con­tin­u­ous in­te­gra­tion，简称 CI) 服务。 它提供了配置非常不错的虚拟服务器环境，目的是使所有软件开发工作流程的自动化变得容易，可直接从GitHub构建，测试、打包和部署项目代码。CI（持续集成）由很多操作组成，比如代码合并、运行测试、登录远程服务器，发布到第三方服务等等。Github Actions 的最大优势就是它是与 GitHub 高度整合的，只需一个配置文件即可自动开启服务。甚至你不需要购买服务器，因为 GitHub Actions 自带云环境运行，包括私有仓库也可以享用，而且云环境性能也非常不错。持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。</p></li><li><p>持续集成指的是，频繁地（一天多次）将代码集成到主干。 它的好处主要有两个：<br>（1）快速发现错误。每完成一点更新，就集成到主干，可以快速发现错误，定位错误也比较容易。<br>（2）防止分支大幅偏离主干。如果不是经常集成，主干又在不断更新，会导致以后集成的难度变大，甚至难以集成。</p></li><li><p>持续交付（Continuous delivery）指的是，频繁地将软件的新版本，交付给质量团队或者用户，以供评审。如果评审通过，代码就进入生产阶段。 持续交付可以看作持续集成的下一步。它强调的是，不管怎么更新，软件是随时随地可以交付的。</p></li><li><p>持续部署（Continuous deployment，简称CD）是持续交付的下一步，指的是代码通过评审以后，自动部署到生产环境。持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo博客 </tag>
            
            <tag> GitHub </tag>
            
            <tag> VScode </tag>
            
            <tag> Git </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客文章</title>
      <link href="/2021/09/02/2021-0/"/>
      <url>/2021/09/02/2021-0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hello，我是百里飞洋。前些日子用了很大功夫学会把Hexo博客部署到Github Pages上，今天开始写这第一篇博客了。</p><hr><h2 id="如何制作这样的博客"><a href="#如何制作这样的博客" class="headerlink" title="如何制作这样的博客"></a>如何制作这样的博客</h2><p>Emm…其实我的学习过程是很曲折的，因为这种学校老师不教的东西只能想方设法在网上找别人的文章或者教程视频一点点摸索和理解。截止此篇博客发出时，我已经将搭建方法以系列笔记文章的形式发布到了CSDN以及阿里云开发者社区。如果想跟着我的总结进行搭建的朋友们可以直接去搜索我的名字，在主页找就行了，基本上算非常详细的教程了。当然，是免费文章啦！后期也打算总结整理一下搭建过程中遇到的一些问题，整理出更详细的博客搭建教程，并发布在这个博客上。</p><hr><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>我是一个00后小白程序员，平时可能比较中二，在各个平台也基本上都可以找到我，比如：</p><ul><li><p>哔哩哔哩 :<a href="https://space.bilibili.com/349963315">点击这里跳转我的B站</a></p></li><li><p>新浪微博 :<a href="https://weibo.com/6327778914/profile?rightmod=1&wvr=6&mod=personinfo&is_all=1">点击这里跳转我的微博</a></p></li><li><p>微信公众号：<a href="https://mp.weixin.qq.com/s/m1Ls3804TJ_Ag0s6kg8WeA">百里飞洋</a>（但目前暂时还没有在这个上面发东西的欲望）</p></li></ul><p>有时候喜欢自说自话发表一些“贼幼稚”的鸡汤和牢骚啥的，上传着关于梦想、成长、编程、沙雕等等各种类型的图片和视频。如果在哪看见了我，可以跟我打个招呼啊！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/08/25/hello-world/"/>
      <url>/2021/08/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
