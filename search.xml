<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【笔记】网站备案流程与域名解析</title>
      <link href="/2021/11/29/2021-44/"/>
      <url>/2021/11/29/2021-44/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么要备案？"><a href="#为什么要备案？" class="headerlink" title="为什么要备案？"></a>为什么要备案？</h1><p><strong>在中华人名共和国境内提供互联网信息服务，应当依法履行<code> ICP 备案</code>和<code>公安备案</code>手续。</strong></p><ol><li><p><code>ICP</code>：网络内容服务商英文为 Internet Content Provider 的简写，即向广大用户综合提供互联网信息业务和增值业务的电信运营商。其必须具备的证书即为ICP证。ICP证是指各地通信管理部门核发的《中华人民共和国电信与信息服务业务经营许可证》。</p></li><li><p><code>公安备案</code>：网站备案是根据国家法律法规需要网站的所有者向国家有关部门申请的备案,公安局备案是其中一种。公安局备案一般按照各地公安机关指定的地点和方式进行。网站备案的目的就是为了防止在网上从事非法的网站经营活动,打击不良互联网信息的传播。</p></li></ol><p>如果购买的是香港服务器或者国外服务器，可以不进行备案也能正常访问网站，这与当地的法律有关。但相比第一种，从网站访问速度上和搜索引擎收录上可能都大打折扣。</p><h1 id="一、ICP备案"><a href="#一、ICP备案" class="headerlink" title="一、ICP备案"></a>一、ICP备案</h1><p>为了方便，我采用的是在手机移动端操作。<code>腾讯云网站备案</code>微信小程序<code>阿里云</code>APP 都免费提供 ICP 备案服务，我们不用去手忙脚乱。大概流程如下：</p><ol><li><p><strong>备案信息填写</strong>：服务器、主体信息、网站域名、备案材料等。</p></li><li><p><strong>提交初审</strong>：提交给 腾讯云/阿里云 帮咱们进行初审，看看哪些地方填的不完整，哪些地方需要改动啥的。一般三天之内会有 腾讯/阿里 的工作人员给你打电话沟通，注意接听。</p></li><li><p><strong>管局审核</strong>：腾讯或阿里觉得没问题了后会提交给各地通信管理局，管局会在大约6~20个工作日内通知你的 ICP 备案申请审核结果，成功后会以短信和邮件的方式将你的备案/许可证编号发送给你。</p></li></ol><p>ICP 备案申请完成后，必须30天内登录公安机关“<strong>全国互联网站安全管理服务平台</strong>“，办理<strong>公安备案</strong>。</p><h1 id="二、公安备案"><a href="#二、公安备案" class="headerlink" title="二、公安备案"></a>二、公安备案</h1><p>全国互联网站安全管理服务平台：<a href="http://www.beian.gov.cn/portal/index.do">http://www.beian.gov.cn/portal/index.do</a></p><p>在导航栏点击“政策解读”，点击左侧目录的“下载中心”，查找并下载“<a href="http://www.beian.gov.cn/portal/downloadFile?token=5cbfc197-a031-445d-9f3e-ff05d52c15f4&id=43">互联网站安全服务平台操作指南</a>”，会得到一个“全国公安机关互联网站安全服务平台备案手册”文档。这是为帮助所有网站开办者尽快熟悉“全国公安机关互联网站安全服务平台”功能，顺利完成备案手续，特编写的使用手册。你可以阅读并了解公安备案操作流程，准备公安备案申请所需的信息。</p><ol><li><strong>开办主体管理</strong>：如实填写开办主体信息，保存并提交审核。</li><li><strong>新版网站申请</strong>：如实填写相关内容，最后勾选下方责任书，并提交审核。 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">            《互联网信息服务单位网络安全责任告知书》</span><br><span class="line">为了保护网络信息安全，保障公民、法人和其他组织的合法权益，维护国家安全和社会公共利益，根据《中华人民共和国计算机信息系统安全保护条例》、《计算机信息网络国际联网安全保护管理办法》等相关法律法规规定，现就你单位应依法履行的网络安全责任告知如下：</span><br><span class="line"></span><br><span class="line">一、具备法律法规所要求的相应资质；</span><br><span class="line">互联网信息服务提供者应为独立承担法律责任的主体，从事互联网信息服务依据法律、行政法规以及国务院有关决定，需经有关部门许可的应取得相应许可资质。</span><br><span class="line"></span><br><span class="line">二、依法接受公安机关监督、检查、指导；</span><br><span class="line"></span><br><span class="line">三、协助公安机关依法查处涉网违法犯罪活动；</span><br><span class="line">    </span><br><span class="line">四、根据《中华人民共和国计算机信息系统安全保护条例》、《计算机信息网络国际联网安全保护管理办法》、《互联网安全保护技术措施规定》、《互联网交互式服务安全保护要求》、《互联网服务安全评估基本程序及要求》（超链）等相关法律法规以及安全管理标准规范，履行违法信息过滤、公共信息巡查、用户资质查验、日志信息留存和应急快速处置等安全保护义务，落实安全管理责任和相关安全保护技术措施；</span><br><span class="line"></span><br><span class="line">五、在网站首页显著位置张贴公安机关核发的备案图标；</span><br><span class="line"></span><br><span class="line">六、当联网备案信息发生变更时，请您于变更后30日内登录本平台提交变更信息，若未按规定要求、时限办理变更手续，公安机关将依法通知接入商暂停网站接入；</span><br><span class="line"></span><br><span class="line">七、当网站不再开办时，请您于５个工作日内登录本平台，向属地公安机关网安部门提出注销申请。</span><br><span class="line"></span><br><span class="line">我已阅知上述告知事项，保证提交内容真实有效，承诺履行上述网络安全义务。</span><br></pre></td></tr></table></figure></li></ol><p>接下来等审核就行了。</p><p>另外，我看到网上有这种说辞（眼神暗示）：</p><blockquote><p>【错误示范】：个人博客或者可评论的网站在申请的时候一定要关闭评论功能，然后申请的时候“<strong>服务类型</strong>”填写<code>非交互式网站</code>，把<code>www服务</code>勾选了即可，可以省去填写大量表格，实地检查和申请不通过等各种麻烦事情。</p></blockquote><p>我的建议是老老实实如实填写吧，不要学这个人，省的以后惹麻烦。咳咳…</p><hr><h1 id="参考内容-文件下载："><a href="#参考内容-文件下载：" class="headerlink" title="参考内容/文件下载："></a>参考内容/文件下载：</h1><p>[1] 全国互联网站安全管理服务平台：<a href="http://www.beian.gov.cn/portal/index.do">http://www.beian.gov.cn/portal/index.do</a></p><p>[2] 腾讯云文档中心 &gt; 公安备案流程：<a href="https://cloud.tencent.com/document/product/243/19142">https://cloud.tencent.com/document/product/243/19142</a></p><p>[3] 全国公安机关互联网站安全服务平台操作指南（下载链接）：<a href="http://www.beian.gov.cn/portal/downloadFile?token=5cbfc197-a031-445d-9f3e-ff05d52c15f4&amp;id=43">http://www.beian.gov.cn/portal/downloadFile?token=5cbfc197-a031-445d-9f3e-ff05d52c15f4&amp;id=43</a></p><p>[4] 互联网信息服务安全检查接收材料清单（下载链接）：<a href="http://www.beian.gov.cn/portal/downloadFile?token=5cbfc197-a031-445d-9f3e-ff05d52c15f4&amp;id=27">http://www.beian.gov.cn/portal/downloadFile?token=5cbfc197-a031-445d-9f3e-ff05d52c15f4&amp;id=27</a></p><p>[5] 备案编号图标（下载链接）：<a href="http://www.beian.gov.cn/portal/download">http://www.beian.gov.cn/portal/download</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客折腾记 </tag>
            
            <tag> 域名 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo博客】隐藏 Butterfly 主题中 Aplayer 的全局吸底音乐标签</title>
      <link href="/2021/11/28/2021-43/"/>
      <url>/2021/11/28/2021-43/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本功能的实现学习自<a href="https://akilar.top/posts/ebf20e02/">Akilarの糖果屋</a>中的魔改教程。</p></blockquote><h1 id="教程原文"><a href="#教程原文" class="headerlink" title="教程原文"></a>教程原文</h1><p><strong>侧栏按钮缩进</strong><br><strong>含 Aplayer 全局吸底音乐标签伸缩实例</strong></p><p>在魔改过程中应该会遇到想要让一个按钮变成侧栏伸缩的形式，不需要它时就所在侧栏里，需要时才弹出。这点可以通过 fixed 定位属性和 hover 选择器做到。</p><ul><li><p>fixed 定位会使得该元素的位置相对于浏览器窗口而固定，即使窗口滚动，它也不会移动。例如我希望 id 为 fixedElement 的按钮牢牢固定在右下角，可以定义它的定位属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#fixedElement</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">60px</span></span><br><span class="line">  /* 假定宽度是<span class="number">60px</span> */</span><br><span class="line">  bottom: <span class="number">60px</span>;</span><br><span class="line">  <span class="comment">/* 定义元素下边框与浏览器下边框的距离 */</span></span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">30px</span>;</span><br><span class="line">  <span class="comment">/* 定义元素左边框与浏览器左边框的距离 */</span></span><br><span class="line">  <span class="comment">/* 此时效果上此按钮应当缩进侧栏一半 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>hover 选择器定义鼠标悬停到该元素上时的样式，例如，我希望鼠标悬停在上述这个 id 为 fixedElement 的按钮时，这个按钮能够完全显示。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#fixedElement</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>应用实例<br>我们可以尝试隐藏 Aplayer 的全局吸底音乐标签，在 <code>[Blogroot]\themes\butterfly\source\css\custom.css</code> 中添加如下内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-fixed</span><span class="selector-class">.aplayer-narrow</span> <span class="selector-class">.aplayer-body</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">66px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="comment">/* 默认情况下缩进左侧66px，只留一点箭头部分 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-fixed</span><span class="selector-class">.aplayer-narrow</span> <span class="selector-class">.aplayer-body</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="comment">/* 鼠标悬停是左侧缩进归零，完全显示按钮 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="魔改具体步骤"><a href="#魔改具体步骤" class="headerlink" title="魔改具体步骤"></a>魔改具体步骤</h1><p>在 Butterfly 主题配置文件 <code>_config.yml</code> 中的<code>inject</code>部分加入下面代码：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="comment"># Aplayer 的全局吸底音乐标签收起隐藏</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;&lt;style type=&quot;text/css&quot;&gt;</span></span><br><span class="line"><span class="string">        .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body &#123;</span></span><br><span class="line"><span class="string">          left: -66px !important;</span></span><br><span class="line"><span class="string">          /* 默认情况下缩进左侧66px，只留一点箭头部分 */</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover &#123;</span></span><br><span class="line"><span class="string">          left: 0 !important;</span></span><br><span class="line"><span class="string">          /* 鼠标悬停是左侧缩进归零，完全显示按钮 */</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &lt;/style&gt;&#x27;</span></span><br></pre></td></tr></table></figure><p>然后就没了，就是这么简单！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客折腾记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo博客】远程仓库从GitHub换成Gitee</title>
      <link href="/2021/11/24/2021-42/"/>
      <url>/2021/11/24/2021-42/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;&emsp;我一直在免费用的翻那啥的工具最近开始对免费用户限速了，延迟超高，干啥都贼卡，<code>git push</code> 推送仓库到 GitHub 也得好几次才能成功，实在受不了啦啊啊啊！于是，我做了一个违背祖宗的决定（bushi~</p><p>&emsp;&emsp;其实，我以前一直以为 Hexo 博客的配置文件<code>_config.yml</code>中，部署代码<code>deploy:</code>里的<code>repo:仓库地址</code>是执行部署的<code>hexo d</code>命令和推送远端<code>git push</code>命令的共有地址，因为我以前一直都是部署和备份都在 GitHub 的同一个仓库（不同的分支）嘛，所以造成了这样的误解，其实<strong>它俩是可以不相同的</strong>。呐，这是之前的配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment（部署）</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/Barry-Flynn/Barry-Flynn.github.io</span> <span class="comment">#GitHub仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span> <span class="comment"># 默认使用 master 分支(Github现在改名为main分支)</span></span><br><span class="line">  <span class="comment"># message: Update Hexo Static Content # 你可以自定义此次部署更新的说明</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;此外，<strong>本地的 Hexo 博客根目录的文件夹名字也是可以直接鼠标右键修改的</strong>，我以前不了解 git 命令，生怕改完文件夹名字会出什么乱子，而且当初搭建博客的时候跟着某教程傻不拉几的直接把文件夹名字设成了<code>Barry-Flynn.github.io</code>了，于是之后每次用 Windows 的命令行黑窗口进我的博客目录的时候，<code>cd</code>命令后面都得输入一大串，麻烦死了。再然后，除了能改名，这个<strong>博客文件夹其实也可以随便挪位置的</strong>……只恨知道得太晚啊。</p><blockquote><p>想知道怎么把博客从 GitHubPage 转移到个人服务器的可以去看我这篇文章 → <a href="http://localhost:4000/2021/11/20/2021-41/">【Hexo博客】部署到腾讯云轻量应用服务器（使用宝塔面板）</a>，本篇文章只讲更换远程仓库地址，不讲更换博客网页部署地址。</p></blockquote><h1 id="初步探索"><a href="#初步探索" class="headerlink" title="初步探索"></a>初步探索</h1><p>一开始其实我是想远程推送到我的服务器进行备份的，但是我是失败了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\hexoBlog&gt;git push</span><br><span class="line">fatal: unable to access <span class="string">&#x27;https://github.com/Barry-Flynn/Barry-Flynn.github.io.git/&#x27;</span>: Failed to connect to github.com port 443: Timed out</span><br><span class="line"></span><br><span class="line">E:\BarryFlynn\hexoBlog&gt;git remote show origin</span><br><span class="line">fatal: unable to access <span class="string">&#x27;https://github.com/Barry-Flynn/Barry-Flynn.github.io.git/&#x27;</span>: OpenSSL SSL_read: Connection was reset, errno 10054</span><br><span class="line"></span><br><span class="line">E:\BarryFlynn\hexoBlog&gt;</span><br></pre></td></tr></table></figure><p>因为我发现，即使我博客的配置文件<code>_config.yml</code>中，部署代码<code>deploy:</code>里的<code>repo:仓库地址</code>早就改成服务器的相应地址了，而且博客早都部署服务器上展示好几天了，我 <code>git push</code> 的远程仓库还是原来的 GitHub 仓库地址，而且因为网络问题连接不上……后来才知道原来得改啊，那行，正好得改，为了节省服务器流量，我也不备份服务器上了，还是改地址备份到gitee码云吧。</p><h1 id="正式步骤"><a href="#正式步骤" class="headerlink" title="正式步骤"></a>正式步骤</h1><h2 id="1、建立gitee仓库"><a href="#1、建立gitee仓库" class="headerlink" title="1、建立gitee仓库"></a>1、建立gitee仓库</h2><p>我建的私有仓库，当然，你可以建公开的，名字随意。</p><h2 id="2、查看原来远程仓库地址"><a href="#2、查看原来远程仓库地址" class="headerlink" title="2、查看原来远程仓库地址"></a>2、查看原来远程仓库地址</h2><pre><code>git remote -v</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\hexoBlog&gt;git remote -v</span><br><span class="line">origin  https://github.com/Barry-Flynn/Barry-Flynn.github.io.git (fetch)</span><br><span class="line">origin  https://github.com/Barry-Flynn/Barry-Flynn.github.io.git (push)</span><br></pre></td></tr></table></figure><h2 id="3、删除远程库"><a href="#3、删除远程库" class="headerlink" title="3、删除远程库"></a>3、删除远程库</h2><pre><code>git remote rm origin</code></pre><h2 id="4、添加远程git库"><a href="#4、添加远程git库" class="headerlink" title="4、添加远程git库"></a>4、添加远程git库</h2><pre><code>git remote add origin 你的码云仓库https或ssh链接地址</code></pre><p>其中<code>https</code>和<code>ssh</code>两种连接方式的区别：</p><ul><li>用https以后被次备份都得输一次码云账号密码</li><li>用ssh就不用了每次都输密码了，但要往gitee上添加公钥</li></ul><blockquote><p>码云生成/添加SSH公钥:<a href="https://gitee.com/help/articles/4181#article-header0">https://gitee.com/help/articles/4181#article-header0</a></p></blockquote><h2 id="5、查看现在远程库地址"><a href="#5、查看现在远程库地址" class="headerlink" title="5、查看现在远程库地址"></a>5、查看现在远程库地址</h2><pre><code>git remote -v</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\hexoBlog&gt;git remote -v</span><br><span class="line">origin  https://gitee.com/用户名/仓库名.git (fetch)</span><br><span class="line">origin  https://gitee.com/用户名/仓库名.git (push)</span><br></pre></td></tr></table></figure><p>可以看到已经更换成功了。</p><h2 id="6、更新远程仓库"><a href="#6、更新远程仓库" class="headerlink" title="6、更新远程仓库"></a>6、更新远程仓库</h2><p>先把前两步走了：</p><pre><code>git add .git commit -m &quot;你此次更新的注释&quot;</code></pre><p>然后再<code>push</code>推送：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\hexoBlog&gt;git push</span><br><span class="line">fatal: The current branch hexo has no upstream branch.</span><br><span class="line">To push the current branch and <span class="built_in">set</span> the remote as upstream, use</span><br><span class="line"></span><br><span class="line">    git push --set-upstream origin hexo</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>啊哦，报错了，机翻如下：</p><pre><code>致命：当前分支hexo没有上游分支。要推送当前分支并将远程分支设置为上游，请使用git push——设置上游原点hexo</code></pre><p>原来，由于我之前在 GitHub 仓库把源码备份在了新建的 hexo 分支里，但码云这个新建的仓库还没有 hexo 分支，所以要加上它提示的那句话：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\hexoBlog&gt;git push --set-upstream origin hexo</span><br><span class="line">remote: [session-224227aa] Access denied</span><br><span class="line">fatal: unable to access <span class="string">&#x27;https://gitee.com/用户名/仓库名.git/&#x27;</span>: The requested URL returned error: 403</span><br></pre></td></tr></table></figure><p>又报错，有完没完了？经搜索，得知：</p><blockquote><p>修改局域网密码，或git密码后， 发现任何操作都会抛出这个git remote: HTTP Basic: Access denied 错误，原因就是本地的git配置的用户名、密码和gitlab上注册的用户名、密码不一致了，需要同步一下密码。</p></blockquote><p>那好吧，蛮简单的，执行一下这行代码：</p><pre><code>git config --system --unset credential.helper</code></pre><p>再重新<code>push</code>一下，这次让输入了一次码云的账号密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\hexoBlog&gt;git push --set-upstream origin hexo</span><br><span class="line">Username <span class="keyword">for</span> <span class="string">&#x27;https://gitee.com&#x27;</span>: 你的用户名</span><br><span class="line">Password <span class="keyword">for</span> <span class="string">&#x27;https://用户名@gitee.com&#x27;</span>: <span class="comment">#注意密码输入时不显示</span></span><br><span class="line">Enumerating objects: 660, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (660/660), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads</span><br><span class="line">Compressing objects: 100% (575/575), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (660/660), 1.15 MiB | 1.06 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 660 (delta 216), reused 45 (delta 7), pack-reused 0</span><br><span class="line">remote: Resolving deltas: 100% (216/216), <span class="keyword">done</span>.</span><br><span class="line">remote: Powered by GITEE.COM [GNK-6.2]</span><br><span class="line">remote: Create a pull request <span class="keyword">for</span> <span class="string">&#x27;hexo&#x27;</span> on Gitee by visiting:</span><br><span class="line">remote:     https://gitee.com/用户名/仓库名/pull/new/用户名:hexo...用户名:master</span><br><span class="line">To https://gitee.com/用户名/仓库名.git</span><br><span class="line"> * [new branch]      hexo -&gt; hexo</span><br><span class="line">Branch <span class="string">&#x27;hexo&#x27;</span> <span class="built_in">set</span> up to track remote branch <span class="string">&#x27;hexo&#x27;</span> from <span class="string">&#x27;origin&#x27;</span>.</span><br></pre></td></tr></table></figure><p>现在可以去看一下，码云的该仓库就有了hexo分支了，以后备份的命令和之前在GitHub上时一样：</p><pre><code>git add . git commit -m &quot;你的本次更新备注&quot;git push origin hexo</code></pre><p>以后部署（deploy）博客的地址是配置文件里写的服务器地址，</p><p>而远程（remote）备份push仓库的地址就是git中设置的码云地址了。</p><blockquote><p>不得不说，有了服务器用来部署，又换到码云进行备份，速度都比以前找工具翻那玩意折腾到GitHub的感受要好的多得多！啊，愿天下再也没有连接失败！现在的部署和备份速度真他娘的爽！博客加载起来也真他娘的丝滑流畅！</p></blockquote><hr><p><strong>参考文章：</strong></p><p>[1] CSDN - <a href="https://blog.csdn.net/hao131416888/article/details/101681662">hexo博客备份迁移教程</a></p><p>[2] CSDN - <a href="https://blog.csdn.net/u012451819/article/details/107543341">git报错“remote: HTTP Basic: Access denied”的解决方法</a></p><p>[3] CSDN - <a href="https://blog.csdn.net/yanzisu_congcong/article/details/111880725">git remote: HTTP Basic: Access denied 错误解决办法</a></p><p>[4] CSDN - <a href="https://blog.csdn.net/weixin_38281213/article/details/107971802">git修改远程仓库地址</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客折腾记 </tag>
            
            <tag> Git </tag>
            
            <tag> 服务器 </tag>
            
            <tag> Gitee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo博客】部署到腾讯云轻量应用服务器（使用宝塔面板）</title>
      <link href="/2021/11/20/2021-41/"/>
      <url>/2021/11/20/2021-41/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前博客一直用的 GitHubPage，因为墙的原因，有的时候网络真的卡到爆，既然前段时间双十一促销的时候买了腾讯的轻量应用服务器，就想着早点把博客弄上去，但也一拖再拖，今天得空，赶紧弄了吧。对了，顺便介绍一下我买的小服务器：</p><table><thead><tr><th align="center">操作系统</th><th align="center">CPU</th><th align="center">内存</th><th align="center">带宽</th></tr></thead><tbody><tr><td align="center">CentOS 7.8 64bit</td><td align="center">1核</td><td align="center">2GB</td><td align="center">5Mbps</td></tr></tbody></table><p>先说好，我的是轻量应用服务器，和云服务器是两个不同的产品，部分操作方式可能略有不同。</p><p>我在购买服务器时就选择了宝塔Linux面板腾讯云联合定制版，可以直接用，大家没安装宝塔面板的请安装。</p><p>本文在 Windows10 操作系统下演示。</p><hr><h1 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h1><h2 id="1-登录宝塔面板"><a href="#1-登录宝塔面板" class="headerlink" title="1.登录宝塔面板"></a>1.登录宝塔面板</h2><p>登录腾讯云控制台：<a href="https://console.cloud.tencent.com/">https://console.cloud.tencent.com/</a></p><p>点击访问轻量应用服务器：<a href="https://console.cloud.tencent.com/lighthouse">https://console.cloud.tencent.com/lighthouse</a></p><p>进入“应用管理”页面，点击“登录”按钮，即可弹出远程登录的黑框。</p><p>输入下方命令获取宝塔账号密码：</p><pre><code>sudo /etc/init.d/bt default</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[lighthouse@VM-16-16-centos ~]$ sudo /etc/init.d/bt default</span><br><span class="line">==================================================================</span><br><span class="line">BT-Panel default info!</span><br><span class="line">==================================================================</span><br><span class="line">外网面板地址: http://***********:8888/********</span><br><span class="line">内网面板地址: http://***********:8888/********</span><br><span class="line">*以下仅为初始默认账户密码，若无法登录请执行bt命令重置账户/密码登录</span><br><span class="line">username: ******</span><br><span class="line">password: ******</span><br><span class="line">If you cannot access the panel,</span><br><span class="line">release the following panel port [8888] <span class="keyword">in</span> the security group</span><br><span class="line">若无法访问面板，请检查防火墙/安全组是否有放行面板[8888]端口</span><br><span class="line">==================================================================</span><br></pre></td></tr></table></figure><p>进入“防火墙”页面，开启8888端口。</p><p>通过外网面板地址访问宝塔面板，输入宝塔账号密码。</p><p>我使用的是宝塔面板腾讯云联合定制版，接下来需关联腾讯云API密钥：</p><p>新建秘钥（<a href="https://console.cloud.tencent.com/cam/capi">https://console.cloud.tencent.com/cam/capi</a> ），在宝塔面板输入。</p><p>成功进入宝塔面板。</p><h2 id="2-添加站点"><a href="#2-添加站点" class="headerlink" title="2.添加站点"></a>2.添加站点</h2><p>点击左侧导航栏的“网站”，点击<code>添加站点</code>，</p><p>输入买的域名，点击<code>提交</code>，即可在 <code>/www/wwwroot/</code> 下生成相应同名文件夹。</p><p>点击该站点右边的<code>设置</code>，在<code>域名管理</code>中添加服务器公网IP地址。</p><h2 id="3-安装-Git"><a href="#3-安装-Git" class="headerlink" title="3.安装 Git"></a>3.安装 Git</h2><p>打开终端，两种方式使用终端：</p><ol><li>返回腾讯云服务器控制台，一键登录，即可弹出终端。（最简单，直接就能输命令。）</li><li>或者可以用宝塔的终端，但需要root密码，密码请前往<code>腾讯云服务器控制台</code> -&gt; <code>应用管理</code> -&gt; <code>关机</code> -&gt; <code>重置密码</code> -&gt; <code>开机</code> -&gt; <code>宝塔管理面板</code> -&gt; <code>终端</code> -&gt; <code>输入root密码</code> -&gt; <code>登录</code>。（第一次麻烦点，但以后就能直接在宝塔里用终端了）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure><pre><code>Loaded plugins: fastestmirror, langpacksRepository epel is listed more than once in the configurationDetermining fastest mirrorsepel                                                                         | 4.7 kB  00:00:00     extras                                                                       | 2.9 kB  00:00:00     os                                                                           | 3.6 kB  00:00:00     updates                                                                      | 2.9 kB  00:00:00     (1/4): extras/7/x86_64/primary_db                                            | 243 kB  00:00:00     (2/4): epel/7/x86_64/updateinfo                                              | 1.0 MB  00:00:00     (3/4): epel/7/x86_64/primary_db                                              | 7.0 MB  00:00:01     (4/4): updates/7/x86_64/primary_db                                           |  12 MB  00:00:01     Package git-1.8.3.1-23.el7_8.x86_64 already installed and latest versionNothing to do --&gt;</code></pre><p>查看 git 版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p>如果此时能查看到 git 的版本号，说明我们已经安装成功了。</p><h2 id="4-安装-Nginx"><a href="#4-安装-Nginx" class="headerlink" title="4.安装 Nginx"></a>4.安装 Nginx</h2><p>点击宝塔面板左侧导航栏的“软件商店”，下拉页面找到 Nginx 并安装，</p><p>我选的极速安装，当然你可以选编译安装。</p><p>安装完成，打开右边的绿色开关，将会把Nginx放在首页显示。</p><blockquote><p>当然你也可以通过终端命令执行 Nginx 的安装、启动、测试。</p></blockquote><p>浏览器输入服务器公网 IP 地址，若能够正常获取欢迎页面，说明 Nginx 安装成功。</p><p>宝塔面板会根据我们刚刚添加的站点自动为我们生成Nginx配置文件，一般无需改动。</p><hr><h1 id="二、Git-仓库搭建"><a href="#二、Git-仓库搭建" class="headerlink" title="二、Git 仓库搭建"></a>二、Git 仓库搭建</h1><p>之前推 Hexo 的静态文件都是推到 GitHub 的仓库，现在服务器也是一样，需要仓库来保存。</p><h2 id="1-添加一个用户git"><a href="#1-添加一个用户git" class="headerlink" title="1.添加一个用户git"></a>1.添加一个用户git</h2><p>打开终端，三行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adduser git   <span class="comment">#添加名字叫git的用户，我们用来做服务器库，方便将本地文件推送上去</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#然后给git 用户分配root 权限</span></span><br><span class="line">chmod 740 /etc/sudoers  <span class="comment">#改变sudoers文件的权限为文件所有者可写</span></span><br><span class="line">vim /etc/sudoers  <span class="comment">#打开sudoers文件文件</span></span><br></pre></td></tr></table></figure><p>方向键下滑找到<code>root ALL=(ALL) ALL</code>，<br>敲击键盘<code>i</code>进入插入模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在root ALL=(ALL) ALL 下方添加一行 </span></span><br><span class="line">git ALL=(ALL) ALL</span><br></pre></td></tr></table></figure><p>键盘<code>Esc</code>退出插入，<code>:wq</code>保存退出。</p><p>然后执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 /etc/sudoers  <span class="comment">#将其权限修改为文件所有者可读</span></span><br></pre></td></tr></table></figure><h2 id="2-给git用户添加ssh密钥"><a href="#2-给git用户添加ssh密钥" class="headerlink" title="2.给git用户添加ssh密钥"></a>2.给git用户添加ssh密钥</h2><p>这一步是为了建立主机与服务器连接，使其不需要密码也能登陆。</p><p>打开自己电脑的 Git Bash，在控制台中输入这行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;你的域名&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -t 指定密钥类型，默认是 rsa ，可以省略</span></span><br><span class="line"><span class="comment"># -C 用于识别这个密钥的注释，可以输入任何内容，也可以不写</span></span><br><span class="line"><span class="comment"># -f 指定密钥文件存储文件名，默认id_rsa</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果不想要上面这些，可以只输入 ssh-keygen</span></span><br></pre></td></tr></table></figure><p>输入完毕后按回车，程序会要求输入一个密码，输入完密码后按回车会要求再确认一次密码，如果不想要密码可以在要求输入密码的时候按两次回车，表示密码为空，并且确认密码为空，此时电脑的<code>c盘&gt;用户&gt;自己的用户名&gt;.ssh</code>目录下已经生成好了公钥 <code>id_rsa.pub</code> 文件。可以在 Bash 窗口通过<code>cd</code>命令和<code>vim</code>命令打开公钥 <code>id_rsa.pub</code>，添加密钥时需要复制那一坨字符。</p><p>打开宝塔面板终端，</p><p>添加密钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">su git  <span class="comment">#切换到git用户</span></span><br><span class="line">mkdir -p ~/.ssh  <span class="comment">#创建目录，-p 确保目录名称存在,不存在的就建一个。</span></span><br><span class="line">vim ~/.ssh/authorized_keys  <span class="comment">#创建并编辑authorized_keys文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 将本地电脑的 id_rsa.pub 文件打开后的那一大坨字符全部复制进去，保存退出</span></span><br></pre></td></tr></table></figure><p>修改权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">chmod 600 .ssh/authorized_keys  <span class="comment">#为authorized_keys文件赋予文件所有者可读可写的权限</span></span><br><span class="line">chmod 700 .ssh  <span class="comment">#为.ssh文件夹赋予文件夹所有者可读可写可执行的权限</span></span><br></pre></td></tr></table></figure><p>本地测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在本地电脑 Bash 窗口</span></span><br><span class="line">ssh -v git@SERVER</span><br><span class="line"><span class="comment"># 注意！别直接复制SERVER这个单词！@后面替换成服务器IP</span></span><br></pre></td></tr></table></figure><blockquote><p>用ssh -v去连有问题的服务器，会有比较详细的调试信息在屏幕上输出，可以帮助判断是哪一步出了问题。主要是看是客户端还是服务器的问题。如果是客户端的问题，应该log中有写。如果是没有什么有用信息，就可能是服务器端出问题了。</p></blockquote><p>若提示是否继续连接，输入yes回车即可：</p><pre><code>Are you sure you want to continue connecting (yes/no/[fingerprint])?</code></pre><p>如果不出现failed字样，说明成功。</p><h2 id="3-创建Git仓库"><a href="#3-创建Git仓库" class="headerlink" title="3.创建Git仓库"></a>3.创建Git仓库</h2><p>注意！上面我们创建的是一个名为git的用户，现在我们在git用户下创建一个git仓库，二者不同，不要搞混了！</p><p>创建 git 仓库，用于存放博客网站资源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">su root  <span class="comment">#切换到超级管理员</span></span><br><span class="line">mkdir /home/git/repos  <span class="comment">#新建目录（repository仓库的缩写），这是git仓库的位置</span></span><br><span class="line"><span class="built_in">cd</span> /home/git/repos</span><br><span class="line">git init --bare hexoBlog.git <span class="comment">#在repos目录下，初始化一个名为 hexoBlog 的空git储存库</span></span><br></pre></td></tr></table></figure><h2 id="4-配置钩子实现自动部署"><a href="#4-配置钩子实现自动部署" class="headerlink" title="4.配置钩子实现自动部署"></a>4.配置钩子实现自动部署</h2><p>自动部署是通过Git钩子实现的，在服务器上的裸仓库 hexoBlog.git 里创建一个钩子，在满足特定条件时将静态 HTML 文件传送到 Web 服务器的目录下。</p><p>在 <code>/home/git/repos/hexoBlog.git</code> 下，有一个自动生成的 <code>hooks</code> 文件夹，我们进入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> hexoBlog.git/hooks</span><br></pre></td></tr></table></figure><p>我们需要在里边新建一个新的钩子文件 <code>post-update</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi post-update</span><br></pre></td></tr></table></figure><!-- 宝塔面板文件中找到 `/home/git/repos/hexoBlog.git/hooks/post-update.sample`，改名成 `post-update`，内容原本是:  --><!-- #!/bin/sh## An example hook script to prepare a packed repository for use over# dumb transports.## To enable this hook, rename this file to "post-update".exec git update-server-info --><p>按<code>i</code>键进入文件的编辑模式，在该文件中我们要输入下边的两行代码（记得替换你上面创建的站点域名），指定 Git 的工作树（源代码）和 Git 目录（配置文件等）:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">git --work-tree=/www/wwwroot/你的站点域名 --git-dir=/home/git/repos/hexoBlog.git checkout -f</span><br></pre></td></tr></table></figure><p>然后，按<code>Esc</code>键退出编辑模式，输入<code>:wq</code> 保存退出。</p><p>然后修改文件权限，使得其可执行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git/repos/hexoBlog.git/hooks/</span><br><span class="line">chmod +x post-update  <span class="comment">#赋予其可执行权限</span></span><br><span class="line">chown -R git:git /home/git/repos/ <span class="comment">#仓库所有者改为git</span></span><br><span class="line">chown -R git:git /www/wwwroot/你的站点域名/ <span class="comment">#站点文件夹所有者改为git</span></span><br></pre></td></tr></table></figure><p>到这里，我们的 git 仓库算是完全搭建好了。</p><p>若想测试git仓库是否可用，可以在本地电脑桌面新建一个文件夹，右键选择“git bush here”，然后执行命令：（别忘了把下面server_ip替换成服务器IP地址）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@server_ip:/home/git/repos/hexoBlog.git</span><br></pre></td></tr></table></figure><p>出现下面两句话也请放心，这不是报错，：</p><pre><code>Cloning into &#39;hexoBlog&#39;...warning: You appear to have cloned an empty repository.</code></pre><p>只是提醒我们克隆的git储存库可能是空的，不过这当然了，因为才刚创建的。</p><p>打开这个新建的文件夹就会发现克隆成功的hexoBlog文件夹了，说明git仓库可用。</p><p>然后从桌面删掉这个测试用的新建文件夹吧。</p><hr><h1 id="三、修改本地电脑配置"><a href="#三、修改本地电脑配置" class="headerlink" title="三、修改本地电脑配置"></a>三、修改本地电脑配置</h1><p>打开本地的 hexo 博客所在文件夹，打开站点配置文件<code>_config.yml</code>（注意，不是主题的配置文件），下滑到最下面的部署代码做以下修改：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment（部署）</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@你的服务器IP地址:/home/git/repos/hexoBlog.git</span> <span class="comment">#服务器仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>然后打开本地的 hexo 博客所在文件夹，执行部署的三句命令：</p><pre><code>hexo cleanhexo generatehexo deploy</code></pre><p>打开你的公网 IP，看是不是已经部署成功了。</p><hr><h1 id="四、域名备案与解析"><a href="#四、域名备案与解析" class="headerlink" title="四、域名备案与解析"></a>四、域名备案与解析</h1><p>我的域名是从阿里云买的，</p><p>登录阿里云域名控制台：<a href="https://dc.console.aliyun.com/next/index">https://dc.console.aliyun.com/next/index</a></p><p>备案后解析到腾讯云服务器就行了。</p><hr><p><strong>参考教程:</strong></p><p>[1] : CSDN - <a href="https://blog.csdn.net/qq_43219561/article/details/116719535">将Hexo部署到云服务器（使用宝塔面板）</a></p><p>[2] : 算法小站<a href="https://www.fogsail.net/2018/02/22/20180222/">hexo博客部署到腾讯云服务器上</a></p><p>[3] : 腾讯云- <a href="https://cloud.tencent.com/developer/article/1599181">将个人博客迁移到云服务器上</a></p><p>[4] : 简书- <a href="https://www.jianshu.com/p/2790a860f151">Windows下生成SSH密钥</a></p><p>[5] : 简书 - <a href="https://www.jianshu.com/p/271449df801f">Hexo 教程：Hexo 博客部署到腾讯云教程</a></p><p>[6] : CSDN - <a href="https://blog.csdn.net/chivalrousli/article/details/77531617">ssh连接失败，排错经验</a></p><blockquote><p>因为之前没用过云服务器，没用过宝塔面板，没进行过SSH链接，没解析过域名……属于每一步都懵逼的状态。也由于找到的参考教程很多细节各不相同，让我真的很头疼，生怕哪一步走弯路，所以每个步骤都经过自己校对和尝试理解原理，然后写成了此篇笔记。</p><p>此外，想知道怎么把博客远程仓库地址从 GitHub 转移到 国内Gitee（码云）的可以去看我这篇文章 → <a href="https://barry-flynn.github.io/2021/11/24/2021-42/">【Hexo博客】远程仓库从GitHub换成Gitee</a></p></blockquote><hr><p>最后的最后，<br>真的很感谢在我脑子懵逼不知道干什么的时候<br>老弟<a href="">@提莫酱</a>的解答，<br>我问了那么多不懂的简单到极致的问题，<br>现在想来都不好意思了快……</p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客折腾记 </tag>
            
            <tag> 域名 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据库】第6章 关系数据库理论</title>
      <link href="/2021/11/14/2021-40/"/>
      <url>/2021/11/14/2021-40/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文所属《数据库系统原理》分类专栏，相关文章导航请点击<a href="https://barry-flynn.github.io/2021/09/29/2021-5/">《数据库系统原理》目录汇总贴</a></p></blockquote><hr><h1 id="（小结与习题）"><a href="#（小结与习题）" class="headerlink" title="（小结与习题）"></a>（小结与习题）</h1><p><strong>一、理解并给出下列术语的定义：</strong><br><strong>函数依赖、部分函数依赖、完全函数依赖、传递依赖、候选码、主码、外码、全码（all-key）、1NF、2NF、3NF、BCNF。</strong></p><ul><li><p>函数依赖<br>设R(U)是属性集上的关系模式，X，Y是U的子集。若对于R(U)的任意一个可能的关系r，r中不可能存在两个元组在X上的属性值相等，而在Y上的属性值不等，则称X函数确定Y，或Y函数依赖于X，记作X→Y。</p></li><li><p> 部分函数依赖<br>在R(U)中，如果X→Y，但Y不完全函数依赖于X，则称Y对X部分函数依赖。</p></li><li><p> 完全函数依赖<br>在R(U)中，如果X→Y，并且对于X的任何一个真子集X’，都有Y不函数依赖于X’，则称Y对X完全函数依赖。</p></li><li><p> 传递依赖<br>在R(U)中，如果X→Y（Y不属于X），X不函数依赖于Y，Y→Z（Z不属于Y）则称Z对X传递函数依赖。<br>U是完全函数依赖于K，而不是部分依赖于K。若U部分依赖于K，则K称为超码。候选码是最小的超码。</p></li><li><p> 候选码<br>设K为R&lt;U,F&gt;中的属性或者属性组合，若U完全函数依赖于K，则K为R的候选码。</p></li><li><p> 主码<br>若候选码多余一个，则选定其中的一个为主码。</p></li><li><p> 外码<br>关系模式R中属性或属性组X并非R的码，但X是另一个关系模式的码，则称X是R的外部码，也称外码。</p></li><li><p> 全码<br>关系模式R中整个属性组是码，称为全码。</p></li><li><p> 1NF<br>若关系模式R的每一个分量是不可再分的数据项，则关系模式R属于第一范式（1NF）。</p></li><li><p> 2NF<br>若R∈1NF，且每一个非主属性完全函数依赖于任何一个候选码，则R∈2NF。</p></li><li><p> 3NF<br>设关系模式R&lt;U,F&gt;∈1NF，若R中不存在这样的码X，属性组Y及非属性组Z（Z不是Y的子集），使得X→Y，Y→Z成立(X不函数依赖于Y)，则称R∈3NF。</p></li><li><p> BCNF<br>关系模式R&lt;U,F&gt;∈1NF，若X→Y且Y不属于X时，X必含有码，则R∈BCNF。</p></li><li><p>多值依赖<br>在关系模式中,函数依赖不能表示属性值之间的一对多联系,这些属性之间有些虽然没有直接关系,但存在间接的关系,把没有直接联系、但有间接的联系称为多值依赖的数据依赖。 </p></li><li><p>4NF<br>就是限制关系模式的属性之间不允许有非平凡且非函数依赖的多值依赖。</p></li></ul><p><strong>二、按题目要求建立一个关于系、学生、班级、学会等诸信息的关系数据库。</strong></p><ul><li><p>(1)关系模式如下：<br>学生： S(Sno，Sname，Sbirth ，Dept，Class，Rno)<br>班级： C(Class，Pname，Dept，Cnum，Cyear)<br>系： D(Dept，Dno，Office ，Dnum)<br>学会： M(Mname ，Myear，Maddr，Mnum)</p></li><li><p>(2) 每个关系模式的最小函数依赖集如下：</p><ul><li><p>学生 S (Sno，Sname，Sbirth ，Dept，Class，Rno) 的最小函数依赖集如下 :Sno Sname，<br>Sno Sbirth，Sno Class，Class Dept，DEPT Rno<br>传递依赖如下：<br>由于 Sno Dept，而 Dept Sno ，Dept Rno（宿舍区）<br>所以 Sno 与 Rno 之间存在着传递函数依赖。<br>由于 Class Dept，Dept Class，Dept Rno<br>所以 Class 与 Rno 之间存在着传递函数依赖。<br>由于 Sno Class，Class Sno，Class Dept<br>所以 Sno 与 Dept 之间存在着传递函数依赖。</p></li><li><p>班级 C(Class，Pname，Dept，Cnum，Cyear)的最小函数依赖集如下 :<br>Class Pname，Class Cnum，Class Cyear， Pname Dept.<br>由于 Class Pname，Pname Class，Pname Dept<br>所以 C1ass 与 Dept 之间存在着传递函数依赖。</p></li><li><p>系 D(Dept ，Dno，Office ，Dnum)的最小函数依赖集如下：<br>Dept Dno，Dno Dept， Dno Office ，Dno Dnum<br>根据上述函数依赖可知， Dept 与 Office ，Dept 与 Dnum 之间不存在传递依赖。</p></li><li><p>学会 M(Mname ，Myear， Maddr，Mnum) 的最小函数依赖集如下：<br>Mname Myear，Mname Maddr，Mname Mnum<br>该模式不存在传递依赖。</p></li></ul></li><li><p>(3) 各关系模式的候选码、外部码，全码如下：</p><ul><li>学生 S<br>候选码： Sno；外部码： Dept、Class；无全码</li><li>班级 C<br>候选码： Class；外部码： Dept；无全码</li><li>系 D<br>候选码： Dept 或 Dno；无外部码；无全码</li><li>学会 M<br>候选码： Mname；无外部码；无全码</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 《数据库系统概论》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据库】第5章 数据库完整性</title>
      <link href="/2021/11/14/2021-39/"/>
      <url>/2021/11/14/2021-39/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文所属《数据库系统原理》分类专栏，相关文章导航请点击<a href="https://barry-flynn.github.io/2021/09/29/2021-5/">《数据库系统原理》目录汇总贴</a></p></blockquote><p>一、数据库的完整性是指数据的<strong>正确性</strong>和<strong>相容性</strong>。</p><ul><li><p>数据的正确性：是指数据是符合现实世界语义，反映了当前实际状况的</p></li><li><p>数据的相容性：是指数据库同一对象在不同关系表中的数据是符合逻辑的</p></li></ul><p>二、数据的完整性和安全性是两个不同概念：</p><ul><li><p>数据的完整性：防止数据库中存在不符合语义的数据，也就是防止数据库中存在不正确的数据。<br>防范对象：不合语义的、不正确的数据。</p></li><li><p>数据的安全性：保护数据库 防止恶意的破坏和非法的存取。<br>防范对象：非法用户和非法操作。</p></li></ul><h1 id="一、实体完整性"><a href="#一、实体完整性" class="headerlink" title="一、实体完整性"></a>一、实体完整性</h1><h2 id="1-定义实体完整性"><a href="#1-定义实体完整性" class="headerlink" title="1.定义实体完整性"></a>1.定义实体完整性</h2><p>关系模型的实体完整性：<code>CREATE  TABLE</code>中用<code>PRIMARY KEY</code>定义</p><p>①单属性构成的码有两种说明方法</p><ul><li>定义为列级约束条件</li><li>定义为表级约束条件</li></ul><p>②对多个属性构成的码只有一种说明方法</p><ul><li>定义为表级约束条件</li></ul><h2 id="2-实体完整性检查和违约处理"><a href="#2-实体完整性检查和违约处理" class="headerlink" title="2.实体完整性检查和违约处理"></a>2.实体完整性检查和违约处理</h2><p>插入或对主码列进行更新操作时，关系数据库管理系统按照实体完整性规则自动进行检查。包括：</p><ul><li>检查主码值是否唯一，如果不唯一则拒绝插入或修改</li><li>检查主码的各个属性是否为空，只要有一个为空就拒绝插入或修改</li></ul><h1 id="二、参照完整性"><a href="#二、参照完整性" class="headerlink" title="二、参照完整性"></a>二、参照完整性</h1><h2 id="1-定义参照完整性"><a href="#1-定义参照完整性" class="headerlink" title="1.定义参照完整性"></a>1.定义参照完整性</h2><p>关系模型的参照完整性</p><ul><li>在<code>CREATE  TABLE</code>中用<code>FOREIGN KEY</code>短语定义哪些列为外码</li><li>用<code>REFERENCES（引用）</code>短语指明这些外码参照哪些表的主码</li></ul><h2 id="2-参照完整性检查和违约处理"><a href="#2-参照完整性检查和违约处理" class="headerlink" title="2.参照完整性检查和违约处理"></a>2.参照完整性检查和违约处理</h2><p>一个参照完整性将两个表中的相应元组联系起来,对被参照表和参照表进行增删改操作时有可能破坏参照完整性，必须进行检查以保证两个表的相容性。</p><p>参照完整性违约处理：</p><p>（1） <strong>拒绝（NO ACTION）执行</strong><br>不允许该操作执行。该策略一般设置为默认策略。</p><p>（2） <strong>级联（CASCADE）操作</strong><br>当删除或修改被参照表（Student）的一个元组造成了与参照表（SC）的不一致，则删除或修改参照表中的所有造成不一致的元组。</p><p>（3）<strong>设置为空值（SET-NULL）</strong><br>当删除或修改被参照表的一个元组时造成了不一致，则将参照表中的所有造成不一致的元组的对应属性设置为空值。</p><p>对于参照完整性，除了应该定义外码，还应定义外码列是否允许空值。</p><h1 id="三、用户定义的完整性"><a href="#三、用户定义的完整性" class="headerlink" title="三、用户定义的完整性"></a>三、用户定义的完整性</h1><p>用户定义的完整性是：针对某一具体应用的数据必须满足的语义要求。关系数据库管理系统提供了定义和检验用户定义完整性的机制，不必由应用程序承担。</p><h2 id="1-属性上的约束条件"><a href="#1-属性上的约束条件" class="headerlink" title="1.属性上的约束条件"></a>1.属性上的约束条件</h2><p>在<code>CREATE TABLE</code>中定义属性时，可以定义属性上的约束条件，即属性值限制，包括：</p><ul><li>列值非空（NOT NULL）</li><li>列值唯一（UNIQUE）</li><li>检查列值是否满足一个条件表达式（CHECK短语）</li></ul><p>往表中插入元组或修改属性时，若不满足约束条件，则操作拒绝执行。</p><h2 id="2-元组上的约束条件"><a href="#2-元组上的约束条件" class="headerlink" title="2.元组上的约束条件"></a>2.元组上的约束条件</h2><p>在<code>CREATE TABLE</code>时可以用<code>CHECK短语</code>定义元组上的约束条件，即元组级的限制。</p><p>同属性值限制相比，元组级的限制可以设置不同属性之间的取值的相互约束条件。</p><p>往表中插入元组或修改属性时，若不满足约束条件，则操作拒绝执行。</p><h1 id="完整性约束命名子句"><a href="#完整性约束命名子句" class="headerlink" title="完整性约束命名子句"></a>完整性约束命名子句</h1><p>除了在<code>CREATE TABLE</code>定义完整性约束，还能用完整性约束命名子句<code>CONSTRAINT</code>对完整性约束条件命名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CONSTRAINT</span> <span class="operator">&lt;</span>完整性约束条件名<span class="operator">&gt;</span><span class="operator">&lt;</span>完整性约束条件<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>&lt;完整性约束条件&gt;包括<code>NOT NULL</code>、<code>UNIQUE</code>、<code>PRIMARY KEY短语</code>、<code>FOREIGN KEY短语</code>、<code>CHECK短语</code>等。</p><p>使用<code>ALTER TABLE</code>语句修改表中的完整性限制。</p><h1 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h1><p>在SQL中，可以使用 <code>CREATE ASSERTION</code>语句，通过声明性断言来指定更具一般性的约束。可以定义涉及多个表的或聚集操作的比较复杂的完整性约束。断言创建以后，任何对断言中所涉及的关系的操作都会触发关系数据库管理系统对断言的检查，任何使断言不为真值的操作都会被拒绝执行。</p><p><strong>创建断言的语句格式：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> ASSERTION<span class="operator">&lt;</span>断言名<span class="operator">&gt;</span><span class="operator">&lt;</span><span class="keyword">CHECK</span> 子句<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>每个断言都被赋予一个名字，&lt;CHECK 子句&gt;中的约束条件与WHERE子句的条件表达式类似。</p><p><strong>删除断言的语句格式为：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> ASSERTION <span class="operator">&lt;</span>断言名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><p>如果断言很复杂，则系统在检测和维护断言的开销较高，这是在使用断言时应该注意的。</p><h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><p>触发器（Trigger）是用户定义在关系表上的一类由事件驱动的特殊过程</p><ul><li>触发器保存在数据库服务器中</li><li>任何用户对表的增、删、改操作均由服务器自动激活相应的触发器</li><li>触发器可以实施更为复杂的检查和操作，具有更精细和更强大的数据控制能力</li></ul><h2 id="1-定义触发器"><a href="#1-定义触发器" class="headerlink" title="1.定义触发器"></a>1.定义触发器</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> <span class="operator">&lt;</span>触发器名<span class="operator">&gt;</span> </span><br><span class="line"></span><br><span class="line">&#123;BEFORE <span class="operator">|</span> AFTER&#125; <span class="operator">&lt;</span>触发事件<span class="operator">&gt;</span> <span class="keyword">ON</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">REFERENCING</span> <span class="keyword">NEW</span><span class="operator">|</span><span class="keyword">OLD</span> <span class="type">ROW</span> <span class="keyword">AS</span><span class="operator">&lt;</span>变量<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span>  &#123;<span class="type">ROW</span> <span class="operator">|</span> STATEMENT&#125;</span><br><span class="line"></span><br><span class="line">[<span class="keyword">WHEN</span> <span class="operator">&lt;</span>触发条件<span class="operator">&gt;</span>]<span class="operator">&lt;</span>触发动作体<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-激活触发器"><a href="#2-激活触发器" class="headerlink" title="2.激活触发器"></a>2.激活触发器</h2><p>触发器的执行，是由触发事件激活的，并由数据库服务器自动执行</p><p>一个数据表上可能定义了多个触发器，遵循如下的执行顺序:</p><p>（1） 执行该表上的BEFORE触发器;</p><p>（2） 激活触发器的SQL语句;</p><p>（3） 执行该表上的AFTER触发器。</p><h2 id="3-删除触发器"><a href="#3-删除触发器" class="headerlink" title="3.删除触发器"></a>3.删除触发器</h2><p>删除触发器的SQL语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> <span class="operator">&lt;</span>触发器名<span class="operator">&gt;</span> <span class="keyword">ON</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><p>触发器必须是一个已经创建的触发器，并且只能由具有相应权限的用户删除。</p><hr><h1 id="（小结与习题）"><a href="#（小结与习题）" class="headerlink" title="（小结与习题）"></a>（小结与习题）</h1><p><strong>1.什么是数据库的完整性?</strong></p><p>数据库的完整性是指数据的正确性和相容性。</p><p><strong>2.数据库的完整性概念与数据库的安全性概念有什么区别和联系?</strong></p><p>数据的完整性和安全性是两个不同的概念,但是有一定的联系。前者是为了防止数据库中存在不符合语义的数据,防止错误信息的输入和输出，即所谓垃圾进垃圾出(GarbageInGarbageOut)所造成的无效操作和错误结果。后者是保护数据库防止恶意的破坏和非法的存取。也就是说,安全性措施的防范对象是非法用户和非法操作,完整性措施的防范对象是不合语义的数据。</p><p><strong>3.什么是数据库的完整性约束条件?</strong></p><p>完整性约束条件是指数据库中的数据应该满足的语义约束条件。一般可以分为六类:静态列级约束、静态元组约束、静态关系约束、动态列级约束、动态元组约束、动态关系约束。</p><p><strong>4.关系数据库管理系统的完整性控制机制应具有哪三方面的功能?</strong></p><p>DBMS的完整性控制机制应具有三个方面的功能:</p><p>(1) 定义功能，即提供定义完整性约束条件的机制;</p><p>(2) 检查功能，即检查用户发出的操作请求是否违背了完整性约束条件;</p><p>(3) 违约反应，如果发现用户的操作请求使数据违背了完整性约束条件,则采取一定的动作来保证数据的完整性。</p><p><strong>5.关系数据库管理系统在实现参照完整性时需要考虑哪些方面</strong>?</p><p>RDBMS在实现参照完整性时需要考虑以下几个方面:</p><p>(1)外码是否可以接受空值。</p><p>(2)删除被参照关系的元组时的考虑,这时系统可能采取的作法有三种:</p><ul><li>1)级联删除(CASCADES)</li></ul><p>2)受限删除(RESTRICTED)<br>3)置空值删除(NULLIFIES)</p><p>(3)在参照关系中插入元组时的问题,这时系统可能采取的作法有:</p><ul><li>1)受限插入</li></ul><p>2)递归插入。</p><p>(4)修改关系中主码的问题。一般是不能用UPDATE语句修改关系主码的。如果需要修改主码值,只能先删除该元组,然后再把具有新主码值的元组插入到关系中。如果允许修改主码,首先要保证主码的惟一性和非空,否则拒绝修改。然后要区分是参照关系还是被参照关系。</p><p><strong>6.假设有下面两个关系模式:</strong></p><p><strong>职工(职工号，姓名，年龄，职务，工资，部门号)，其中职工号为主码；</strong><br><strong>部门(部门号，名称，经理名，电话)，其中部门号为主码。</strong></p><p><strong>用SQL语言定义这两个关系模式，要求在模式中完成以下完整性约束条件的定义:</strong></p><p><strong>(1)定义每个模式的主码；(2)定义参照完整性；(3)定义职工年龄不得超过60岁。</strong></p><p>职工表定义：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TABIE Workers</span><br><span class="line">( Wno NUMBER (<span class="number">4</span>),</span><br><span class="line">Wname <span class="type">VARCHAR</span> (<span class="number">10</span>),</span><br><span class="line">WAge NUMBER (<span class="number">2</span>),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> Cl <span class="keyword">CHECK</span> (WAge<span class="operator">&lt;=</span><span class="number">60</span>),</span><br><span class="line">Job <span class="type">VARCHAR</span>(<span class="number">9</span>),</span><br><span class="line">Sal NUMBER(<span class="number">7</span>, <span class="number">2</span>),</span><br><span class="line">Deptno NUMBER (<span class="number">2</span>),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> WKey <span class="keyword">FOREIGN</span> KEY (Deptno)</span><br><span class="line"><span class="keyword">REFERENCES</span> DEPT (Deptno)) ;</span><br></pre></td></tr></table></figure><p>部门表定义：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> DEPT</span><br><span class="line">(Deptno NUMBER(<span class="number">2</span>),</span><br><span class="line">Dname <span class="type">VARCHAR</span> (<span class="number">10</span>),</span><br><span class="line">Manager <span class="type">VARCHAR</span> (<span class="number">10</span>),</span><br><span class="line">phoneNum <span class="type">VARCHAR</span>(<span class="number">11</span>)</span><br><span class="line"><span class="keyword">CONSTRAINT</span> DKey <span class="keyword">PRIMARY</span> KEY (Deptno)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>7.在关系系统中，当操作违反实体完整性、参照完整性和用户定义的完整性约束条件时，一般是如何分别进行处理的?</strong></p><p>对于违反实体完整性和用户定义的完整性的操作一般都采用拒绝执行的方式进行处理。而对于违反参照完整性的操作,并不都是简单地拒绝执行,有时要根据应用语义执行一些附加的操作,以保证数据库的正确性。</p><p><strong>8.某单位想举行一个小型的联谊会，关系Male记录注册的男宾信息，关系Female记录注册的女宾信息。建立一个断言，将来宾的人数限制在50人以内。(提示，先创建关系Female和关系Male。)</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Female</span><br><span class="line">( Fno <span class="type">CHAR</span>(<span class="number">10</span>) <span class="keyword">PRIMARY</span> KEY</span><br><span class="line">Fname <span class="type">CHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">Fage <span class="type">SMALLINT</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Male</span><br><span class="line">( Mno <span class="type">CHAR</span>(<span class="number">10</span>) <span class="keyword">PRIMARY</span> KEY</span><br><span class="line">Mname <span class="type">CHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">Mage <span class="type">SMALLINT</span> );</span><br></pre></td></tr></table></figure><p>断言代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> ASSERTION Pcount</span><br><span class="line"><span class="keyword">CHECK</span>(<span class="number">50</span><span class="operator">&gt;=</span>(<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Male</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Female)</span><br><span class="line"><span class="keyword">AS</span> num);</span><br></pre></td></tr></table></figure><hr><p>参考博文：</p><p>CSDN - <a href="https://blog.csdn.net/Flora_SM/article/details/84578148">https://blog.csdn.net/Flora_SM/article/details/84578148</a></p><p>CSDN - <a href="https://blog.csdn.net/weixin_45348240/article/details/105938868">https://blog.csdn.net/weixin_45348240/article/details/105938868</a></p>]]></content>
      
      
      <categories>
          
          <category> 《数据库系统概论》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【日记】第一次买域名和服务器啦~</title>
      <link href="/2021/11/12/2021-38/"/>
      <url>/2021/11/12/2021-38/</url>
      
        <content type="html"><![CDATA[<h1 id="1-我当初为啥搭建博客"><a href="#1-我当初为啥搭建博客" class="headerlink" title="1.我当初为啥搭建博客"></a>1.我当初为啥搭建博客</h1><p>&emsp;&emsp;在今年 5 月 31 日吧，我不知道怎么就混进了保罗的群里。也正是从那时候，我开始看到了自己和其他人的巨大差距。</p><p>&emsp;&emsp;刚开始进群的那段时间，我还不太适应，因为他们互相聊天的内容里时常夹杂着我看不懂的专业词汇。我每次看群的时候都皱着眉头，真的感觉亚历山大，甚至我会把他们聊天过程中的一个个英文词复制后去百度搜索……</p><p>&emsp;&emsp;后来吧，我看到群里大家的群昵称很多都加上了他们自己的博客地址，每一个都做的很精美，而当时大一的我，还只会使用并且只知道CSDN博客……</p><p>&emsp;&emsp;当时十分感叹，原来，有那么多人都是用个人博客来进行技术分享与结交朋友的啊，是我孤陋寡闻了，以为只有用微信/QQ/微博等社交软件才叫线上社交…..</p><p>&emsp;&emsp;而“博客”，这个当时对我来说原本很陌生的词汇（我只知道“新浪微博”是属于“微博客”类型的服务，而“博客”这个的东西我以前一度以为是被世界淘汰的互联网旧产物），开始在我心里种下了种子。终于，三个月后，我心血来潮也搭建了属于我自己的博客网站。</p><p>&emsp;&emsp;我的这个博客诞生于今年九月初左右的时候，由于也是第一次接触搭建博客网站，为了图省钱和方便，没有买域名和服务器，而是跟着网上的教程用 Hexo 框架搭建了 Butterfly 主题的博客。一直以来我用的是 GitHub 的免费二级域名（<code>https://用户名.github.io</code>），然后使用的 GitHubPages 服务进行静态的展示。</p><p>&emsp;&emsp;不得不提一句，当时在部署完之后，第一次通过地址栏输入链接成功看到自己的博客网站的心情，不亚于大一时候第一次用 C语言跑通 <code>Hello World!</code> 的心情。</p><p>&emsp;&emsp;就是那种……发自内心深处的激动和狂喜，真的很难忘。</p><h1 id="2-我现在为啥要买域名和服务器"><a href="#2-我现在为啥要买域名和服务器" class="headerlink" title="2.我现在为啥要买域名和服务器"></a>2.我现在为啥要买域名和服务器</h1><p>&emsp;&emsp;那么我现在为啥下定决心买域名和服务器呢，其实原因很多。</p><p>&emsp;&emsp;前段时间想跟保罗互加友链，结果被拒绝了，因为他不接受二级域名……啊这…当时想的是那不加算了，也不是多急迫的事情，以后买了域名再加嘛，友链不友链的也无所谓其实。因为我也通过之前看另一个大佬（张洪Heo）的博客得知，用 GitHub 的二级域名建网站是不太正式的，所以被拒绝加友链也无可厚非。（其实还是因为我人又菜，又跟人家保罗玩的不熟罢了……）</p><p>&emsp;&emsp;其次是这段时间 YangLu(学委) 收作业的时候是用的 XvXin 的服务器，就让我感觉特别好玩，想着以后自己也买台用用。</p><p>&emsp;&emsp;最大的原因其实还是因为提莫吧，估计没他催我也不会买这么快，毕竟我又懒又不想花钱（抠鼻.jpg）。这不，被提莫这臭弟弟催了好长时间了，几乎每次我在保罗群里说话都@我对我说“<code>买玉米，快买玉米！</code>”（买域名），也真是够执着的，哈哈~</p><p>&emsp;&emsp;然后也因为双十一搞活动嘛，腾讯服务器打折，就把服务器买下来了。</p><table><thead><tr><th align="center">时间</th><th align="center">业务</th><th align="center">平台</th><th align="center">时长</th><th align="center">价格</th><th align="center">到期时间</th></tr></thead><tbody><tr><td align="center">2021-11-09</td><td align="center">注册域名<code>meta-code.top</code></td><td align="center">阿里云</td><td align="center">5年</td><td align="center">-99 ¥</td><td align="center">2026-11-09</td></tr><tr><td align="center">2021-11-12</td><td align="center">创建轻量应用服务器</td><td align="center">腾讯云</td><td align="center">3年</td><td align="center">-144 ¥</td><td align="center">2024-11-12</td></tr></tbody></table><p>&emsp;&emsp;至于域名为什么取这个名字，因为最近不是那个库克创办的 <code>FaceBook</code> 的母公司改名成 <code>Meta</code> 了么，然后“<code>元宇宙</code>”这个概念也被炒起来了，所以就蹭了一下 “Meta（元）” 这个词，起了<code>Metacode</code>（元代码）这个名字作为了域名，而且还谐音“<code>源代码</code>”，嘻嘻~</p><p>&emsp;&emsp;后缀选<code>.top</code>以及域名用横线隔开的原因是因为<code>metacode.com</code>、<code>meta-code.com</code>、<code>metacode.cn</code>、<code>meta-code.cn</code>、<code>metacode.top</code>都被人注册过了啊！！！只剩下了个<code>meta-code.top</code>，好惨……</p><h1 id="3-最后想说"><a href="#3-最后想说" class="headerlink" title="3.最后想说"></a>3.最后想说</h1><p>&emsp;&emsp;最后想说，百里飞洋你赶快加大马力地学习吧！要不然花了这几百大洋的东西都浪费啦！尤其是50G的服务器，闲置着真的浪费……抽空赶紧把域名解析上去吧。</p><p>&emsp;&emsp;然后非常谢谢臭提莫催我买域名的执着，让我提前走出这一步。（苦笑.jpg）</p><p>&emsp;&emsp;以后老子也是有域名和服务器的人啦哇哈哈哈哈哈哈哈哈哈哈（原形毕露）……</p>]]></content>
      
      
      <categories>
          
          <category> 【我的日常】 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域名 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【并行计算】用OpenMP语句处理循环间的依赖关系</title>
      <link href="/2021/11/11/2021-37/"/>
      <url>/2021/11/11/2021-37/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>如何通过两个线程实现并行加速下方循环体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">2</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">    a[i] = a[i<span class="number">-2</span>]+<span class="number">4</span>;</span><br></pre></td></tr></table></figure><p><strong>提示</strong>：通过将循环分解为多个循环，使各循环间不存在这样的依赖关系。</p><h1 id="做题分析"><a href="#做题分析" class="headerlink" title="做题分析"></a>做题分析</h1><p>可以将该循环按奇偶数转化为两个循环：</p><pre><code>// 偶数a[2]=a[0]+4a[4]=a[2]+4a[6]=a[4]+4......// 奇数a[3]=a[1]+4a[5]=a[3]+4a[7]=a[5]+4......</code></pre><p>于是就拆解成了如下两个循环：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">2</span>; i &lt; <span class="number">20</span>; i = i+<span class="number">2</span>)</span><br><span class="line">    a[i] = a[i<span class="number">-2</span>]+<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">3</span>; i &lt; <span class="number">20</span>; i = i+<span class="number">2</span>)</span><br><span class="line">    a[i] = a[i<span class="number">-2</span>]+<span class="number">4</span>;</span><br></pre></td></tr></table></figure><h1 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;omp.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> n 20</span></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> a[n], i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">        a[i]=i;</span><br><span class="line">    omp_set_num_threads(<span class="number">4</span>);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">pragma</span> omp parallel num_threads(2)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">pragma</span> omp for schedule(static,1)</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">2</span>; i&lt;n; i++)</span><br><span class="line">            a[i]=a[i<span class="number">-2</span>]+<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">pragma</span> omp parallel</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">pragma</span> omp critical</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d:\n&quot;</span>,omp_get_thread_num());</span><br><span class="line">                <span class="keyword">for</span>(i=<span class="number">2</span>; i&lt;n; i++)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[i]-a[i<span class="number">-2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>头文件中：</p><p>用<code>&lt;stdio.h&gt;</code>时搜索的顺序：<code>系统目录–&gt;环境变量目录–&gt;用户自定义目录</code></p><p>用<code>&quot;stdio.h&quot;</code>时搜索的顺序：<code>用户自定义目录–&gt;系统目录–&gt;环境变量目录</code></p><p>至于这区别带来的影响就是效率问题。如果一个你自己定义的头文件，你用&lt;&gt;来包含，那么搜索这个头文件时，将会先从系统目录查找。其实这个头文件可能就在你的工程目录下，但是还是要把系统目录搜索一遍，这样，自然就降低效率了。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 【高性能并行计算】 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高性能计算 </tag>
            
            <tag> 并行计算 </tag>
            
            <tag> OpenMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言】函数</title>
      <link href="/2021/11/11/2021-36/"/>
      <url>/2021/11/11/2021-36/</url>
      
        <content type="html"><![CDATA[<h1 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a>库函数</h1><p>C语言为我们提供了上百个可调用的库函数，例如与字符串有关的 <code>strlen</code>, <code>strcat</code>, <code>strlwr</code> ，或是刚接触C语言时候用到的 <code>printf</code>, <code>scanf</code>, 这些都是c语言为我们提供的。在我们使用某一库函数的时候，需要在程序中嵌入该函数所需要的头文件(<code>#include&lt;&gt;</code>)。</p><p>这也就是为啥我们在代码开头都需要写上<code>#include &lt;stdio.h&gt;</code>，因为 <code>printf</code>, <code>scanf</code>，<code>getchar</code>,<code>gets</code>,<code>putchar()</code>这些函数 (也称作标准I/O函数)，都是在stdio头文件中。</p><h1 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h1><p>自定义函数是程序员为了完成某项任务而编写的函数，目的是为了实现某项的功能或让主程序更简洁。程序员在使用自定义函数之前，必须先声明和定义。</p><h1 id="函数的定义和调用"><a href="#函数的定义和调用" class="headerlink" title="函数的定义和调用"></a>函数的定义和调用</h1><p>如下方程序中定义了一个累加函数<code>sum</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span>    <span class="comment">//函数头</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i=begin; i&lt;=end; i++)&#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d到%d的和是%d\n&quot;</span>,begin,end,sum)</span><br><span class="line">&#125;   <span class="comment">//函数体</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中函数头分为：</p><pre><code>void sum(int begin, int end)返回类型 函数名 (参数表)</code></pre><p>圆括号<code>()</code>起到了函数调用的重要作用，即使没有参数也要加。如果有参数，则需要给出正确的数量和顺序，这些值会被按照顺序依次用来初始化函数中的对应参数。</p><blockquote><p>C语言不允许函数的嵌套定义</p></blockquote><hr><p>下面对该累加函数进行调用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span>    <span class="comment">//定义了两个参数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i=begin; i&lt;=end; i++)&#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d到%d的和是%d\n&quot;</span>,begin,end,sum)</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum(<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line">    sum(<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line">    sum(<span class="number">35</span>,<span class="number">45</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="从函数中返回"><a href="#从函数中返回" class="headerlink" title="从函数中返回"></a>从函数中返回</h1><p>return语句用来指明函数将返回给主调函数的值是什么。</p><ul><li><p>如果定义的是void无类型的函数，可以不用返回值；</p></li><li><p>如果定义的函数有返回值，那么需要带值的<code>return</code>。</p></li></ul><p>如下方自定义函数就需要返回值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b)&#123;</span><br><span class="line">        ret = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        ret = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h1><p>就是把自定义的函数头拿出来加上分号一般把函数原型写在调用它的函数前面，目的是告诉编译器这个函数长什么样子。</p><p>如下面就是刚刚那个累加函数的函数原型：</p><pre><code>void sum(int begin, int end);</code></pre><p>对于原型声明来说，编译器不检查函数的名称，只是检查参数的类型是否与函数头中的定义一致，因此写成下面的几种都无所谓。但对于程序员来说，参数写成与定义函数时一样的话是更直观易读的。</p><pre><code>void sum(int , int );void sum(int a, int b);void sum(int begin, int end);</code></pre><h1 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h1><blockquote><p>关于函数的参数，在很多教程中有很多说法，如“形参”、“实参”、“值传递”、“地址传递”、“引用”等，这些说法把简单的概念复杂化了，而且容易造成误导，可以不予理会。</p></blockquote><p>需要记住的是，C语言在调用函数时，永远只能传值给函数内的参数。函数内的函数名获得该值后，只在该函数内部进行运算等操作，即使参数名称与其他函数中的一样，也与其他函数无任何关系，是“局部变量”（本地变量）。</p><h1 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h1><p>被花括号括起来的区域叫<code>语句块</code>。</p><p>不在任何语句块内定义的变量称为<code>全局变量</code>，作用域为整个程序。</p><p>在除整个程序以外的其他语句块内定义的变量，称为<code>局部变量</code>。</p><h1 id="变量的储存类型"><a href="#变量的储存类型" class="headerlink" title="变量的储存类型"></a>变量的储存类型</h1><p>变量的储存类型是指编译器为变量分配内存的方式，它决定变量的<strong>生存期</strong>，决定变量何时生何时灭。C语言提供了以下几种不同的储存类型：</p><ol><li>自动变量</li><li>静态变量</li><li>外部变量</li><li>寄存器变量</li></ol><h2 id="（1）自动变量"><a href="#（1）自动变量" class="headerlink" title="（1）自动变量"></a>（1）自动变量</h2><p>标准定义格式：</p><pre><code>auto 类型名 变量名;</code></pre><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> <span class="keyword">int</span> temp</span><br></pre></td></tr></table></figure><p>其中auto可以省略不写，也就是说若没有指定变量储存类型，那么C语言就缺省为auto。</p><ul><li><p>自动变量在定义时不会自动初始化，即初值是随机乱码。</p></li><li><p>自动变量在退出函数后，其分配的内存自动被释放，即再次进入该语句块，该变量不会保持上次退出的值。</p></li></ul><p>因此，自动变量又称为动态局部变量。</p><h2 id="（2）静态变量"><a href="#（2）静态变量" class="headerlink" title="（2）静态变量"></a>（2）静态变量</h2><p>也就是静态局部变量，它能够保持住某语句块内某变量的值，下一次进入该函数时还是上次退出时的值，整个程序退出时才释放内存。</p><pre><code>static 类型名 变量名;</code></pre><h2 id="（3）外部变量"><a href="#（3）外部变量" class="headerlink" title="（3）外部变量"></a>（3）外部变量</h2><p>如果在所有函数之外定义的变量没有指定其储存类别，那么它就是一个外部变量，是全局变量。如果要在定义点之前或者其他文件中使用它，那么就需要对其进行声明（注意不是定义，编译器不对其分配内存地址）：</p><pre><code>extern 类型名 变量名;</code></pre><p>外部变量保存在静态储存区内，在程序运行期间分配固定的储存单元，其生存期是整个程序的运行期。没有显式初始化的外部变量由编译器自动初始化为0。</p><h2 id="（4）寄存器变量"><a href="#（4）寄存器变量" class="headerlink" title="（4）寄存器变量"></a>（4）寄存器变量</h2><p>就是用寄存器储存的变量，定义格式：</p><pre><code>register 类型名 变量名;</code></pre><p>将使用频率较高的变量声明为 register 指定，可以避免CPU对储存器的频繁数据访问，使程序更小、执行速度更快。现代编译器能自动优化程序，一般无需我们自己特别声明。</p>]]></content>
      
      
      <categories>
          
          <category> 《C语言程序设计》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据库】第4章 数据库安全性</title>
      <link href="/2021/11/09/2021-35/"/>
      <url>/2021/11/09/2021-35/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文所属《数据库系统原理》分类专栏，相关文章导航请点击<a href="https://barry-flynn.github.io/2021/09/29/2021-5/">《数据库系统原理》目录汇总贴</a></p></blockquote><h1 id="1-数据库安全性概述"><a href="#1-数据库安全性概述" class="headerlink" title="1.数据库安全性概述"></a>1.数据库安全性概述</h1><p><strong>数据库的不安全因素：</strong></p><ol><li><p>非授权用户对数据库的恶意存取和破坏</p></li><li><p>数据库中重要或敏感的数据被泄露</p></li><li><p>安全环境的脆弱性</p></li></ol><p><strong>紫皮书（TCSEC/TDI）从四个方面来描述安全性级别划分的指标：</strong></p><ol><li><p>安全策略</p></li><li><p>责任</p></li><li><p>保证</p></li><li><p>文档</p></li></ol><p><strong>紫皮书（TCSEC/TDI）安全级别划分：</strong></p><p>（按系统可靠或可信程度逐渐增高）</p><pre><code>DC（C1，C2）B（B1，B2，B3）A（A1）</code></pre><blockquote><p>各安全级别之间具有一种偏序向下兼容的关系，即较高安全性级别提供的安全保护要包含较低级别的所有保护要求，同时提供更多或更完善的保护能力</p></blockquote><h1 id="2-数据库安全性控制"><a href="#2-数据库安全性控制" class="headerlink" title="2.数据库安全性控制"></a>2.数据库安全性控制</h1><p><strong>数据库安全性控制的常用方法：</strong></p><ol><li><p>用户标识和鉴定</p></li><li><p>存取控制</p></li><li><p>视图</p></li><li><p>审计</p></li><li><p>数据加密</p></li></ol><h2 id="2-1-用户身份鉴别的方法"><a href="#2-1-用户身份鉴别的方法" class="headerlink" title="2.1 用户身份鉴别的方法"></a>2.1 用户身份鉴别的方法</h2><ol><li><p>静态口令鉴别</p><p> 静态口令一般由用户自己设定，这些口令是静态不变的</p></li><li><p>动态口令鉴别</p><p> 口令是动态变化的，每次鉴别时均需使用动态产生的新口令登录数据库管理系统，即采用一次一密的方法</p></li><li><p>生物特征鉴别</p><p> 通过生物特征进行认证的技术，生物特征如指纹、虹膜和掌纹等</p></li><li><p>智能卡鉴别</p><p> 智能卡是一种不可复制的硬件，内置集成电路的芯片，具有硬件加密功能</p></li></ol><h2 id="2-2-存取控制"><a href="#2-2-存取控制" class="headerlink" title="2.2 存取控制"></a>2.2 存取控制</h2><p><strong>存取控制机制主要包括：</strong></p><ol><li><p>定义用户权限</p></li><li><p>合法权限检查</p></li></ol><p>C2级的数据库管理系统支持：自主存取控制；</p><p>B1级的数据库管理系统支持：强制存取控制。</p><h3 id="》自主存取控制"><a href="#》自主存取控制" class="headerlink" title="》自主存取控制"></a>》自主存取控制</h3><p>关系数据库系统中的主要存取权限：</p><table border="1" cellspacing="0"><tbody><tr>    <td style="border-color:#000000;vertical-align:top;width:97pt;"> <p style="margin-left:0cm;"><strong>对象类型</strong></p> </td>    <td style="border-color:#000000;vertical-align:top;width:160pt;"> <p style="margin-left:0cm;"><strong>对象</strong></p> </td>    <td style="border-color:#000000;vertical-align:top;width:490pt;"> <p style="margin-left:0cm;"><strong>操 作 类 型</strong></p> </td></tr><tr>    <td rowspan="4" style="border-color:#000000;vertical-align:top;width:97pt;"> <p style="margin-left:0cm;"><strong>数据库</strong></p> <p style="margin-left:0cm;"><strong>模式</strong></p> </td>    <td style="vertical-align:top;width:160pt;"> <p style="margin-left:0cm;"><strong>模式</strong></p> </td>    <td style="vertical-align:top;width:490pt;"> <p style="margin-left:0cm;"><strong>CREATE SCHEMA</strong></p> </td></tr><tr>    <td style="vertical-align:top;width:160pt;"> <p style="margin-left:0cm;"><strong>基本表</strong></p> </td>    <td style="vertical-align:top;width:490pt;"> <p style="margin-left:0cm;"><strong>CREATE TABLE&#xff0c;ALTER TABLE</strong></p> </td></tr><tr>    <td style="vertical-align:top;width:160pt;"> <p style="margin-left:0cm;"><strong>视图</strong></p> </td>    <td style="vertical-align:top;width:490pt;"> <p style="margin-left:0cm;"><strong>CREATE VIEW</strong></p> </td></tr><tr>    <td style="vertical-align:top;width:160pt;"> <p style="margin-left:0cm;"><strong>索引</strong></p> </td><td style="vertical-align:top;width:490pt;"> <p style="margin-left:0cm;"><strong>CREATE INDEX</strong></p> </td></tr><tr>    <td rowspan="2" style="border-color:#000000;vertical-align:top;width:97pt;"> <p style="margin-left:0cm;"><strong>   数据</strong></p> </td>    <td style="vertical-align:top;width:160pt;"> <p style="margin-left:0cm;"><strong>基本表和视图</strong></p> </td>    <td style="vertical-align:top;width:490pt;"> <p style="margin-left:0cm;"><strong>SELECT&#xff0c;INSERT&#xff0c;UPDATE&#xff0c;DELETE&#xff0c;REFERENCES&#xff0c;</strong></p> <p style="margin-left:0cm;"><strong>ALL PRIVILEGES</strong></p> </td></tr><tr>    <td style="vertical-align:top;width:160pt;"> <p style="margin-left:0cm;"><strong>属性列</strong></p> </td>    <td style="vertical-align:top;width:490pt;"> <p style="margin-left:0cm;"><strong>SELECT&#xff0c;INSERT&#xff0c;UPDATE&#xff0c; REFERENCES&#xff0c;ALL PRIVILEGES</strong></p> </td></tr></tbody></table><h4 id="GRANT授权语句"><a href="#GRANT授权语句" class="headerlink" title="GRANT授权语句"></a>GRANT授权语句</h4><p>GRANT语句的一般格式：</p><p>语义：将对指定操作对象的指定操作权限授予指定的用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="operator">&lt;</span>权限<span class="operator">&gt;</span>[,<span class="operator">&lt;</span>权限<span class="operator">&gt;</span>]...</span><br><span class="line"><span class="keyword">ON</span> <span class="operator">&lt;</span>对象类型<span class="operator">&gt;</span> <span class="operator">&lt;</span>对象名<span class="operator">&gt;</span>[,<span class="operator">&lt;</span>对象类型<span class="operator">&gt;</span> <span class="operator">&lt;</span>对象名<span class="operator">&gt;</span>]…</span><br><span class="line"><span class="keyword">TO</span> <span class="operator">&lt;</span>用户<span class="operator">&gt;</span>[,<span class="operator">&lt;</span>用户<span class="operator">&gt;</span>]...</span><br><span class="line">[<span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION];</span><br></pre></td></tr></table></figure><p>发出GRANT语句的可以是：</p><ol><li><p>数据库管理员</p></li><li><p>数据库对象创建者（即属主Owner）</p></li><li><p>已经拥有该权限的用户</p></li></ol><p>WITH GRANT OPTION子句:</p><p>若指定了：获得权限的用户可以再授予其他用户。（但不允许循环授权）</p><p>没有指定：只能使用，不能传播该权限。</p><h4 id="REVOKE收回语句"><a href="#REVOKE收回语句" class="headerlink" title="REVOKE收回语句"></a>REVOKE收回语句</h4><p>授予的权限可以由数据库管理员或其他授权者用REVOKE语句收回</p><p>REVOKE语句的一般格式为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="operator">&lt;</span>权限<span class="operator">&gt;</span>[,<span class="operator">&lt;</span>权限<span class="operator">&gt;</span>]...</span><br><span class="line"><span class="keyword">ON</span> <span class="operator">&lt;</span>对象类型<span class="operator">&gt;</span> <span class="operator">&lt;</span>对象名<span class="operator">&gt;</span>[,<span class="operator">&lt;</span>对象类型<span class="operator">&gt;</span><span class="operator">&lt;</span>对象名<span class="operator">&gt;</span>]…</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>用户<span class="operator">&gt;</span>[,<span class="operator">&lt;</span>用户<span class="operator">&gt;</span>]...[CASCADE <span class="operator">|</span> RESTRICT];</span><br></pre></td></tr></table></figure><h3 id="》数据库角色"><a href="#》数据库角色" class="headerlink" title="》数据库角色"></a>》数据库角色</h3><p>数据库角色是被命名的一组与数据库操作相关的权限，角色是权限的集合。可以为一组具有相同权限的用户创建一个角色，简化授权的过程。</p><h4 id="1-角色的创建"><a href="#1-角色的创建" class="headerlink" title="1.角色的创建"></a>1.角色的创建</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span>  ROLE  <span class="operator">&lt;</span>角色名<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-给角色授权"><a href="#2-给角色授权" class="headerlink" title="2.给角色授权"></a>2.给角色授权</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span>  <span class="operator">&lt;</span>权限<span class="operator">&gt;</span>[,<span class="operator">&lt;</span>权限<span class="operator">&gt;</span>]…</span><br><span class="line"><span class="keyword">ON</span> <span class="operator">&lt;</span>对象类型<span class="operator">&gt;</span>对象名 </span><br><span class="line"><span class="keyword">TO</span> <span class="operator">&lt;</span>角色<span class="operator">&gt;</span>[,<span class="operator">&lt;</span>角色<span class="operator">&gt;</span>]…</span><br></pre></td></tr></table></figure><h4 id="3-将一个角色授予其他的角色或用户"><a href="#3-将一个角色授予其他的角色或用户" class="headerlink" title="3.将一个角色授予其他的角色或用户"></a>3.将一个角色授予其他的角色或用户</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span>  <span class="operator">&lt;</span>角色<span class="number">1</span><span class="operator">&gt;</span>[,<span class="operator">&lt;</span>角色<span class="number">2</span><span class="operator">&gt;</span>]…</span><br><span class="line"><span class="keyword">TO</span>  <span class="operator">&lt;</span>角色<span class="number">3</span><span class="operator">&gt;</span>[,<span class="operator">&lt;</span>用户<span class="number">1</span><span class="operator">&gt;</span>]…</span><br><span class="line">[<span class="keyword">WITH</span> ADMIN OPTION]</span><br></pre></td></tr></table></figure><h4 id="4-角色权限的收回"><a href="#4-角色权限的收回" class="headerlink" title="4.角色权限的收回"></a>4.角色权限的收回</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="operator">&lt;</span>权限<span class="operator">&gt;</span>[,<span class="operator">&lt;</span>权限<span class="operator">&gt;</span>]…</span><br><span class="line"><span class="keyword">ON</span> <span class="operator">&lt;</span>对象类型<span class="operator">&gt;</span> <span class="operator">&lt;</span>对象名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>角色<span class="operator">&gt;</span>[,<span class="operator">&lt;</span>角色<span class="operator">&gt;</span>]…</span><br></pre></td></tr></table></figure><p>用户可以回收角色的权限，从而修改角色拥有的权限。<br>REVOKE执行者是：角色的创建者、拥有在这个（些）角色上的ADMIN OPTION。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[例<span class="number">4.11</span>] 通过角色来实现将一组权限授予一个用户。</span><br><span class="line"></span><br><span class="line">步骤如下：</span><br><span class="line"></span><br><span class="line">（<span class="number">1</span>）首先创建一个角色 R1</span><br><span class="line"></span><br><span class="line">        <span class="keyword">CREATE</span>  ROLE  R1;</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）然后使用<span class="keyword">GRANT</span>语句，使角色R1拥有Student表的  <span class="keyword">SELECT</span>、UPDATE、<span class="keyword">INSERT</span>权限</span><br><span class="line"></span><br><span class="line">       <span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, UPDATE, <span class="keyword">INSERT</span></span><br><span class="line">       <span class="keyword">ON</span> <span class="keyword">TABLE</span> Student</span><br><span class="line">       <span class="keyword">TO</span> R1;</span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>）将这个角色授予王平，张明，赵玲。使他们具有角色R1所包含的全部权限</span><br><span class="line"></span><br><span class="line">       <span class="keyword">GRANT</span>  R1</span><br><span class="line">       <span class="keyword">TO</span> 王平,张明,赵玲;</span><br><span class="line"></span><br><span class="line">（<span class="number">4</span>） 可以一次性通过R1来回收王平的这<span class="number">3</span>个权限</span><br><span class="line"></span><br><span class="line">         <span class="keyword">REVOKE</span>  R1</span><br><span class="line">         <span class="keyword">FROM</span> 王平;</span><br><span class="line"></span><br><span class="line"><span class="comment">-------------------------------------------</span></span><br><span class="line">[例<span class="number">4.12</span>] 角色的权限修改。</span><br><span class="line"><span class="comment">--使角色R1在原来的基础上增加了Student表的DELETE权限</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> Student</span><br><span class="line"><span class="keyword">TO</span> R1</span><br><span class="line"></span><br><span class="line"><span class="comment">-------------------------------------------</span></span><br><span class="line">[例<span class="number">4.13</span>] 使R1减少了<span class="keyword">SELECT</span>权限</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> Student</span><br><span class="line"><span class="keyword">FROM</span> R1;</span><br></pre></td></tr></table></figure><h3 id="》强制存取控制"><a href="#》强制存取控制" class="headerlink" title="》强制存取控制"></a>》强制存取控制</h3><p>（1）在强制存取控制中，数据库管理系统所管理的全部实体被分为主体和客体两大类</p><p>①主体是系统中的活动实体</p><ul><li>数据库管理系统所管理的实际用户</li><li>代表用户的各进程</li></ul><p>②客体是系统中的被动实体，受主体操纵</p><ul><li>文件、基本表、索引、视图</li></ul><p> （2）敏感度标记（Label）</p><p>对于主体和客体，DBMS为它们每个实例（值）指派一个敏感度标记（Label）,敏感度标记分成若干级别:</p><p>绝密（Top Secret，TS）<br>机密（Secret，S）<br>可信（Confidential，C）<br>公开（Public，P）</p><p>密级次序是：TS&gt;=S&gt;=C&gt;=P</p><p>主体的敏感度标记称为许可证级别（Clearance Level）<br>客体的敏感度标记称为密级（Classification Level）</p><p>（3）强制存取控制规则</p><p> ①仅当主体的许可证级别大于或等于客体的密级时，该主体才能读取相应的客体<br> ②仅当主体的许可证级别小于或等于客体的密级时，该主体才能写相应的客体</p><h2 id="2-3-视图机制"><a href="#2-3-视图机制" class="headerlink" title="2.3 视图机制"></a>2.3 视图机制</h2><p>把要保密的数据对无权存取这些数据的用户隐藏起来，对数据提供一定程度的安全保护</p><p>间接地实现支持存取谓词的用户权限定义</p><h2 id="2-4-审计"><a href="#2-4-审计" class="headerlink" title="2.4 审计"></a>2.4 审计</h2><p>①启用一个专用的审计日志（Audit Log）：将用户对数据库的所有操作记录在上面</p><p>②审计员利用审计日志：监控数据库中的各种行为，找出非法存取数据的人、时间和内容</p><p>③C2以上安全级别的DBMS必须具有审计功能</p><h3 id="AUDIT语句：设置审计功能"><a href="#AUDIT语句：设置审计功能" class="headerlink" title="AUDIT语句：设置审计功能"></a>AUDIT语句：设置审计功能</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[例<span class="number">4.15</span>] 对修改SC表结构或修改SC表数据的操作进行审计</span><br><span class="line"></span><br><span class="line">           AUDIT <span class="keyword">ALTER</span>,UPDATE </span><br><span class="line">           <span class="keyword">ON</span>  SC;</span><br></pre></td></tr></table></figure><h3 id="NOAUDIT语句：取消审计功能"><a href="#NOAUDIT语句：取消审计功能" class="headerlink" title="NOAUDIT语句：取消审计功能"></a>NOAUDIT语句：取消审计功能</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[例<span class="number">4.16</span>] 取消对SC表的一切审计</span><br><span class="line"></span><br><span class="line">           NOAUDIT  <span class="keyword">ALTER</span>,UPDATE </span><br><span class="line">           <span class="keyword">ON</span>  SC;</span><br></pre></td></tr></table></figure><h2 id="2-5-数据加密"><a href="#2-5-数据加密" class="headerlink" title="2.5 数据加密"></a>2.5 数据加密</h2><p>主要包括：</p><ol><li><p>储存加密</p></li><li><p>传输加密</p></li></ol><h2 id="2-6-其他安全性保护"><a href="#2-6-其他安全性保护" class="headerlink" title="2.6 其他安全性保护"></a>2.6 其他安全性保护</h2><ol><li><p>推理控制</p></li><li><p>隐蔽通道</p></li><li><p>数据隐私保护</p></li></ol><hr><h1 id="（小结与习题）"><a href="#（小结与习题）" class="headerlink" title="（小结与习题）"></a>（小结与习题）</h1><p><strong>1 ．什么是数据库的安全性？</strong></p><p>答：数据库的安全性是指保护数据库以防止不合法的使用所造成的数据泄露、更改或破坏。</p><p><strong>2 ．数据库安全性和计算机系统的安全性有什么关系？</strong><br>答：安全性问题不是数据库系统所独有的，所有计算机系统都有这个问题。只是在数据库系统中大量数据集中存放，而且为许多最终用户直接共享，从而使安全性问题更为突出。<br>系统安全保护措施是否有效是数据库系统的主要指标之一。<br>数据库的安全性和计算机系统的安全性，包括操作系统、网络系统的安全性是紧密联系、相互支持的，</p><p><strong>3 .SQL 语言中提供了哪些数据控制（自主存取控制）的语句？请试举几例说明它们的使用方法。</strong></p><p>答：</p><p>SQL 中的自主存取控制是通过GRANT语句和REVOKE语句来实现的。如：</p><pre><code>GRANT SELECT , INSERT ON Student TO 王平WITH GRANT  OPTION ;</code></pre><p>就将Student 表的SELECT 和INSERT 权限授予了用户王平，后面的“WITH GRANT OPTION ”子句表示用户王平同时也获得了“授权”的权限，即可以把得到的权限继续授予其他用户。<br>REVOKE INSERT ON Student FROM 王平CASCADE ;<br>就将Student 表的INSERT 权限从用户王平处收回，选项CASCADE 表示，如果用户王平将Student 的INSERT 权限又转授给了其他用户，那么这些权限也将从其他用户处收回。</p><p><strong>4 ．试述实现数据库安全性控制的常用方法和技术。</strong></p><p>答：实现数据库安全性控制的常用方法和技术有：<br>( l ）用户标识和鉴别：该方法由系统提供一定的方式让用户标识自己的名字或身份。每次用户要求进入系统时，由系统进行核对，通过鉴定后才提供系统的使用权。<br>( 2 ）存取控制：通过用户权限定义和合法权检查确保只有合法权限的用户访问数据库，所有未被授权的人员无法存取数据。例如CZ 级中的自主存取控制( DAC ) , Bl 级中的强制存取控制（MAC ）。<br>( 3 ）视图机制：为不同的用户定义视图，通过视图机制把要保密的数据对无权存取的用户隐藏起来，从而自动地对数据提供一定程度的安全保护。</p><p>( 4 ）审计：建立审计日志，把用户对数据库的所有操作自动记录下来放入审计日志中，DBA 可以利用审计跟踪的信息，重现导致数据库现有状况的一系列事件，找出非法存取数据的人、时间和内容等。<br>( 5 ）数据加密：对存储和传输的数据进行加密处理，从而使得不知道解密算法的人无法获知数据的内容。</p><p><strong>5．什么是数据库中的自主存取控制方法和强制存取控制方法？</strong></p><p>答：</p><p>自主存取控制方法：定义各个用户对不同数据对象的存取权限。当用户对数据库访问时首先检查用户的存取权限。防止不合法用户对数据库的存取。</p><p>强制存取控制方法：每一个数据对象被（强制地）标以一定的密级，每一个用户也被（强制地）授予某一个级别的许可证。系统规定只有具有某一许可证级别的用户才能存取某一个密级的数据对象。</p><p>**6 .完成下列授权功能： **<br>(1) </p><pre><code>GRANT ALL PRIVILEGES ON Student,Class TO U1WITH GRANT OPTION ;</code></pre><p>  (2)</p><pre><code>GRANT SELECT,UPDATE(家庭住址),DELETE ON Student TO U2；</code></pre><p>  (3)</p><pre><code>GRANT SELECT ON Class TO PUBLIC；</code></pre><p>  (4)</p><pre><code>GRANT SELECT,UPDATE ON Student TO R1；</code></pre><p>  (5)</p><pre><code>GRANT R1 TO U1 WITH ADMIN OPTION ；</code></pre><p><strong>7．请用SQL的GRANT 和REVOKE语句(加上视图机制)完成以下授权定义或存取控制功能:</strong></p><p>( a ）用户王明对两个表有SELECT 权力。</p><pre><code> GRANT SELECT ON 职工,部门 TO 王明</code></pre><p>( b ）用户李勇对两个表有INSERT 和DELETE 权力。</p><pre><code> GRANT INSERT,DELETE ON 职工,部门 TO 李勇</code></pre><p>( c ) 每个职工只对自己的记录有SELECT 权力。</p><pre><code> GRANT SELECT ON 职工 WHEN USER()=NAME TO ALL;</code></pre><p>( d ）用户刘星对职工表有SELECT 权力，对工资字段具有更新权力。</p><pre><code> GRANT SELECT,UPDATE(工资) ON 职工 TO 刘星</code></pre><p> ( e ）用户张新具有修改这两个表的结构的权力。</p><pre><code> GRANT ALTER TABLE ON 职工,部门 TO 张新;</code></pre><p> ( f ）用户周平具有对两个表所有权力（读，插，改，删数据），并具有给其他用户授权的权力。</p><pre><code> GRANT ALL PRIVILIGES ON 职工,部门 TO 周平 WITH GRANT OPTION;</code></pre><p>( g ）用户杨兰具有从每个部门职工中SELECT 最高工资、最低工资、平均工资的权力，他不能查看每个人的工资。</p><pre><code> CREATE VIEW 部门工资 AS      SELECT 部门.名称,MAX(工资),MIN(工资),AVG(工资)      FROM 职工,部门      WHERE 职工.部门号=部门.部门号      GROUP BY 职工.部门号 GRANT SELECT ON 部门工资 TO 杨兰;</code></pre><p><strong>8 ．把习题8 中（1）—（7）的每一种情况，撤销各用户所授予的权力</strong></p><p>(1) </p><pre><code>REVOKE SELECT ON 职工，部门 FROM 王明；</code></pre><p>(2) </p><pre><code>REVOKE INSERT , DELETE ON 职工，部门 FROM 李勇；</code></pre><p>(3) </p><pre><code>REOVKE SELECT ON 职工WHEN USER ( ) =NAMEFROM ALI ;</code></pre><p>(4) </p><pre><code>REVOKE SELECT , UPDATE ON 职工FROM 刘星；</code></pre><p>(5) </p><pre><code>REVOKE ALTER TABLE ON 职工，部门FROM 张新；</code></pre><p>(6) </p><pre><code>REVOKE ALL PRIVILIGES ON 职工，部门FROM 周平；</code></pre><p>(7) </p><pre><code>REVOKE SELECT ON 部门工资FROM 杨兰；DROP VIEW 部门工资；</code></pre><p><strong>9．理解并解释MAC 机制中主体、客体、敏感度标记的含义。</strong></p><p>答：</p><p>主体是系统中的活动实体，既包括DBMS 所管理的实际用户，也包括代表用户的各进程。<br>客体是系统中的被动实体，是受主体操纵的，包括文件、基表、索引、视图等。<br>对于主体和 客体，DBMS 为它们每个实例（值）指派一个敏感度标记（Label ）。</p><p>敏感度标记被分成若干级别，例如绝密（Top Secret ）、机密（Secret ）· 可信( Confidential ）、公开（PubliC ）等。主体的敏感度标记称为许可证级别（ClearanCe 玫vel ) ，客体的敏感度标记称为密级（Classification Level ）。</p><p><strong>11 ．什么是数据库的审计功能，为什么要提供审计功能？</strong></p><p>答：审计功能是指DBMS 的审计模块在用户对数据库执行操作的同时把所有操作自动记录到系统的审计日志中。<br>因为任何系统的安全保护措施都不是完美无缺的，蓄意盗窃破坏数据的人总可能存在。利用数据库的审计功能，DBA 可以根据审计跟踪的信息，重现导致数据库现有状况的一系列事件，找出非法存取数据的人、时间和内容等。</p><hr><p><strong>课后答案来自CSDN：</strong></p><p>[1] <a href="https://blog.csdn.net/delete_bug/article/details/105507705">https://blog.csdn.net/delete_bug/article/details/105507705</a></p><p>[2] <a href="https://blog.csdn.net/qq_37857921/article/details/103671191">https://blog.csdn.net/qq_37857921/article/details/103671191</a></p>]]></content>
      
      
      <categories>
          
          <category> 《数据库系统概论》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日一题】查找重复的电子邮箱</title>
      <link href="/2021/11/07/2021-34/"/>
      <url>/2021/11/07/2021-34/</url>
      
        <content type="html"><![CDATA[<blockquote><p>此为 LeetCode 上 <strong>2021-11-07</strong> 的每日一题：【<a href="https://leetcode-cn.com/problems/duplicate-emails/">182. 查找重复的电子邮箱</a>】</p></blockquote><h1 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h1><p>编写一个 SQL 查询，查找 <code>Person</code> 表中所有重复的电子邮箱。</p><p><strong>示例：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> If <span class="keyword">Not</span> <span class="keyword">Exists</span> Person (id <span class="type">int</span>, email <span class="type">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Person</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (id, email) <span class="keyword">values</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;a@b.com&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (id, email) <span class="keyword">values</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;c@d.com&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (id, email) <span class="keyword">values</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;a@b.com&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>+----+---------+| Id | Email   |+----+---------+| 1  | a@b.com || 2  | c@d.com || 3  | a@b.com |+----+---------+</code></pre><p>根据以上输入，你的查询应返回以下结果：</p><pre><code>+---------+| Email   |+---------+| a@b.com |+---------+</code></pre><p><strong>说明</strong>：所有电子邮箱都是小写字母。</p><hr><h1 id="2-题解"><a href="#2-题解" class="headerlink" title="2.题解"></a>2.题解</h1><p>【解法一】：借助HAVING语句+聚合函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Email</span><br><span class="line"><span class="keyword">from</span> Person</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> Email</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(Email)<span class="operator">&gt;</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>使用 <code>group by</code> 对Email分组，<br>然后 <code>having</code> 用于分组后的过滤，<br>其中 <code>count(Email)</code> 对其计数。</p><blockquote><p>having 和 where的区别，where的执行在分组前，having在分组后</p></blockquote><p>【解法二】：自连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">DISTINCT</span> P1.Email </span><br><span class="line"><span class="keyword">from</span> Person p1, Person p2 </span><br><span class="line"><span class="keyword">where</span> p1.Email <span class="operator">=</span> p2.Email <span class="keyword">and</span> p1.Id <span class="operator">!=</span> p2.Id;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> p1.email </span><br><span class="line"><span class="keyword">from</span> Person p1 <span class="keyword">join</span> Person p2</span><br><span class="line"><span class="keyword">on</span> p1.Email <span class="operator">=</span> p2.Email</span><br><span class="line"><span class="keyword">where</span> p1.Id <span class="operator">!=</span> p2.Id;</span><br></pre></td></tr></table></figure><p>【解法三】：子表查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 先计数，再查询</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">        Email </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">        (</span><br><span class="line">        <span class="keyword">SELECT</span> Email, <span class="built_in">count</span>(<span class="operator">*</span>) num </span><br><span class="line">        <span class="keyword">FROM</span> Person </span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> Email </span><br><span class="line">        ) t1</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">        num <span class="operator">&gt;</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><hr><p>题外问答：SQL语句一定要大写吗？</p><blockquote><p>不用非写成大写，SQL语句对大小写不敏感。但是，编译的时候，操作系统会将所有字符转换成大写的，再进行编译。如果大写，在编译的时候，可以节省转化的时间。当SQL语句大量的时候，就显得很重要了。在大型的ERP系统开发的时候，往往会这么要求。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
            <tag> 每日一题 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据库】第3章 SQL语言丨小结与习题</title>
      <link href="/2021/11/05/2021-33/"/>
      <url>/2021/11/05/2021-33/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文所属《数据库系统原理》分类专栏，相关文章导航请点击<a href="https://barry-flynn.github.io/2021/09/29/2021-5/">《数据库系统原理》目录汇总贴</a></p></blockquote><hr><h1 id="课后题3-4-5题目"><a href="#课后题3-4-5题目" class="headerlink" title="课后题3/4/5题目"></a>课后题3/4/5题目</h1><blockquote><p><img src="https://i.loli.net/2021/11/05/8c5IJQhB29vbSmn.png" alt="3.8 SQL课后题3~5.png"></p></blockquote><hr><h1 id="第3题"><a href="#第3题" class="headerlink" title="第3题"></a>第3题</h1><p>（1）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> S</span><br><span class="line"><span class="keyword">WHERE</span> A<span class="operator">=</span><span class="string">&#x27;10&#x27;</span></span><br></pre></td></tr></table></figure><p>（2）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A,B</span><br><span class="line"><span class="keyword">FROM</span> S</span><br></pre></td></tr></table></figure><p>（3） S ⋈ T </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 共同属性列是 C 和 D</span></span><br><span class="line"><span class="keyword">SELECT</span> A,B,S.C,S.D,E,F  </span><br><span class="line"><span class="keyword">FROM</span> S,T</span><br><span class="line"><span class="keyword">WHERE</span> S.C<span class="operator">=</span>T.C <span class="keyword">AND</span> S.D<span class="operator">=</span>T.D</span><br></pre></td></tr></table></figure><p>（4）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> S,T</span><br><span class="line"><span class="keyword">WHERE</span> S.C<span class="operator">=</span>T.C </span><br></pre></td></tr></table></figure><!-- SELECT A,B,S.C,S.D,T.C,T.D,E,FFROM S,TWHERE S.C=T.C--><p>（5）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> S,T</span><br><span class="line"><span class="keyword">WHERE</span> S.A<span class="operator">&lt;</span>T.E </span><br></pre></td></tr></table></figure><!-- SELECT A,B,S.C,S.D,T.C,T.D,E,FFROM S,TWHERE A<E--><p>（6）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.C,S.D,T.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> S,T</span><br></pre></td></tr></table></figure><!-- SELECT S1.C,S1.D,T.C,T.D,E,F FROM T,(SELECT DISTINCT C,D         FROM S)         AS S1        --生成了临时派生表S1，只有 C 和 D 两列--然后再将表 S1 与表 T 进行投影>其中`DISTINCT`是在`【单表查询 -> 选择表中的若干元组 -> 消除取值重复的行】`内容中学的，在课本P92页，用来消除两表投影在一起后，可能会造成的重复行。 --><hr><h1 id="第4题"><a href="#第4题" class="headerlink" title="第4题"></a>第4题</h1><p>用SQL语句建立第二章习题6中的4个表；针对建立的4个表用SQL完成第二章习题6中的查询。</p><blockquote><p><img src="https://i.loli.net/2021/11/05/x1KabOEc4mdUZ2g.png" alt="3.8 SQL课后题4（也是第二章课后题6）图1.png"><br><img src="https://i.loli.net/2021/11/05/syW93aqDl4i16hz.png" alt="3.8 SQL课后题4（也是第二章课后题6）图2.png"><br><img src="https://i.loli.net/2021/11/05/8vARoXSlBOg4c2L.png" alt="3.8 SQL课后题4（也是第二章课后题6）图3.png"></p></blockquote><p><strong>【建表】：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--建“供应商表 S”</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> S (SNO <span class="type">CHAR</span>(<span class="number">4</span>) <span class="keyword">PRIMARY</span> KEY,    <span class="comment">/* 列级完整性约束条件,Sno是主码*/</span>    </span><br><span class="line">                SNAME <span class="type">CHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span>,     <span class="comment">/* Sname取唯一值*/</span></span><br><span class="line">                STATUS <span class="type">SMALLINT</span>,            <span class="comment">/* smallint是数据类型的短整型*/</span></span><br><span class="line">                CITY <span class="type">CHAR</span>(<span class="number">20</span>)</span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line"><span class="comment">--在“供应商表 S”中插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> S(SNO,SNAME,STATUS,CITY) <span class="keyword">VALUES</span> (<span class="string">&#x27;S1&#x27;</span>,<span class="string">&#x27;精益&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;天津&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> S(SNO,SNAME,STATUS,CITY) <span class="keyword">VALUES</span>(<span class="string">&#x27;S2&#x27;</span>,<span class="string">&#x27;盛锡&#x27;</span>,<span class="number">10</span>,<span class="string">&#x27;北京&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> S(SNO,SNAME,STATUS,CITY) <span class="keyword">VALUES</span>(<span class="string">&#x27;S3&#x27;</span>,<span class="string">&#x27;东方红&#x27;</span>,<span class="number">30</span>,<span class="string">&#x27;北京&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> S(SNO,SNAME,STATUS,CITY) <span class="keyword">VALUES</span>(<span class="string">&#x27;S4&#x27;</span>,<span class="string">&#x27;丰泰盛&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;天津&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> S(SNO,SNAME,STATUS,CITY) <span class="keyword">VALUES</span>(<span class="string">&#x27;S5&#x27;</span>,<span class="string">&#x27;为民&#x27;</span>,<span class="number">30</span>,<span class="string">&#x27;上海&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--建“零件表 P”</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> P (PNO <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">                PNAME <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">                COLOR <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">                WEIGHT <span class="type">SMALLINT</span></span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line"><span class="comment">--在“零件表 P”中插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> P(PNO,PNAME,COLOR,WEIGHT) <span class="keyword">VALUES</span>(<span class="string">&#x27;P1&#x27;</span>,<span class="string">&#x27;螺母&#x27;</span>,<span class="string">&#x27;红&#x27;</span>,<span class="number">12</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> P(PNO,PNAME,COLOR,WEIGHT) <span class="keyword">VALUES</span>(<span class="string">&#x27;P2&#x27;</span>,<span class="string">&#x27;螺栓&#x27;</span>,<span class="string">&#x27;绿&#x27;</span>,<span class="number">17</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> P(PNO,PNAME,COLOR,WEIGHT) <span class="keyword">VALUES</span>(<span class="string">&#x27;P3&#x27;</span>,<span class="string">&#x27;螺丝刀&#x27;</span>,<span class="string">&#x27;蓝&#x27;</span>,<span class="number">14</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> P(PNO,PNAME,COLOR,WEIGHT) <span class="keyword">VALUES</span>(<span class="string">&#x27;P4&#x27;</span>,<span class="string">&#x27;螺丝刀&#x27;</span>,<span class="string">&#x27;红&#x27;</span>,<span class="number">14</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> P(PNO,PNAME,COLOR,WEIGHT) <span class="keyword">VALUES</span>(<span class="string">&#x27;P5&#x27;</span>,<span class="string">&#x27;凸轮&#x27;</span>,<span class="string">&#x27;蓝&#x27;</span>,<span class="number">40</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> P(PNO,PNAME,COLOR,WEIGHT) <span class="keyword">VALUES</span>(<span class="string">&#x27;P6&#x27;</span>,<span class="string">&#x27;齿轮&#x27;</span>,<span class="string">&#x27;红&#x27;</span>,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--建“工程项目表 J”</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> J(JNO <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">           JNAME <span class="type">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">           CITY <span class="type">CHAR</span>(<span class="number">10</span>)</span><br><span class="line">           );</span><br><span class="line"></span><br><span class="line"><span class="comment">--在“工程项目表 J”中插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> J(JNO,JNAME,CITY) <span class="keyword">VALUES</span>(<span class="string">&#x27;J1&#x27;</span>,<span class="string">&#x27;三建&#x27;</span>,<span class="string">&#x27;北京&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> J(JNO,JNAME,CITY) <span class="keyword">VALUES</span>(<span class="string">&#x27;J2&#x27;</span>,<span class="string">&#x27;一汽&#x27;</span>,<span class="string">&#x27;长春&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> J(JNO,JNAME,CITY) <span class="keyword">VALUES</span>(<span class="string">&#x27;J3&#x27;</span>,<span class="string">&#x27;弹簧厂&#x27;</span>,<span class="string">&#x27;天津&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> J(JNO,JNAME,CITY) <span class="keyword">VALUES</span>(<span class="string">&#x27;J4&#x27;</span>,<span class="string">&#x27;造船厂&#x27;</span>,<span class="string">&#x27;天津&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> J(JNO,JNAME,CITY) <span class="keyword">VALUES</span>(<span class="string">&#x27;J5&#x27;</span>,<span class="string">&#x27;机车厂&#x27;</span>,<span class="string">&#x27;唐山&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> J(JNO,JNAME,CITY) <span class="keyword">VALUES</span>(<span class="string">&#x27;J6&#x27;</span>,<span class="string">&#x27;无线电厂&#x27;</span>,<span class="string">&#x27;常州&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> J(JNO,JNAME,CITY) <span class="keyword">VALUES</span>(<span class="string">&#x27;J7&#x27;</span>,<span class="string">&#x27;半导体厂&#x27;</span>,<span class="string">&#x27;南京&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--建“供应情况表 SPJ”</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SPJ(SNO <span class="type">CHAR</span>(<span class="number">4</span>),</span><br><span class="line">             PNO <span class="type">CHAR</span>(<span class="number">4</span>),</span><br><span class="line">             JNO <span class="type">CHAR</span>(<span class="number">4</span>),</span><br><span class="line">             QTY <span class="type">SMALLINT</span></span><br><span class="line">             );</span><br><span class="line">            </span><br><span class="line"><span class="comment">--在“供应情况表 SPJ”中插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SPJ(SNO,PNO,JNO,QTY) <span class="keyword">VALUES</span>(<span class="string">&#x27;S1&#x27;</span>,<span class="string">&#x27;P1&#x27;</span>,<span class="string">&#x27;J1&#x27;</span>,<span class="number">200</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SPJ(SNO,PNO,JNO,QTY) <span class="keyword">VALUES</span>(<span class="string">&#x27;S1&#x27;</span>,<span class="string">&#x27;P1&#x27;</span>,<span class="string">&#x27;J3&#x27;</span>,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SPJ(SNO,PNO,JNO,QTY) <span class="keyword">VALUES</span>(<span class="string">&#x27;S1&#x27;</span>,<span class="string">&#x27;P1&#x27;</span>,<span class="string">&#x27;J4&#x27;</span>,<span class="number">700</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SPJ(SNO,PNO,JNO,QTY) <span class="keyword">VALUES</span>(<span class="string">&#x27;S1&#x27;</span>,<span class="string">&#x27;P2&#x27;</span>,<span class="string">&#x27;J2&#x27;</span>,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SPJ(SNO,PNO,JNO,QTY) <span class="keyword">VALUES</span>(<span class="string">&#x27;S2&#x27;</span>,<span class="string">&#x27;P3&#x27;</span>,<span class="string">&#x27;J1&#x27;</span>,<span class="number">400</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SPJ(SNO,PNO,JNO,QTY) <span class="keyword">VALUES</span>(<span class="string">&#x27;S2&#x27;</span>,<span class="string">&#x27;P3&#x27;</span>,<span class="string">&#x27;J2&#x27;</span>,<span class="number">200</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SPJ(SNO,PNO,JNO,QTY) <span class="keyword">VALUES</span>(<span class="string">&#x27;S2&#x27;</span>,<span class="string">&#x27;P3&#x27;</span>,<span class="string">&#x27;J4&#x27;</span>,<span class="number">500</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SPJ(SNO,PNO,JNO,QTY) <span class="keyword">VALUES</span>(<span class="string">&#x27;S2&#x27;</span>,<span class="string">&#x27;P3&#x27;</span>,<span class="string">&#x27;J5&#x27;</span>,<span class="number">400</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SPJ(SNO,PNO,JNO,QTY) <span class="keyword">VALUES</span>(<span class="string">&#x27;S2&#x27;</span>,<span class="string">&#x27;P5&#x27;</span>,<span class="string">&#x27;J1&#x27;</span>,<span class="number">400</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SPJ(SNO,PNO,JNO,QTY) <span class="keyword">VALUES</span>(<span class="string">&#x27;S2&#x27;</span>,<span class="string">&#x27;P5&#x27;</span>,<span class="string">&#x27;J2&#x27;</span>,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SPJ(SNO,PNO,JNO,QTY) <span class="keyword">VALUES</span>(<span class="string">&#x27;S3&#x27;</span>,<span class="string">&#x27;P1&#x27;</span>,<span class="string">&#x27;J1&#x27;</span>,<span class="number">200</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SPJ(SNO,PNO,JNO,QTY) <span class="keyword">VALUES</span>(<span class="string">&#x27;S3&#x27;</span>,<span class="string">&#x27;P3&#x27;</span>,<span class="string">&#x27;J1&#x27;</span>,<span class="number">200</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SPJ(SNO,PNO,JNO,QTY) <span class="keyword">VALUES</span>(<span class="string">&#x27;S4&#x27;</span>,<span class="string">&#x27;P5&#x27;</span>,<span class="string">&#x27;J1&#x27;</span>,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SPJ(SNO,PNO,JNO,QTY) <span class="keyword">VALUES</span>(<span class="string">&#x27;S4&#x27;</span>,<span class="string">&#x27;P6&#x27;</span>,<span class="string">&#x27;J3&#x27;</span>,<span class="number">300</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SPJ(SNO,PNO,JNO,QTY) <span class="keyword">VALUES</span>(<span class="string">&#x27;S4&#x27;</span>,<span class="string">&#x27;P6&#x27;</span>,<span class="string">&#x27;J4&#x27;</span>,<span class="number">200</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SPJ(SNO,PNO,JNO,QTY) <span class="keyword">VALUES</span>(<span class="string">&#x27;S5&#x27;</span>,<span class="string">&#x27;P2&#x27;</span>,<span class="string">&#x27;J4&#x27;</span>,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SPJ(SNO,PNO,JNO,QTY) <span class="keyword">VALUES</span>(<span class="string">&#x27;S5&#x27;</span>,<span class="string">&#x27;P3&#x27;</span>,<span class="string">&#x27;J1&#x27;</span>,<span class="number">200</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SPJ(SNO,PNO,JNO,QTY) <span class="keyword">VALUES</span>(<span class="string">&#x27;S5&#x27;</span>,<span class="string">&#x27;P6&#x27;</span>,<span class="string">&#x27;J2&#x27;</span>,<span class="number">200</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SPJ(SNO,PNO,JNO,QTY) <span class="keyword">VALUES</span>(<span class="string">&#x27;S5&#x27;</span>,<span class="string">&#x27;P6&#x27;</span>,<span class="string">&#x27;J4&#x27;</span>,<span class="number">500</span>);</span><br></pre></td></tr></table></figure><p>上方那些代码的用法参考如下：</p><ol><li>光标选中 S表 的建表代码，执行</li><li>光标选中 S表 的插入代码，执行</li><li>任意空白处输入下面查询语句，光标选中，执行<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span>  S</span><br></pre></td></tr></table></figure>建完表后开始做题。</li></ol><p><strong>【查询】：</strong><br>（1）求供应工程J1零件的供应商号码SNO；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SNO</span><br><span class="line"><span class="keyword">FROM</span>   SPJ</span><br><span class="line"><span class="keyword">WHERE</span>  JNO<span class="operator">=</span><span class="string">&#x27;J1&#x27;</span>;</span><br></pre></td></tr></table></figure><p>（2）求供应工程J1零件P1的供应商号码SNO；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SNO</span><br><span class="line"><span class="keyword">FROM</span>   SPJ</span><br><span class="line"><span class="keyword">WHERE</span>  JNO<span class="operator">=</span><span class="string">&#x27;J1&#x27;</span> <span class="keyword">AND</span> PNO <span class="operator">=</span><span class="string">&#x27;P1&#x27;</span>;</span><br></pre></td></tr></table></figure><p>（3）求供应工程J1零件为红色的供应商号码 SNO；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SNO</span><br><span class="line"><span class="keyword">FROM</span>   SPJ,P</span><br><span class="line"><span class="keyword">WHERE</span>  P.PNO<span class="operator">=</span>SPJ.PNO <span class="keyword">AND</span> JNO<span class="operator">=</span><span class="string">&#x27;J1&#x27;</span> <span class="keyword">AND</span> COLOR<span class="operator">=</span><span class="string">&#x27;红&#x27;</span>;</span><br></pre></td></tr></table></figure><p>（4）求没有使用天津供应商生产的红色零件的工程号JNO；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JNO</span><br><span class="line"><span class="keyword">FROM</span>   J</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> SPJ,S,P</span><br><span class="line"><span class="keyword">WHERE</span> S.CITY<span class="operator">=</span><span class="string">&#x27;天津&#x27;</span> <span class="keyword">AND</span> P.COLOR<span class="operator">=</span><span class="string">&#x27;红&#x27;</span> <span class="keyword">AND</span> SPJ.JNO<span class="operator">=</span>J.JNO <span class="keyword">AND</span> SPJ.SNO<span class="operator">=</span>S.SNO <span class="keyword">AND</span> SPJ.PNO<span class="operator">=</span>P.PNO​​​);</span><br></pre></td></tr></table></figure><p>（5）求至少用了供应商S1所供应的全部零件的工程号JNO。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> JNO</span><br><span class="line"><span class="keyword">FROM</span> SPJ SPJX</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> </span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line">​ <span class="keyword">FROM</span> SPJ SPJY </span><br><span class="line"> <span class="keyword">WHERE</span> SPJY.SNO<span class="operator">=</span><span class="string">&#x27;S1&#x27;</span>​ <span class="keyword">AND</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>​ </span><br><span class="line"> (<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">  <span class="keyword">FROM</span> SPJ SPJZ </span><br><span class="line">  <span class="keyword">WHERE</span> SPJZ.PNO<span class="operator">=</span>SPJY.PNO <span class="keyword">AND</span> SPJZ.JNO<span class="operator">=</span>SPJX.JNO​​​)​);​​​</span><br></pre></td></tr></table></figure><hr><h1 id="第5题"><a href="#第5题" class="headerlink" title="第5题"></a>第5题</h1><p><strong>针对习题4中的4个表使用SQL完成以下各项操作：</strong></p><p>（1）找出所有供应商的姓名和所在城市；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SNO,CITY</span><br><span class="line"><span class="keyword">FROM</span> S</span><br></pre></td></tr></table></figure><p>（2）找出所有零件的名称、颜色、重量；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> PNAME,COLOR,WEIGHT</span><br><span class="line"><span class="keyword">FROM</span> P</span><br></pre></td></tr></table></figure><p>（3）找出使用供应商S1所供应零件的工程号码；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JNO</span><br><span class="line"><span class="keyword">FROM</span> SPJ</span><br><span class="line"><span class="keyword">WHERE</span> SNO<span class="operator">=</span><span class="string">&#x27;S1&#x27;</span></span><br></pre></td></tr></table></figure><p>（4）找出工程项目J2使用的各种零件的名称及其数量；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> PNAME,QTY</span><br><span class="line"><span class="keyword">FROM</span> SPJ,P</span><br><span class="line"><span class="keyword">WHERE</span> JNO<span class="operator">=</span><span class="string">&#x27;J2&#x27;</span> <span class="keyword">AND</span> P.PNO<span class="operator">=</span>SPJ.PNO</span><br></pre></td></tr></table></figure><p>（5）找出上海厂商供应的所有零件号码；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> PNO</span><br><span class="line"><span class="keyword">FROM</span> S,SPJ</span><br><span class="line"><span class="keyword">WHERE</span> S.SNO<span class="operator">=</span>SPJ.SNO <span class="keyword">AND</span> CITY<span class="operator">=</span><span class="string">&#x27;上海&#x27;</span></span><br><span class="line"><span class="comment">-- 为什么这里要用DISTINCT消除取值重复行？因为查出结果会有三个P6</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> PNO</span><br><span class="line"><span class="keyword">FROM</span>   SPJ</span><br><span class="line"><span class="keyword">WHERE</span>  SNO <span class="keyword">IN</span>(<span class="keyword">SELECT</span> SNO</span><br><span class="line">  <span class="keyword">FROM</span>   S</span><br><span class="line">      <span class="keyword">WHERE</span>  CITY<span class="operator">=</span><span class="string">&#x27;上海&#x27;</span></span><br><span class="line">  );</span><br></pre></td></tr></table></figure><p>（6）找出使用上海产的零件的工程名称；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> JNAME </span><br><span class="line">​<span class="keyword">FROM</span>  SPJ,S,J</span><br><span class="line"><span class="keyword">WHERE</span> S.SNO<span class="operator">=</span>SPJ.SNO <span class="keyword">AND</span> S.CITY<span class="operator">=</span><span class="string">&#x27;上海&#x27;</span> <span class="keyword">AND</span> J.JNO<span class="operator">=</span>SPJ.JNO</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">​<span class="keyword">SELECT</span> JNAME </span><br><span class="line"><span class="keyword">FROM</span>   J </span><br><span class="line"><span class="keyword">WHERE</span>  JNO <span class="keyword">IN</span>(<span class="keyword">SELECT</span> JNO</span><br><span class="line">      <span class="keyword">FROM</span>   SPJ, S </span><br><span class="line">      <span class="keyword">WHERE</span>  SPJ. SNO<span class="operator">=</span>S.SNO <span class="keyword">AND</span> S.CITY<span class="operator">=</span><span class="string">&#x27;上海&#x27;</span>); </span><br></pre></td></tr></table></figure><p>我的错误答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JNO<span class="comment">--查找对象都能看错</span></span><br><span class="line"><span class="keyword">FROM</span> SPJ</span><br><span class="line"><span class="keyword">WHERE</span> PNO <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> PNO</span><br><span class="line">  <span class="keyword">FROM</span>   SPJ</span><br><span class="line">  <span class="keyword">WHERE</span>  SNO <span class="keyword">IN</span>(<span class="keyword">SELECT</span> SNO</span><br><span class="line">  <span class="keyword">FROM</span>   S</span><br><span class="line">      <span class="keyword">WHERE</span>  CITY<span class="operator">=</span><span class="string">&#x27;上海&#x27;</span></span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>（7）找出没有使用天津产的零件的工程号码；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JNO</span><br><span class="line"><span class="keyword">FROM</span>   J</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> </span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>  SPJ,S</span><br><span class="line"><span class="keyword">WHERE</span> SPJ.JNO<span class="operator">=</span>J.JNO <span class="keyword">AND</span> SPJ.SNO<span class="operator">=</span>S.SNO <span class="keyword">AND</span> S.CITY<span class="operator">=</span><span class="string">&#x27;天津&#x27;</span>)</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JNO </span><br><span class="line"><span class="keyword">FROM</span>   J </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> </span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>  SPJ</span><br><span class="line"><span class="keyword">WHERE</span> SJP.JNO<span class="operator">=</span>J.JNO <span class="keyword">AND</span> SNO <span class="keyword">IN</span> </span><br><span class="line">(<span class="keyword">SELECT</span> SNO</span><br><span class="line"><span class="keyword">FROM</span>   S</span><br><span class="line"><span class="keyword">WHERE</span>  CITY<span class="operator">=</span><span class="string">&#x27;天津&#x27;</span>))</span><br></pre></td></tr></table></figure><p>我的错误答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> PNO</span><br><span class="line"><span class="keyword">FROM</span> P,S,SPJ</span><br><span class="line"><span class="keyword">WHERE</span> P.PNO<span class="operator">=</span>SPJ.PNO <span class="keyword">AND</span> S.SNO<span class="operator">=</span>SPJ.SNO <span class="keyword">AND</span> S.CITY<span class="operator">=</span><span class="comment">--写一半卡住</span></span><br></pre></td></tr></table></figure><p>（8）把全部红色零件的颜色改成蓝色；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE P</span><br><span class="line"><span class="keyword">SET</span>    COLOR<span class="operator">=</span><span class="string">&#x27;蓝&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span>  COLOR<span class="operator">=</span><span class="string">&#x27;红&#x27;</span></span><br></pre></td></tr></table></figure><p>（9）由S5供给J4的零件P6改为由S3供应，请作必要的修改；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE SPJ</span><br><span class="line"><span class="keyword">SET</span>    SNO<span class="operator">=</span><span class="string">&#x27;S3&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span>  SNO<span class="operator">=</span><span class="string">&#x27;S5&#x27;</span> <span class="keyword">AND</span> JNO<span class="operator">=</span><span class="string">&#x27;J4&#x27;</span> <span class="keyword">AND</span> PNO<span class="operator">=</span><span class="string">&#x27;P6&#x27;</span>;</span><br></pre></td></tr></table></figure><p>（10）从供应商关系中删除S2的记录，并从供应情况关系中删除相应的记录；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span>  SPJ</span><br><span class="line"><span class="keyword">WHERE</span> SNO<span class="operator">=</span><span class="string">&#x27;S2&#x27;</span>;</span><br><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span>  S</span><br><span class="line"><span class="keyword">WHERE</span> SNO<span class="operator">=</span><span class="string">&#x27;S2&#x27;</span></span><br></pre></td></tr></table></figure><p>（11）请将（S2，J6，P4，200）插入供应情况关系；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SPJ <span class="keyword">VALUES</span>(<span class="string">&#x27;S2&#x27;</span>,<span class="string">&#x27;P4&#x27;</span>,<span class="string">&#x27;J6&#x27;</span>,<span class="number">200</span>);</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SPJ(SNO,PNO,JNO,QTY) <span class="keyword">VALUES</span>(<span class="string">&#x27;S2&#x27;</span>,<span class="string">&#x27;P4&#x27;</span>,<span class="string">&#x27;J6&#x27;</span>,<span class="number">200</span>);</span><br></pre></td></tr></table></figure><hr><h1 id="第9题"><a href="#第9题" class="headerlink" title="第9题"></a>第9题</h1><p>请为三建工程项目建立一个供应情况的视图，包括供应商代码（SNO)、零件代码（PNO)、供应商数量（QTY）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> VIEW_SPJ</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> SNO,PNO,QTY</span><br><span class="line"><span class="keyword">FROM</span>   SPJ</span><br><span class="line"><span class="keyword">WHERE</span>  JNO<span class="operator">=</span>(<span class="keyword">SELECT</span> JNO</span><br><span class="line">            <span class="keyword">FROM</span>   J</span><br><span class="line"><span class="keyword">WHERE</span>  JNAME<span class="operator">=</span><span class="string">&#x27;三建&#x27;</span>)</span><br></pre></td></tr></table></figure><p>针对该视图完成下列查询：</p><p>（1）找出三建工程项目使用的各种零件代码及其数量；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> PNO,QTY</span><br><span class="line"><span class="keyword">FROM</span> VIEW_SPJ</span><br></pre></td></tr></table></figure><p>（2）找出供应商S1的供应情况；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> VIEW_SPJ</span><br><span class="line"><span class="keyword">WHERE</span> SNO<span class="operator">=</span><span class="string">&#x27;S1&#x27;</span></span><br></pre></td></tr></table></figure><hr><p><strong>答案参考：</strong><br>[1] 第三章课后题 <a href="https://blog.csdn.net/weixin_44652687/article/details/105051082">https://blog.csdn.net/weixin_44652687/article/details/105051082</a><br>[2] 第三章课后题 <a href="https://blog.csdn.net/MooM_X/article/details/105072849">https://blog.csdn.net/MooM_X/article/details/105072849</a> - 主要参考<br>[3] 数据库第5版全书答案 <a href="https://blog.csdn.net/weixin_46037153/article/details/103936161">https://blog.csdn.net/weixin_46037153/article/details/103936161</a></p>]]></content>
      
      
      <categories>
          
          <category> 《数据库系统概论》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【并行计算】初步了解OpenMP并用其加速矩阵相乘</title>
      <link href="/2021/11/04/2021-32/"/>
      <url>/2021/11/04/2021-32/</url>
      
        <content type="html"><![CDATA[<h1 id="简单了解-OpenMP"><a href="#简单了解-OpenMP" class="headerlink" title="简单了解 OpenMP"></a>简单了解 OpenMP</h1><p>OpenMP（Open Multi-Processing）是一个应用程序接口(API)，由一组主要的计算机硬件和软件供应商联合定义。OpenMP 为共享内存并行应用程序的开发人员提供了一个可移植的、可伸缩的模型。可用于显式地指示多线程、共享内存并行性。</p><p>OpenMP支持的编程语言包括C、C++和Fortran。</p><h1 id="运行时库函数"><a href="#运行时库函数" class="headerlink" title="运行时库函数"></a>运行时库函数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;omp.h&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="用OpenMP加速矩阵相乘"><a href="#用OpenMP加速矩阵相乘" class="headerlink" title="用OpenMP加速矩阵相乘"></a>用OpenMP加速矩阵相乘</h1><p>并行优化10000*10000的矩阵相乘，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;omp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NUM_THREADS = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">10000</span>, n = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">int</span> mat[<span class="number">10000</span>][<span class="number">10000</span>];</span><br><span class="line"><span class="keyword">int</span> vec[<span class="number">10000</span>], ans[<span class="number">10000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeRandomMatrix</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            mat[i][j] = rand() % <span class="number">10</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeRandomVector</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        vec[i] = rand() % <span class="number">10</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funy</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> cur)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[cur] += a[i] * vec[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        funy(mat[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">pragma</span> omp parallel</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> id = omp_get_thread_num();</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">pragma</span> omp parallel for</span></span><br><span class="line">        <span class="keyword">for</span> (i = id; i &lt; m; i += NUM_THREADS)</span><br><span class="line">        &#123;</span><br><span class="line">            funy(mat[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Makeing matrix(10000*10000) &amp; vector(10000*1)...\n&quot;</span>);</span><br><span class="line">    makeRandomMatrix(); </span><br><span class="line">    makeRandomVector();</span><br><span class="line">    <span class="keyword">double</span> start_time = omp_get_wtime();</span><br><span class="line">    f();</span><br><span class="line">    <span class="comment">// for (int i = 0; i &lt; m; i ++) printf(&quot;%d%c\n&quot;, ans[i], &#x27; \n&#x27;[i==n-1]);</span></span><br><span class="line">    <span class="keyword">double</span> end_time = omp_get_wtime();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1 thread --- Running time=%f s\n&quot;</span>, end_time - start_time);</span><br><span class="line">    start_time = omp_get_wtime();</span><br><span class="line">    fp();</span><br><span class="line">    end_time = omp_get_wtime();</span><br><span class="line">    <span class="comment">// for (int i = 0; i &lt; m; i ++) printf(&quot;%d%c\n&quot;, ans[i], &#x27; \n&#x27;[i==n-1]);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;20 threads --- Running time=%f s\n&quot;</span>, end_time - start_time);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>教程分享：</strong></p><ul><li><p><a href="https://www.hz-bin.cn/OpenMP">OpenMP中文教程</a></p></li><li><p><a href="https://www.jianshu.com/p/9931c05f4058">OpenMP中文教程（简书）</a>- 排版比上面好看</p></li><li><p><a href="https://hpc.llnl.gov/tuts/openMP/">OpenMP英文文档</a></p></li><li><p><a href="https://www.cnblogs.com/chihaoyuIsnotHere/p/10552793.html">【高性能并行计算】第二课　加速比和几个定律</a> - 博客园</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 【高性能并行计算】 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高性能计算 </tag>
            
            <tag> 并行计算 </tag>
            
            <tag> OpenMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言】循环控制结构</title>
      <link href="/2021/11/04/2021-31/"/>
      <url>/2021/11/04/2021-31/</url>
      
        <content type="html"><![CDATA[<p>C语言提供 <code>for</code>、<code>while</code> 和 <code>do-while</code> 三种循环语句来实现循环结构。</p><h1 id="while-语句"><a href="#while-语句" class="headerlink" title="while 语句"></a>while 语句</h1><p>先判断，当满足表达式时才执行。（当型循环）</p><blockquote><p>有可能一次都不循环</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (循环控制表达式)</span><br><span class="line">&#123;</span><br><span class="line">    语句序列</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="do-while-语句"><a href="#do-while-语句" class="headerlink" title="do-while 语句"></a>do-while 语句</h1><p>先执行，若满足表达式，再次执行，直到不满足条件为止。（直到型循环）</p><blockquote><p>至少循环一次</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    语句序列</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">while</span>(循环控制表达式)</span><br></pre></td></tr></table></figure><h1 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a>for 语句</h1><p>属于当型循环</p><blockquote><p>知道循环次数的情况下更适合使用该语句</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化表达式；循环控制表达式；增值表达式)</span><br><span class="line">&#123;</span><br><span class="line">    语句序列</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>初始化表达式：一个或多个（逗号分隔）赋值语句，它用来控制变量的初始值；</li><li>循环控制表达式：它决定什么时候退出循环；</li><li>增值表达式：定义控制循环变量每循环一次后按什么方式变化。</li></ul><p>for语句可以用while语句来等价实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (循环控制表达式)</span><br><span class="line">&#123;</span><br><span class="line">    语句序列</span><br><span class="line">    增值表达式;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><hr><h1 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h1><p>嵌套循环（多重循环）就是在循环结构的循环体中又出现循环结构。</p><p>while、do-while 和 for 这三种循环均可以相互嵌套。</p><h1 id="计数控制的循环"><a href="#计数控制的循环" class="headerlink" title="计数控制的循环"></a>计数控制的循环</h1><p>循环次数事先已知的循环称为计数控制的循环。</p><p>习惯上，用 for 语句编写。</p><p>如累加求和、累乘求积问题。</p><h1 id="条件控制的循环"><a href="#条件控制的循环" class="headerlink" title="条件控制的循环"></a>条件控制的循环</h1><p>循环次数事先未知的循环，通常由一个条件控制，称为条件控制的循环。</p><p>用 while 和 do-while 语句编程更方便。 </p><h1 id="流程的转移控制"><a href="#流程的转移控制" class="headerlink" title="流程的转移控制"></a>流程的转移控制</h1><p>goto 语句、break 语句、continue 语句和 return 语句是C语言中用于控制流程转移的跳转语句。</p><h2 id="goto-语句"><a href="#goto-语句" class="headerlink" title="goto 语句"></a>goto 语句</h2><p>goto 语句为无条件转向语句，既可以向下转，也可以往回转。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">goto</span> 语句标号;  <span class="comment">//从这里跳转到最下面 ↓</span></span><br><span class="line">        ......</span><br><span class="line">语句标号:......         <span class="comment">//跳转到这里 ←      ←</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语句标号:......         <span class="comment">//跳转到这里 ←      ←</span></span><br><span class="line">        ......</span><br><span class="line">        <span class="keyword">goto</span> 语句标号;  <span class="comment">//从这里跳转到最上面 ↑</span></span><br></pre></td></tr></table></figure><p>作用是不需要任何条件的情况下直接使程序跳转到语句标号所标识的语句去执行，良好的编程风格应该少用或慎用goto语句。</p><p>例题：读入5个正整数并且显示它们。当程序读入的数据为负数时，程序立即终止。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i,n;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Please enter n:&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n); </span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>)   <span class="keyword">goto</span> END;  <span class="comment">//从这跳转 ↓</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;n = %d\n&quot;</span>,n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">END:<span class="built_in">printf</span>(<span class="string">&quot;n = %d\n&quot;</span>,n);       <span class="comment">//跳到这  ←</span></span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="break-语句"><a href="#break-语句" class="headerlink" title="break 语句"></a>break 语句</h2><p>break 语句除了用于退出switch结构外，还可以用于由 while、do-while 和 for 构成的循环语句的循环体中。当执行循环体遇到break语句时，循环将立即终止，跳出循环语句从之后的第一条语句开始执行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (表达式<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (表达式<span class="number">2</span>) <span class="keyword">break</span>; <span class="comment">//从这里跳出循环到下面第一条语句 ↓</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">循环后的第一条语句       <span class="comment">//跳转到这里 ←                 ←</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (表达式<span class="number">2</span>) <span class="keyword">break</span>; <span class="comment">//从这里跳出循环到下面第一条语句 ↓</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">while</span> (表达式<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">循环后的第一条语句       <span class="comment">//跳转到这里 ←                 ←</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (;表达式<span class="number">1</span>;)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (表达式<span class="number">2</span>) <span class="keyword">break</span>; <span class="comment">//从这里跳出循环到下面第一条语句 ↓</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">循环后的第一条语句       <span class="comment">//跳转到这里 ←                 ←</span></span><br></pre></td></tr></table></figure><p>若希望跳转的位置是循环语句之后的语句，则可以用break语句代替goto语句。</p><p>例题：读入5个正整数并且显示它们。当程序读入的数据为负数时，程序立即终止。（上面用了goto语句，这里用break语句写一遍）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i,n;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Please enter n:&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n); </span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>)   <span class="keyword">break</span>;  <span class="comment">//从这跳转 ↓</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;n = %d\n&quot;</span>,n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;n = %d\n&quot;</span>,n);     <span class="comment">//跳到这  ←</span></span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然break语句和goto语句都可以终止整个循环的执行，但二者的本质区别在于：</p><ul><li>goto语句可以任意方向跳转，控制流程跳转到任意语句</li><li>break语句只能往后跳出，到循环语句之后的第一条语句</li></ul><p>因为goto语句随意跳转可能导致程序流程混乱，break语句可以避免这种情况。</p><h2 id="continue-语句"><a href="#continue-语句" class="headerlink" title="continue 语句"></a>continue 语句</h2><p>当在循环体中遇到continue语句时，程序将跳过continue语句后面的尚未执行的循环语句，重新开始下一次循环，即只结束本次循环的运行，并不终止整个循环的运行。</p><p>意思就是：不跳出这个循环，而是从continue这里回去，继续从头开始执行这个循环。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//某个循环结构</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (表达式) <span class="keyword">continue</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在嵌套循环的情况下，break语句和continue语句只对包含他们的最内层的循环语句起作用，不能用break语句跳出多重循环。跳出多重循环需要用break一层一层地跳出。显然，goto语句是跳出多重循环的一条捷径。</p><!-- # 未整理文稿1C语言指针还不懂嘛，包你听的明明白白，啃透指针地址运算符: &一般注解:后跟一个变量名时，&给出该变量的地址。示例:&nurse表示变量nurse的地址。***间接(或解引用)运算符: ***一般注解:后跟一个指针名或地址时，*给出存储在指针指向地址，上的值。示例:nurse = 22;ptr = &nurse;//指向nurse的指针val = *ptr;// 把ptr指向的地址上的值赋给val执行以上3条语句的最终结果是把22赋给val. int a;下面是重点和难点int* a;int** a;int (*a)【】;int (*a)(int)a) int a;表示一个内存空间，这个空间用来存放一个整数（int）；b) int a;*表示一个内存空间，这个空间用来存放一个指针，这个指针指向一个存放整数的空间，即a)中提到的空间；c) int * a;*表示一个内存空间，这个空间用来存放一个指针，这个指针指向一个存放指针的空间，并且指向的这个空间中的指针，指向一个整数。也简单的说，指向了一个b)中提到的空间；d) int (a)【4】;表示一个内存空间，这个空间用来存放一个指针，这个指针指向一个长度为4、类型为int的数组；和int* a的区别在于，++、+=1之后的结果不一样，其他用法基本相同。以上四种类型见上图表示。*e) int (a)(int);表示一个内存空间，这个空间用来存放一个指针，这个指针指向一个函数，这个函数有一个类型为int的参数，并且函数的返回类型也是int。重点：int p【】和int (p)【】前者是指针数组，后者是指向数组的指针。更详细地说。前: 指针数组;是一个元素全为指针的数组.后: 数组指针;可以直接理解是指针,只是这个指针类型不是int也不是char而是 int 【4】类型的数组.(可以结合函数指针一并看看…)intp【4】------p是一个指针数组，每一个指向一个int型的int (q)【4】---------q是一个指针，指向int【4】的数组。定义涉及两个运算符：“”（间接引用）、“【】”（下标），“【】”的优先级别大于“”的优先级别。 -->]]></content>
      
      
      <categories>
          
          <category> 《C语言程序设计》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言】选择控制结构</title>
      <link href="/2021/11/04/2021-30/"/>
      <url>/2021/11/04/2021-30/</url>
      
        <content type="html"><![CDATA[<p>选择结构，也成分支控制结构。</p><h1 id="单分支选择结构（if）"><a href="#单分支选择结构（if）" class="headerlink" title="单分支选择结构（if）"></a>单分支选择结构（if）</h1><pre><code>if (表达式) 语句1</code></pre><p>例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a&gt;b) max = a;</span><br><span class="line"><span class="keyword">if</span> (a&lt;=b) max = b;</span><br></pre></td></tr></table></figure><h1 id="双分支选择结构（if-else）"><a href="#双分支选择结构（if-else）" class="headerlink" title="双分支选择结构（if-else）"></a>双分支选择结构（if-else）</h1><p>就是在 if 后面加上 else ，组成<code>if-else</code>语句。</p><pre><code>if (表达式) 语句1else        语句2</code></pre><p>例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a&gt;b)   max = a;</span><br><span class="line"><span class="keyword">else</span>       max = b;</span><br></pre></td></tr></table></figure><p>如果语句不止一条，需要加上花括号：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="条件运算符（-）"><a href="#条件运算符（-）" class="headerlink" title="条件运算符（?:）"></a>条件运算符（?:）</h1><p>条件运算符是C语言中唯一的一个三目运算符，运算时需要三个操作数。</p><pre><code>表达式1？表达式2:表达式3</code></pre><p>判断<code>表达式1</code>，满足就执行<code>表达式2</code>，不满足就执行<code>表达式3</code></p><h1 id="多分支选择结构（if-else嵌套）"><a href="#多分支选择结构（if-else嵌套）" class="headerlink" title="多分支选择结构（if-else嵌套）"></a>多分支选择结构（if-else嵌套）</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式)</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(表达式)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="开关语句（switch）"><a href="#开关语句（switch）" class="headerlink" title="开关语句（switch）"></a>开关语句（switch）</h1><p>当问题需要讨论的情况较多（一般≥3种时），通常使用开关语句来代替条件语句。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(整型变量或字符型变量)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">1</span>:语句<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">2</span>:语句<span class="number">2</span>;<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">3</span>:语句<span class="number">3</span>;<span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">case</span> 常量n:语句n;<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:语句n+<span class="number">1</span>;<span class="keyword">break</span>;    <span class="comment">//注意最后一行别漏写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，如果有几种相邻的 case 行执行的语句相同，只保留最下面的语句和 break 即可。</p><h1 id="逻辑运算符及常用运算符"><a href="#逻辑运算符及常用运算符" class="headerlink" title="逻辑运算符及常用运算符"></a>逻辑运算符及常用运算符</h1><table><thead><tr><th>逻辑运算符</th><th>含义</th><th>类型</th></tr></thead><tbody><tr><td>!</td><td>逻辑非</td><td>单目</td></tr><tr><td>&amp;&amp;</td><td>逻辑与</td><td>双目</td></tr><tr><td><code>丨丨</code></td><td>逻辑或</td><td>双目</td></tr></tbody></table><p>常用运算符：</p><ul><li>一元运算符：逻辑非<code>！</code>、求相反数<code>-</code>、<code>++</code>、<code>--</code>、<code>sizeof</code>类型强制转换等</li><li>算术运算符：<code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>%</code></li><li>关系运算符：<code>&lt;</code> <code>&lt;=</code> <code>&gt;=</code> <code>&gt;</code> <code>==</code> <code>!=</code></li><li>逻辑运算符：逻辑与<code>&amp;&amp;</code>、逻辑或<code>||</code></li><li>赋值运算符：<code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 《C语言程序设计》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C语言】简单运算和输入输出</title>
      <link href="/2021/11/03/2021-29/"/>
      <url>/2021/11/03/2021-29/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是顺手写的凌乱笔记，未精心排版，各内容前后也无逻辑关系。</p></blockquote><h1 id="C语言基本结构"><a href="#C语言基本结构" class="headerlink" title="C语言基本结构"></a>C语言基本结构</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我的易错点：</p><ul><li><code>main</code>有时会错写成mian</li><li>命令语句后容易漏写分号</li><li>逗号和分号容易打错成中文符号</li></ul><p>预处理命令（包含头文件）</p><pre><code>#include&lt;stdio.h&gt;</code></pre><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>C语言基本类型：</p><ul><li>基本类型<ul><li>整型：int</li><li>实型（浮点型）：float、double</li><li>字符型：char</li></ul></li><li>构造类型<ul><li>数组</li><li>结构体：struct</li><li>共用体：union</li><li>枚举：enum</li></ul></li><li>指针类型：*</li><li>空类型：void</li></ul><h1 id="数据定义"><a href="#数据定义" class="headerlink" title="数据定义"></a>数据定义</h1><table><thead><tr><th>数据类型</th><th>说明</th><th>对象</th><th>例子</th><th>printf()</th></tr></thead><tbody><tr><td>int</td><td>整型</td><td>整数</td><td><code>int height=18</code></td><td><code>%d</code></td></tr><tr><td>float</td><td>单精度浮点型</td><td>小数</td><td><code>float price=11.1</code></td><td><code>%f</code></td></tr><tr><td>double</td><td>双精度浮点型</td><td>位数更多的小数</td><td><code>double pi=3.1415926</code></td><td><code>%f</code></td></tr><tr><td>char</td><td>字符型</td><td>单个字符</td><td><code>char sex=&#39;M&#39;</code></td><td><code>%c</code></td></tr><tr><td></td><td></td><td>字符串</td><td></td><td><code>%s</code></td></tr></tbody></table><p><strong>define 定义符号常量</strong></p><pre><code>#define 标识符 常量值</code></pre><h1 id="基本语句"><a href="#基本语句" class="headerlink" title="基本语句"></a>基本语句</h1><h2 id="printf-输出语句"><a href="#printf-输出语句" class="headerlink" title="printf 输出语句"></a>printf 输出语句</h2><p>打印文字（其中，<code>\n</code>是换行符，<code>\t</code>是空格）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;我是百里飞洋\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;星河滚烫\t&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;无问西东\t&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="number">23</span>+<span class="number">43</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="number">100</span><span class="number">-23</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><pre><code>我是百里飞洋星河滚烫 无问西东Hello World!6677</code></pre><p>打印基本类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> height=<span class="number">18</span>;</span><br><span class="line">    <span class="keyword">float</span> price=<span class="number">11.1</span>;</span><br><span class="line">    <span class="keyword">double</span> pi=<span class="number">3.1415926</span>;</span><br><span class="line">    <span class="keyword">char</span> sex=<span class="string">&#x27;M&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%f,%f,%c\n&quot;</span>,height,price,pi,sex);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,我是百里飞洋);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><pre><code>18,11.1,3.1415926,M我是百里飞洋</code></pre><p><strong><code>%m.nf</code>前面的小数部分规定输出结果所占空格数</strong></p><p>m表示输出数占的总空格数</p><p>n表示小数点后保留的位数</p><ul><li>若m.n为正，位数不够，输出数据前面补空格</li><li>若m.n为负，位数不够，输出数据后面补空格</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a,b,c;</span><br><span class="line">    a=<span class="number">3.67</span>;</span><br><span class="line">    b=<span class="number">5.43</span>;</span><br><span class="line">    c=<span class="number">6.21</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;设定的a是%5.2f&quot;</span>,b是%<span class="number">-5.2f</span>,c是%<span class="number">7.4f</span>\n,a,b,c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><pre><code>设定的a是 3.67&quot;,b是%5.34 ,c是 6.2100</code></pre><p><strong><code>%e</code>规定以科学计数法输出结果</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    print(<span class="string">&quot;傻狍子的身高是%10.2e厘米\n,123.456&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><pre><code>傻狍子的身高是 1.23e+002厘米</code></pre><p>也就是1.23*10^2厘米</p><h2 id="scanf-输入语句"><a href="#scanf-输入语句" class="headerlink" title="scanf 输入语句"></a>scanf 输入语句</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> a,b,c;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入a,b,c的值：\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf,%lf,%lf&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line"><span class="comment">//下面就可以对abc进行各种运算了</span></span><br></pre></td></tr></table></figure><h2 id="getchar-和putchar-语句"><a href="#getchar-和putchar-语句" class="headerlink" title="getchar()和putchar()语句"></a>getchar()和putchar()语句</h2><p><code>getchar()</code>从键盘得到某个字符</p><p><code>putchar()</code>呈现某个字符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此程序可以将3个大写字母转换为小写字母</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a,b,c;</span><br><span class="line">    a=getchar();</span><br><span class="line">    b=getchar();</span><br><span class="line">    c=getchar();</span><br><span class="line">    a=a+<span class="number">32</span>;</span><br><span class="line">    b=b+<span class="number">32</span>;</span><br><span class="line">    c=c+<span class="number">32</span>;</span><br><span class="line">    <span class="built_in">putchar</span>(a);</span><br><span class="line">    <span class="built_in">putchar</span>(b);</span><br><span class="line">    <span class="built_in">putchar</span>(c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数学运算符"><a href="#数学运算符" class="headerlink" title="数学运算符"></a>数学运算符</h2><p>除了<code>+</code>加、<code>-</code>减、<code>*</code>乘、<code>/</code>除、<code>%</code>取余之外，更高级的数学运算需要添加如下预处理命令</p><pre><code>#include&lt;math.h&gt;</code></pre><p>运算符及优先级：</p><table><thead><tr><th align="center">优先级</th><th align="center">运算符</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><code>()</code></td></tr><tr><td align="center">2</td><td align="center"><code>!</code> <code>正号+</code> <code>负号-</code> <code>自增++</code> <code>自减--</code></td></tr><tr><td align="center">3</td><td align="center"><code>*</code> <code>/</code> <code>%</code></td></tr><tr><td align="center">4</td><td align="center"><code>加+</code> <code>减-</code></td></tr><tr><td align="center">5</td><td align="center"><code>&lt;</code> <code>&lt;=</code> <code>&gt;=</code> <code>&gt;</code></td></tr><tr><td align="center">6</td><td align="center"><code>==</code> <code>!=</code></td></tr><tr><td align="center">7</td><td align="center"><code>&amp;&amp;</code>两边均满足</td></tr><tr><td align="center">8</td><td align="center"><code>丨丨</code>两边满足一个</td></tr><tr><td align="center">9</td><td align="center"><code>?:</code>三目运算符</td></tr><tr><td align="center">10</td><td align="center"><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code></td></tr></tbody></table><h2 id="int-表达式-强制转换"><a href="#int-表达式-强制转换" class="headerlink" title="(int)(表达式) 强制转换"></a>(int)(表达式) 强制转换</h2><p>将实型抹除小数部分，强制转换为整型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此程序可得千位上的数字</span></span><br><span class="line"><span class="keyword">float</span> a=<span class="number">9999.999</span>;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">b=(<span class="keyword">int</span>)(a/<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h1><p><strong>万分感谢学习过程中帮助到我的：</strong></p><p>B站 - <a href="https://www.bilibili.com/video/BV15K411K7bp">《C语言》4小时讲完/不挂科【猴博士爱讲课】</a></p><p>CSDN - <a href="https://blog.csdn.net/qq_23079443/article/details/81108901">c语言入门这一篇就够了-学习笔记(一万字)</a></p><p>CSDN - <a href="https://blog.csdn.net/weixin_44617968/article/details/117656810">13 万字 C 语言从入门到精通保姆级教程2021 年版</a></p>]]></content>
      
      
      <categories>
          
          <category> 《C语言程序设计》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【吐槽】关于我“写博文上瘾”这事</title>
      <link href="/2021/10/31/2021-28/"/>
      <url>/2021/10/31/2021-28/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;自从有了博客开始，不管学习哪一门课、学到什么知识点、有什么乱七八糟想写的，都想创建篇文章发上来，以至于不总结成笔记文章我都潜意识认为我没有认真去学那些东西……<br>&emsp;&emsp;我只想说：<code>总结成博文</code> ≠ <code>学会了内容</code>啊喂！！！！！</p><p>&emsp;&emsp;其实，我今天下午试了一下，从下午4点左右学到晚上9点，边学习数据库第三章，边码字成逻辑清晰的文章，五六个小时的时间才学完一两节的课程，效率确实有点低……为什么呢？因为这做法无异于抄书啊！<br>&emsp;&emsp;人家课本的内容本身就是给你总结好的学习章节，你干嘛费劲巴拉地把稠的捞出来，直接在书上画出来，用的时候翻不行吗？你又不是出辅导书，非得抄录并排版成齐全的笔记文章发到博客看，那你买实体书干啥用？！</p><p>&emsp;&emsp;以后我得适当控制住我的总结瘾，从高中你就是这样，笔记本比谁做的都花里胡哨、逻辑清晰、内容齐全，还用各种荧光笔、各色圆珠笔来突出重点……结果呢？你真的经常翻看吗？？？里边写的东西你真掌握了吗？最后你的笔记本倒是被别人借走然后成为了优质复习书……你付出时间和精力就为了给其他人学习用？做总结笔记的目的是啥啊你自己想清楚！！！为了自己的理解与复习！！！排版再好，内容再全，也没有真正吸收、学会和掌握实在！</p><p>&emsp;&emsp;希望以后你不要为了总结而总结，提高学习效率，真正需要整理成笔记的东西再整理，而且要详略得当，能看懂就行，别把总结变成抄书！！！</p>]]></content>
      
      
      <categories>
          
          <category> 【我的日常】 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【思考】关于何同学AirDesk视频所引发的争议</title>
      <link href="/2021/10/30/2021-27/"/>
      <url>/2021/10/30/2021-27/</url>
      
        <content type="html"><![CDATA[<p>是的没错，【何同学】的新视频…出了点事…<br>严重点儿说，可能直接改变他在粉丝中的形象，<br>可能会因此掉很多粉，当然，也只是猜测。</p><p>发生了什么？Emm…接着看下去吧…</p><blockquote><p><code>特别声明</code>：此文为个人杂谈日记，不接受任何转载！若文章显示在“百里飞洋的博客”之外且非本人发布，均为侵权爬取或无良复制！请认准博文链接:<a href="https://barry-flynn.github.io/2021/10/30/2021-27/">https://barry-flynn.github.io/2021/10/30/2021-27/</a></p></blockquote><hr><h1 id="正片播放"><a href="#正片播放" class="headerlink" title="正片播放"></a>正片播放</h1><p><strong>【何同学】我做了苹果放弃的产品…</strong></p><div style="position: relative; padding: 30% 45%;"><iframe src="//player.bilibili.com/player.html?aid=251187473&bvid=BV19v411M7Rs&cid=426711793&page=1&as_wide=1&high_quality=1&danmaku=" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><pre><code>1354.6万播放 · 总弹幕数6.2万 发布于2021-10-17 20:55:10 全站排行榜最高第1名</code></pre><blockquote><p>ID:<strong>老师好我叫何同学</strong> 丨 <strong>848.9万</strong>粉丝<br>数据统计时间：2021/10/30<br>凌晨1:16 有<strong>826人</strong>同时在看</p></blockquote><hr><h1 id="最初感受"><a href="#最初感受" class="headerlink" title="最初感受"></a>最初感受</h1><p>其实说实话，何同学刚发布完该视频我就点开看了，感受无非就是：<br>“<code>卧槽！我草我艹！！！</code>”<br>“<code>这么炫酷的吗？！</code>”<br>“<code>何同学牛逼！！</code>”<br>看完视频，一个字，爽。<br>可能是因为其中展示的产品，<br>可能更是因为视频剪辑技术的高超，<br>于是，我又二刷了那个视频。</p><p>追踪充电板、摄像头识别、透明屏幕、炫酷动画，电磁铁吸附水杯、久坐提醒、升降桌腿……当时，也就感觉是一个挺正常的、质量挺高的视频吧。</p><p>直到……</p><hr><h1 id="想法转变"><a href="#想法转变" class="headerlink" title="想法转变"></a>想法转变</h1><p>要知道，10月17日这个视频结尾，小何为“乐歌”的升降桌带了货。到了第二天的18号，乐哥股价：</p><blockquote><p><img src="https://i.loli.net/2021/10/30/a69K1DXlWvEo5uZ.png" alt="何同学-乐哥股价.png"></p></blockquote><p>是的，乐哥股份一天之内股价涨了13.51%，我不懂股票这玩意儿哈，但公众号、新闻号、营销号他们说：“<strong>【何同学到底值多少钱？】仅仅源于一支只有7分钟的视频，资本市场终于给出了一个数字：5.5亿。谁能想到，就连金钱永不眠的华尔街都很难轻易达成的数字，如今切实地发生在了做家居的乐歌股份身上。而这一切都仅仅源于一支只有7分钟的视频。</strong>”</p><p>我当时就半震惊半疑惑，这夸得是不是有点太过了…我虽然不懂股票这玩意儿，但我起码也知道它的涨跌也是会被多方面影响的吧，虽然何同学是个粉丝量很高的博主，但不至于全是因为一个恰饭视频吧……</p><p>而且我似乎嗅出了一股“造神”的味道…（不知道这样说准不准确）</p><hr><p>然后过了几天，我在热门刷到了这个视频：</p><p><strong>【我用十分之一成本做了何同学AirDesk平替】</strong><br>ID：浦原商店扫地工</p><iframe src="//player.bilibili.com/player.html?aid=463828477&bvid=BV1yL411g7TP&cid=432383393&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>他简化了何同学的方法，采用了廉价的投影仪而非透明显示屏幕，简单复刻了何同学展示的那个产品的部分功能。我一开始也觉得这个视频挺好的，直到刷到下面的评论：</p><blockquote><p><img src="https://i.loli.net/2021/10/30/NUkDYeFm4CyAv2p.png" alt="何同学AirDesk平替版视频评论1.png"><br><img src="https://i.loli.net/2021/10/30/BGhlScfUMDLxOHK.png" alt="何同学AirDesk平替版视频评论2.png"><br><img src="https://i.loli.net/2021/10/30/DCK5VUF3OHBa6L4.png" alt="何同学AirDesk平替版视频评论3.png"></p></blockquote><p>然后我就回去又看了一遍何同学的视频，只能说，看完后五味杂陈。以（一个还算对PR和AE等后期剪辑软件有点接触的）我的直觉来说，何同学视频中的炫酷动画确实是荧光特效……瞬间我就觉得，好索然无味啊……（3分59秒，屏幕下那只猫竟然透过了手机……）</p><hr><p>翻开何同学那个视频的评论区，前排热评全在夸，甚至有某位大UP主评价道：<br><code>妈的，我看到了乔布斯</code><br>有人回复：<br><code>还真是，这就是当年老乔在的时候的苹果发布会给人的感觉，惊艳，震撼，超前。</code><br>我的内心：<br><code>？？？老人，地铁，手机。</code></p><blockquote><p><img src="https://i.loli.net/2021/10/30/zZb8xjstp4hr95V.png" alt="何同学AirDesk视频评论前排热评 _3_.png"><br><img src="https://i.loli.net/2021/10/30/8WkvgxOf6FALdGr.png" alt="何同学AirDesk视频评论前排热评 _10_.png"><br><img src="https://i.loli.net/2021/10/30/gJi4UXOklAyvstq.png" alt="何同学AirDesk视频评论前排热评 _11_.png"><br><img src="https://i.loli.net/2021/10/30/Ncr5R2bwpJZfPXm.png" alt="何同学AirDesk视频评论前排热评 _12_.png"><br><img src="https://i.loli.net/2021/10/30/TPAxLs2M6Yb7gcR.png" alt="何同学AirDesk视频评论前排热评 _14_.png"></p></blockquote><hr><ul><li><strong>随着继续往后翻，</strong></li><li><strong>评论的味道也逐渐开始变了：</strong></li></ul><blockquote><p><img src="https://i.loli.net/2021/10/30/PM3sf8t62BNpdil.png" alt="何同学AirDesk视频评论前排热评 _13_.png"><br><img src="https://i.loli.net/2021/10/30/pNRBo3LaI7gOjxQ.png" alt="何同学AirDesk视频评论前排热评 _4_.png"><br><img src="https://i.loli.net/2021/10/30/MnTDq63rUt9QeW8.png" alt="何同学AirDesk视频评论前排热评 _6_.png"><br><img src="https://i.loli.net/2021/10/30/EwXFbYQMqaGR3de.png" alt="何同学AirDesk视频评论前排热评 _5_.png"><br><img src="https://i.loli.net/2021/10/30/MzxZAjKlaFyieQJ.png" alt="何同学AirDesk视频评论前排热评 _7_.png"><br><img src="https://i.loli.net/2021/10/30/3Y7bqFWdrHvCyuM.png" alt="何同学AirDesk视频评论前排热评 _8_.png"><br><img src="https://i.loli.net/2021/10/30/eW8LYEhZt6rgF9O.png" alt="何同学AirDesk视频评论前排热评 _9_.png"><br><img src="https://i.loli.net/2021/10/30/Euv1FXcbQTPYq4N.png" alt="何同学AirDesk视频评论前排热评 _23_.png"><br><img src="https://i.loli.net/2021/10/30/tNm617RuGBobQJk.png" alt="何同学AirDesk视频评论前排热评 _19_.png"><br><img src="https://i.loli.net/2021/10/30/OJGMh4Rs8VmyQDc.png" alt="何同学AirDesk视频评论前排热评 _17_.png"><br><img src="https://i.loli.net/2021/10/30/CSd9x78oLZmTKu2.png" alt="何同学AirDesk视频评论前排热评 _20_.png"><br><img src="https://i.loli.net/2021/10/30/vUedW9Nn348fhRr.png" alt="何同学AirDesk视频评论前排热评 _21_.png"><br><img src="https://i.loli.net/2021/10/30/iMTfjrYG1lCpLdo.png" alt="何同学AirDesk视频评论前排热评 _22_.png"><br><img src="https://i.loli.net/2021/10/30/l7bwyhsezWnLxSK.png" alt="何同学AirDesk视频评论前排热评 _25_.png"><br><img src="https://i.loli.net/2021/10/30/g5fwtCvsPB2d6by.png" alt="何同学AirDesk视频评论前排热评 _24_.png"><br><img src="https://i.loli.net/2021/10/30/lhRwDnvFaigbSOe.png" alt="何同学AirDesk视频评论前排热评 _28_.png"><br><img src="https://i.loli.net/2021/10/30/kwXSB8lUHvnLIOg.png" alt="何同学AirDesk视频评论前排热评 _26_.png"><br><img src="https://i.loli.net/2021/10/30/xnb2FM6ZsAimqlI.png" alt="何同学AirDesk视频评论前排热评 _29_.png"></p></blockquote><hr><h1 id="现在感受"><a href="#现在感受" class="headerlink" title="现在感受"></a>现在感受</h1><p>Emm……无法言喻……<br>看着B站评论框里的默认内容“发一条友善的言论”，再看着评论区里站在不同立场的人发表的不同的评论：<strong>有夸视频做的好的，有夸创意绝妙的，有表达得知是特效后的愤怒的，有看不下去何同学被骂那么惨的，有趁乱跺一脚的，有疯狂复制粘贴向不明白发生了什么的人告知何同学的“劣迹”的，有阴阳怪气变相捧杀来讽刺的，有吃瓜看热闹的，还有跟我一样不知道说什么的……</strong></p><p>其实，何世杰的视频并不算是很硬核的数码/科技视频，相信更多的人和我一样，是喜欢他的略带鸡汤的文案和稍稍贩卖情怀的文艺题材，以及制作精良的视频效果。他的视频并没有过多看不懂的参数啥的，几乎没有观看门槛，再加上年龄差不多大，所以会有很多的共鸣感吧。</p><p>但确实，这次的特效视频，不仔细看的话也实在挺唬人的……如果视频中当时能够加上几句“<strong>受透明屏幕目前的技术限制，显示的亮度和分辨率可能会不太令人满意。为了呈现更好的视觉效果，我们用后期特效来还原一下，当屏幕技术更好一些时会呈现出怎样的效果吧！</strong>”应该会好很多，而不是之后被大家揪出来，你说对吗，小何？</p><hr><h1 id="想对小何说的话"><a href="#想对小何说的话" class="headerlink" title="想对小何说的话"></a>想对小何说的话</h1><p>这几位老哥说的都挺好的：</p><blockquote><p><img src="https://i.loli.net/2021/10/30/iNWFoeQkE95VOzZ.png" alt="何同学AirDesk视频评论前排热评 _15_.png"><br><img src="https://i.loli.net/2021/10/30/YOX1PNKQF9yHVT7.png" alt="何同学AirDesk视频评论前排热评 _18_.png"><br><img src="https://i.loli.net/2021/10/30/2QDZRHYuECBIkwg.png" alt="何同学AirDesk视频评论前排热评 _16_.png"><br><img src="https://i.loli.net/2021/10/30/ElcrXs9JIHdPet2.png" alt="何同学AirDesk视频评论前排热评 _27_.png"></p></blockquote><p>只想说，Emm…<br>你现在被捧得太高了，真的。又是代表B站的“后浪”，又是青年大学习特邀主讲人，还是央视新闻央视记录采访的对象，又视频连线苹果公司CEO库克……就像你在<a href="https://www.bilibili.com/video/BV14T4y1Z7oK">【如果能回到过去 我会选择什么样的生活？】</a>视频里说的那样，你有点过早输出了，作为一个仅仅本科毕业的学生，知识储备还不太够，只靠创意和影视技术是很容易江郎才尽的……也正因为年轻，可能也会做出一些不太恰当的决定。还有，网络的水太深……</p><p>何世杰同学，我依旧很期待你下一次的视频，但，还是希望你能够踏踏实实走下去。记住你的 ID 叫“<strong>老师好我叫何同学</strong>”，放下浮躁的心，继续学习更多的知识才能产出更多地内容。加油吧，我也不知道还能够说什么。</p><hr><h1 id="【2021年11月6日更新】"><a href="#【2021年11月6日更新】" class="headerlink" title="【2021年11月6日更新】"></a>【2021年11月6日更新】</h1><p>距离写出这篇文章已经一周了，今天为止，何同学的那个视频还在被冲，目前的数据是：</p><pre><code>1535.4万播放总弹幕数6.6万2021-10-17 20:55:1050344评论</code></pre><p>AirDesk视频已经成为了继他首次出圈的5G视频之外的第二大播放量的作品了，粉丝数从10月30日凌晨我创建这篇文章时的“<strong>848.9万</strong>”飙涨至现在的“<strong>860.8万</strong>”……看来与我当初认为的可能会因此掉粉的猜测大不相同，当然也可能是因为新粉的吸收速度远远大于老粉的取关速度。</p><p>其实除了不加以说明的特效问题，该视频另一个很大的问题是“指米为果”。有评论道：</p><blockquote><p>“把小米移动充电设备改装一下，再把小米透明电视拆下来做成桌子，加上特效最后起个带苹果的标题。小米总监王腾已经锤过何同学了。[滑稽.jpg]”</p></blockquote><p>于是我去微博看了一下“小米公司 Redmi产品总监”<a href="https://weibo.com/1654901425/KDgKAkTTN?type=comment">@王腾Thomas</a>的微博：</p><blockquote><p><img src="https://i.loli.net/2021/11/06/NBQqDwcFOedU2Y6.png" alt="20211106-小米总监微博.png"></p></blockquote><p>Emm…这好家伙，再加上B站视频评论区有好几个小米的账号来评论，这个事件直接转变成了果粉与米粉的骂战了又……</p><p>而且如今的B站评论区也是群魔乱舞，阴阳怪气者无数，骂得真是狗血淋头，不知道的还以为何世杰犯了什么伤天害理的事情呢，甚至于看到了下面让我毛骨悚然的评论：“<strong>赶紧把何世杰从顶峰狠狠摔死</strong>”。</p><blockquote><p><img src="https://i.loli.net/2021/11/06/3qgOCUdaMLbkI6e.png" alt="20211106-B站评论.png"></p></blockquote><p>我看着评论框里“<strong>发一条友善的评论</strong>”，陷入沉思。在如今这个自媒体如雨后春笋般冒出的时代，流量是自媒体的饭碗，粉丝是自媒体的“观众老爷”，无论过去的你如何辉煌，无论之前的你影响力多么大，一旦你触碰到某一条模糊的线，之前把你捧上天的那些人会立即翻脸并回踩，并吸引路人加入一场口诛笔伐的战争中。即便你平时多么注意与粉丝的互动，出事之后，真正站在你的位置和你共情的人少之又少，即便有，也大概率会为了不当众人的活靶子而选择沉默。</p><blockquote><p><img src="https://i.loli.net/2021/11/06/iePMqIJabhp5OyD.png" alt="20211106-何同学视频微博评论.png"></p></blockquote><p>毕竟，很多观众可能只是懵懂的中小学生，或是善于躲在屏幕后面的匿名叫嚣者。</p><p>不是给何世杰洗白，视频选题和内容做的确实不合适，也不是反对大伙去评论区批评他。而是看到了评论区一些躲在屏幕后面兴奋地疯狂复制粘贴的账号，以及一些类似微博控评水军带节奏的影子。</p><blockquote><p><img src="https://i.loli.net/2021/11/06/ZX9K1wLABmguPWG.png" alt="20211106-B站评论2.png"></p></blockquote><p>当然，被人冲的原因之一，可能还有，几个官方一直以来将何世杰作为了中国新时代青年以及“后浪”的代表，但何世杰的家庭出身和生活水平却不是大多数青年人最真实的形象，于是不知不觉中早已成为了很多人的“眼中钉”。</p><p>因流量而火，也因流量而被反噬。</p><p><br /><br /><br /><br><strong>THE END.</strong><br><strong>本文完。</strong></p><blockquote><p><code>注意</code>：本文仅代表撰写当前文章时我的主观想法，观点难免会有失偏颇不够客观。此外，文中截图的评论头像和ID未打码不是用来挂人的，而是因为本来就是公开的评论，也没必要去糊上一层马赛克了。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 【思想杂谈】 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【数据库】第3章 关系数据库标准语言SQL</title>
      <link href="/2021/10/29/2021-26/"/>
      <url>/2021/10/29/2021-26/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文所属《数据库系统原理》分类专栏，相关文章导航请点击<a href="https://barry-flynn.github.io/2021/09/29/2021-5/">《数据库系统原理》目录汇总贴</a></p></blockquote><h1 id="一、SQL概述"><a href="#一、SQL概述" class="headerlink" title="一、SQL概述"></a>一、SQL概述</h1><p>SQL（Structured Query Language，结构化查询语言），是关系数据库的标准语言。<br><strong>【SQL的功能】：</strong></p><table><thead><tr><th>功能</th><th>动词</th></tr></thead><tbody><tr><td>数据查询</td><td>SELECT</td></tr><tr><td>数据定义</td><td>CREATE, DROP, ALTER</td></tr><tr><td>数据操纵</td><td>INSERT, UPDATE, DELETE</td></tr><tr><td>数据控制</td><td>GRANT, REVOKE</td></tr></tbody></table><blockquote><p>数据查询：<code>select</code>选择<br>数据定义：<code>create</code>创建, <code>drop</code>删除, <code>alter</code>更改<br>数据操纵：<code>insert</code>插入, <code>update</code>更新, <code>delete</code>删除<br>数据控制：<code>grant</code>授予, <code>revoke</code>收回</p></blockquote><p><strong>【SQL的特点】：</strong></p><ol><li>综合统一；</li><li>高度非过程化；</li><li>面向集合的操作方式；</li><li>以同一种语法结构进行多种使用；</li><li>语言简洁，易学易用；</li></ol><p><strong>【SQL的基本概念】：</strong><br>支持SQL的关系数据库管理系统，同样支持关系数据库的三级模式结构。</p><blockquote><p><img src="https://i.loli.net/2021/10/29/pQbMf9deNZ5OmFc.png" alt="3.1.3 SQL对关系数据库模式的支持.png"></p></blockquote><p>用户可以用SQL对基本表和视图进行查询和其他操作，基本表和视图一样，都是关系。</p><p>基本表是本身独立存在的表，在关系数据库管理系统中，一个关系就对应一个基本表。</p><p>视图是从一个或几个基本表导出的表，本身不独立储存在数据库中，因此视图是一个虚表。</p><hr><h1 id="二、学生-课程数据库"><a href="#二、学生-课程数据库" class="headerlink" title="二、学生-课程数据库"></a>二、学生-课程数据库</h1><p>本章以学生-课程数据库为例，来讲解SQL的数据定义、数据操纵、数据查询和数据控制语句。</p><blockquote><p>【学生-课程模式 S-T 】（加粗为主码）<br>学生表：Student(<strong>Sno</strong>,Sname,Ssex,Sage,Sdept)<br>课程表：Course(<strong>Cno</strong>,Cname,Cpno,Ccredit)<br>学生选课表：SC(<strong>Sno</strong>,<strong>Cno</strong>,Grade)    </p></blockquote><h2 id="学生表：Student"><a href="#学生表：Student" class="headerlink" title="学生表：Student"></a>学生表：Student</h2><blockquote><p><img src="https://i.loli.net/2021/10/30/RczNnKHVP8FAY6L.png" alt="3.2_a_学生表.png"></p></blockquote><h2 id="课程表：Course"><a href="#课程表：Course" class="headerlink" title="课程表：Course"></a>课程表：Course</h2><blockquote><p><img src="https://i.loli.net/2021/10/30/cdw1MSsDg4fnFe8.png" alt="3.2_b_课程表.png"></p></blockquote><h2 id="学生选课表：SC"><a href="#学生选课表：SC" class="headerlink" title="学生选课表：SC"></a>学生选课表：SC</h2><blockquote><p><img src="https://i.loli.net/2021/10/30/m8K7zyr6BUxRNeq.png" alt="3.2_c_选课表.png"></p></blockquote><hr><h1 id="三、数据定义"><a href="#三、数据定义" class="headerlink" title="三、数据定义"></a>三、数据定义</h1><p>SQL数据定义功能的操作对象包括：模式、表、视图、索引。</p><blockquote><p><img src="https://i.loli.net/2021/10/29/wPAgv8Sa91sM2Vn.png" alt="3.3 SQL的数据定义语句.png"><br>其中SQL标准不提供“修改模式定义”和“修改视图定义”的操作，只能先删除再重建。SQL标准也不提供“索引”相关语句，图中最后一行的语句是为了提高查询效率，商用关系数据库管理系统提供的索引机制和语句。</p></blockquote><p>一个关系数据库管理系统可以建立多个数据库，<br>一个数据库可以建立多个模式，<br>一个模式通常包括多个表、视图、索引等数据库对象。</p><hr><h2 id="1、模式的定义与删除"><a href="#1、模式的定义与删除" class="headerlink" title="1、模式的定义与删除"></a>1、模式的定义与删除</h2><h3 id="（1）定义模式"><a href="#（1）定义模式" class="headerlink" title="（1）定义模式"></a>（1）定义模式</h3><p>模式定义语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SCHEMA <span class="operator">&lt;</span>模式名<span class="operator">&gt;</span> <span class="keyword">AUTHORIZATION</span> <span class="operator">&lt;</span>用户名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>create schema &lt;模式名&gt; authorization &lt;用户名&gt;;<br>创建 模式 &lt;模式名&gt; 授权 &lt;用户名&gt;;<br>（若没有“模式名”，则隐含为“用户名”）</p></blockquote><p>例如，为用户 ZHANG 创建一个模式 TEST</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SCHEMA TEST <span class="keyword">AUTHORIZATION</span> ZHANG;</span><br></pre></td></tr></table></figure><p>要创建模式，调用该命令的用户必须拥有数据库管理员权限，或者获得数据库管理员授予的 CREATE SCHEMA 的权限。</p><h3 id="（2）删除模式"><a href="#（2）删除模式" class="headerlink" title="（2）删除模式"></a>（2）删除模式</h3><p>模式删除语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> SCHEMA <span class="operator">&lt;</span>模式名<span class="operator">&gt;</span><span class="operator">&lt;</span>CASCADE丨RESTRICT<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>drop schema &lt;模式名&gt;&lt;cascade丨restrict&gt;;<br>删除 模式  &lt;模式名&gt;&lt;级联丨限制&gt;</p></blockquote><p>其中CASCADE和RESTRICT两者必选其一。<br><code>CASCADE（级联）</code>：在删除数据库的同时把该模式中的所有数据库对象全部删除。<br><code>RESTRICT（限制）</code>：如果该模式中定义了下属的数据库对象（如表、视图等），则拒绝该删除语句的执行。 仅当该模式中没有任何下属的对象时才能执行DROP SCHEMA语句。</p><p>例如，下面语句表示删除了模式 ZHANG，同时由于选择了级联，已经定义的表也会被删除。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> SCHEMA ZHANG CASCADE;</span><br></pre></td></tr></table></figure><hr><h2 id="2、基本表的定义、删除与修改"><a href="#2、基本表的定义、删除与修改" class="headerlink" title="2、基本表的定义、删除与修改"></a>2、基本表的定义、删除与修改</h2><p>创建完一个模式，就建立了一个数据库的命名空间，一个框架。在这个空间中首先要定义的是该模式包含的数据库基本表。</p><h3 id="（1）定义基本表"><a href="#（1）定义基本表" class="headerlink" title="（1）定义基本表"></a>（1）定义基本表</h3><p>基本表定义语句基本格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> (<span class="operator">&lt;</span>列名<span class="operator">&gt;</span><span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span>[列级完整性约束条件]</span><br><span class="line">                    [,<span class="operator">&lt;</span>列名<span class="operator">&gt;</span><span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span>[列级完整性约束条件]]</span><br><span class="line">                    ...</span><br><span class="line">                    [,<span class="operator">&lt;</span>表级完整性约束条件<span class="operator">&gt;</span>]);</span><br></pre></td></tr></table></figure><blockquote><p><code>&lt;表名&gt;</code>：所要定义的基本表的名字<br><code>&lt;列名&gt;</code>：组成该表的各个属性（列）<br><code>&lt;列级完整性约束条件&gt;</code>：涉及相应属性列的完整性约束条件<br><code>&lt;表级完整性约束条件&gt;</code>：涉及一个或多个属性列的完整性约束条件<br><code>&lt;数据类型&gt;</code>：定义表的各个属性时需要指明其数据类型及长度，以此来保证每一个属性来自一个特定的域。</p></blockquote><blockquote><p>几种常用的数据类型（请看课本P83~84表格）<br>定义基本表时，有三种方法定义他所属的模式（请看课本P84）</p></blockquote><p>例如，建立一个“学生”表 Student</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student </span><br><span class="line">    (Sno <span class="type">CHAR</span>(<span class="number">9</span>) <span class="keyword">PRIMARY</span> KEY,       <span class="comment">/*列级完整性约束条件，Sno 是主码（primary key）*/</span></span><br><span class="line">    Sname <span class="type">CHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span>,          <span class="comment">/*Sname 取唯一值（unique：唯一的）*/</span></span><br><span class="line">    Ssex <span class="type">CHAR</span>(<span class="number">2</span>),</span><br><span class="line">    Sage <span class="type">SMALLINT</span>,</span><br><span class="line">    Sdept <span class="type">CHAR</span>(<span class="number">20</span>)</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>例如，建立一个“课程”表 Course</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Course</span><br><span class="line">    (Cno <span class="type">CHAR</span>(<span class="number">4</span>) <span class="keyword">PRIMARY</span> KEY,       <span class="comment">/*列级完整性约束条件，Sno 是主码*/</span></span><br><span class="line">    Cname <span class="type">CHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,        <span class="comment">/*列级完整性约束条件，Cname 不能取空值*/</span></span><br><span class="line">    Cpno <span class="type">CHAR</span>(<span class="number">4</span>),                   <span class="comment">/*Cpno 的含义是先修课*/</span></span><br><span class="line">    Ccredit <span class="type">SMALLINT</span>,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (Cpno) <span class="keyword">REFERENCES</span> Course(Cno) </span><br><span class="line">        <span class="comment">/*foreign key：外码 ；references：参照*/</span></span><br><span class="line">        <span class="comment">/*表级完整性约束条件，Cpno 是外码，被参照表是 Course，被参照列是 Cno*/</span></span><br><span class="line">        <span class="comment">/*本例说明参照表和被参照表可以是同一个表*/</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>例如，建立学生选课表 SC</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC</span><br><span class="line">    (Sno <span class="type">CHAR</span>(<span class="number">9</span>),      </span><br><span class="line">    Cno <span class="type">CHAR</span>(<span class="number">4</span>),                   </span><br><span class="line">    Grade <span class="type">SMALLINT</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (Sno.Cno),  <span class="comment">/*主码由两个属性构成，涉及多个属性时必须作为表级完整性进行定义*/</span></span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (Sno) <span class="keyword">REFERENCES</span> Student(Sno),</span><br><span class="line">        <span class="comment">/*表级完整性约束条件，Sno 是外码，被参照表是 Student，被参照列是 Sno*/</span></span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (Cno) <span class="keyword">REFERENCES</span> Course(Cno),</span><br><span class="line">        <span class="comment">/*表级完整性约束条件，Cno 是外码，被参照表是 Course，被参照列是 Cno*/</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h3 id="（2）修改基本表"><a href="#（2）修改基本表" class="headerlink" title="（2）修改基本表"></a>（2）修改基本表</h3><p>基本表修改语句一般格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line">[<span class="keyword">ADD</span> [<span class="keyword">COLUMN</span>] <span class="operator">&lt;</span>新列名<span class="operator">&gt;</span><span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> [完整性约束]]</span><br><span class="line">[<span class="keyword">ADD</span> <span class="operator">&lt;</span>表级完整性约束<span class="operator">&gt;</span>]</span><br><span class="line">[<span class="keyword">DROP</span> [<span class="keyword">COLUMN</span>] <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> [CASCADE丨RESTRICT ]] </span><br><span class="line">[<span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span><span class="operator">&lt;</span>完整性约束名<span class="operator">&gt;</span> [CASCADE丨RESTRICT ]]    <span class="comment">/*drop constraint：下降约束（机翻）*/</span></span><br><span class="line">[<span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span><span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span>];                         <span class="comment">/*alter column：修改列*/</span></span><br></pre></td></tr></table></figure><blockquote><p><code>&lt;表名&gt;</code>：要修改的基本表<br><code>ADD子句</code>：增加新列、新的列级完整性约束条件、新的表级完整性约束条件。<br><code>DROP CONSTRAINT子句</code>：删除表中的列。<br>（1）若指定了 CASCADE（级联）短语，则自动删除引用了该列的其他对象，比如视图。<br>（2）若指定了 RESTRICT（限制）短语，则如果该列被其他对象引用，RDBMS（关系数据库）将拒绝删除该列。<br><code>DROP CONSTRAINT子句</code>：删除指定的完整性约束条件。<br><code>ALTER COLUMN子句</code>：修改原有的列定义，包括修改列名和数据类型。</p></blockquote><p>例如，向 Student 表增加“入学时间”列，其数据类型为日期型<br>(不论基本表中原来是否已有数据，新增加的列一律为空值)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Student <span class="keyword">ADD</span> S_entrance <span class="type">DATE</span>;</span><br></pre></td></tr></table></figure><p>例如，将年龄的数据类型由字符型（假设原来是）改为整数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Student <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> Sage <span class="type">INT</span>;</span><br></pre></td></tr></table></figure><p>例如，增加课程名称必须取唯一值的约束条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Course <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span>(Cname);</span><br></pre></td></tr></table></figure><h3 id="（3）删除基本表"><a href="#（3）删除基本表" class="headerlink" title="（3）删除基本表"></a>（3）删除基本表</h3><p>基本表删除语句一般格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> [CASCADE丨RESTRICT]</span><br></pre></td></tr></table></figure><blockquote><p>（1）若指定了 CASCADE（级联）短语，则该表的删除没有限制条件。在删除表的同时，相关的依赖对象，比如视图，都将被一起删除。（因此删表时要格外小心）<br>（2）若指定了 RESTRICT（限制）短语，则表的删除是有限制条件的。要删除的基本表不能被其他表的约束所引用（如 CHECK, FOREIGN KEY 等约束），不能有视图，不能有触发器（trigger），不能有储存过程或函数等。如果存在这些依赖该表的对象，则此表不能被删除。（<strong>默认情况是这个</strong>）</p></blockquote><p>例如，删除 Student 表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> StudentCASCADE;</span><br></pre></td></tr></table></figure><p>例如，若表上建有视图，选择RESTRICT(限制)短语时表不能删除；选择CASCADE(级联)短语时可以删除表，视图也会被删除。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码演示在课本P86例题<span class="number">3.12</span></span><br></pre></td></tr></table></figure><h2 id="3、索引的建立与删除"><a href="#3、索引的建立与删除" class="headerlink" title="3、索引的建立与删除"></a>3、索引的建立与删除</h2><p>数据库索引有多种类型，常见的包括：</p><ol><li>顺序文件上的索引</li><li>B+树索引</li><li>散列索引</li><li>位图索引</li></ol><h3 id="（1）建立索引"><a href="#（1）建立索引" class="headerlink" title="（1）建立索引"></a>（1）建立索引</h3><p>索引建立语句一般格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span>] [CLUSTER] INDEX <span class="operator">&lt;</span>索引名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">ON</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>(<span class="operator">&lt;</span>列名<span class="operator">&gt;</span> [<span class="operator">&lt;</span>次序<span class="operator">&gt;</span>] [, <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> [<span class="operator">&lt;</span>次序<span class="operator">&gt;</span>]]...);</span><br></pre></td></tr></table></figure><blockquote><p><code>&lt;表名&gt;</code>：是要建索引的基本表的名字<br><code>UNIQUE</code>：表名此索引的每一个索引值只对应唯一的数据记录。<br><code>CLUSTER</code>：表示要建立的索引是聚簇索引。</p></blockquote><p>例如，为学生-课程数据库中的 Student、Course 和 SC 三个表建立索引。其中 Student 表按学号升序建唯一索引，Course 表按课程号升序建唯一索引，SC 表按学号升序和课程号降序建唯一索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX Stusno <span class="keyword">ON</span> Student(Sno);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX Coucno <span class="keyword">ON</span> Course(Cno);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX SCno <span class="keyword">ON</span> SC(Sno <span class="keyword">ASC</span>,Cno <span class="keyword">DESC</span>);</span><br></pre></td></tr></table></figure><h3 id="（2）修改索引"><a href="#（2）修改索引" class="headerlink" title="（2）修改索引"></a>（2）修改索引</h3><p>对已经建立的索引重新命名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> INDEX <span class="operator">&lt;</span>旧索引名<span class="operator">&gt;</span> RENAME <span class="keyword">TO</span> <span class="operator">&lt;</span>新索引名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><p>例如，将 SC 表的 SCno 索引名改为SCSno</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> INDEX SCno RENAME <span class="keyword">TO</span> SCSno;</span><br></pre></td></tr></table></figure><h3 id="（3）删除索引"><a href="#（3）删除索引" class="headerlink" title="（3）删除索引"></a>（3）删除索引</h3><p>建立索引是为了减少查询操作的时间，但如果数据增、删、改频繁，系统会花费很多时间来维护索引，从而降低了查询效率。这时可以删除一些不必要的索引。</p><p>索引删除语句一般格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX <span class="operator">&lt;</span>索引名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><p>例如，删除 Student 表的 Stusname 索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX Stusname;</span><br></pre></td></tr></table></figure><p>删除索引时，系统会同时从数据字典中删去有关该索引的描述。</p><h2 id="4、数据字典"><a href="#4、数据字典" class="headerlink" title="4、数据字典"></a>4、数据字典</h2><p>数据字典是关系数据库管理系统内部的一组系统表，它记录了数据库中所有的定义信息包括关系模式定义、视图定义、索引定义、完整性约束定义、各类用户对数据库的操作权限、统计信息等。关系数据库管理系统在执行SQL的数据定义语句时，实际上就是在更新数据字典表中的相应信息。在进行查询优化和查询处理时，数据字典中的信息是其重要依据。</p><hr><h1 id="四、数据查询"><a href="#四、数据查询" class="headerlink" title="四、数据查询"></a>四、数据查询</h1><p>数据查询是数据库的核心操作。<br>查询语句有灵活的使用方式和丰富的功能，一般格式为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span>丨DISTINGCT] <span class="operator">&lt;</span>目标列表达式<span class="operator">&gt;</span> [,<span class="operator">&lt;</span>目标列表达式<span class="operator">&gt;</span>]...</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表名或视图名<span class="operator">&gt;</span> [,<span class="operator">&lt;</span>表名或视图名<span class="operator">&gt;</span>...]丨(SELECTUI语句) [<span class="keyword">AS</span>] <span class="operator">&lt;</span>别名<span class="operator">&gt;</span></span><br><span class="line">[<span class="keyword">WHERE</span> <span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span>]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span> [<span class="keyword">HAVING</span> <span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span>]]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span> [<span class="keyword">ASC</span>丨<span class="keyword">DESC</span>]];</span><br></pre></td></tr></table></figure><p>整个 SELECT 语句的含义是，根据 WHERE 子句的条件表达式从 FROM 子句指定的基本表、视图或派生表中找出满足条件的元组，再按 SELECT 子句中的目标列表达式选出元组中的属性值形成结果表。</p><blockquote><p>（1）如果有<code>GROUP BY</code>子句，则将结果按&lt;列名1&gt;的值进行分组，该属性列值相等的一个元组为一个组。通常会在每组中作用聚集函数。如果GROUP BY子句带 <code>HAVING</code> 短语，则只有满足指定条件的组才予以输出。<br>（2）如果有<code>ORDER BY</code>子句，则结果表还要按&lt;列名2&gt;的值的升序或降序排列。</p></blockquote><p>SELECT 语句既可以完成简单的<strong>单表查询</strong>，也可以完成复杂的<strong>连接查询</strong>和<strong>嵌套查询</strong>。下面以学生-课程数据库为例，说明 SELECT 语句的各种用法。</p><h2 id="1、单表查询"><a href="#1、单表查询" class="headerlink" title="1、单表查询"></a>1、单表查询</h2><p>指仅涉及一个表的查询。</p><h3 id="》选择表中的若干列"><a href="#》选择表中的若干列" class="headerlink" title="》选择表中的若干列"></a>》选择表中的若干列</h3><p>选择表中的全部或部分列，即关系代数的投影运算。</p><h4 id="（1）查询指定列"><a href="#（1）查询指定列" class="headerlink" title="（1）查询指定列"></a><strong>（1）查询指定列</strong></h4><p>例如，查询全体学生的学号与姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Sname</span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure><p>例如，查询全体学生的姓名、学号、所在系</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Sno,Sdept</span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure><h4 id="（2）查询全部列"><a href="#（2）查询全部列" class="headerlink" title="（2）查询全部列"></a><strong>（2）查询全部列</strong></h4><p>例如，查询全体学生的详细记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br><span class="line"></span><br><span class="line">等价于列出所有列名：</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Ssex,Sage,Sdept</span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure><h4 id="（3）查询经过计算的值"><a href="#（3）查询经过计算的值" class="headerlink" title="（3）查询经过计算的值"></a><strong>（3）查询经过计算的值</strong></h4><p>例如，查询全体学生的姓名及其出生年份<br>用现在的年份（本文写于2021年）减去学生的年龄，即可得到学生的出生年份。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,<span class="number">2021</span><span class="operator">-</span>Sage  <span class="comment">/*查询结果的第2列是一个算术表达式*/</span></span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure><p>例如，查询全体学生的姓名、出生年份和所在的院系，要求用小写字母表示系名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,<span class="string">&#x27;Year of Birth:&#x27;</span>,<span class="number">2014</span><span class="operator">-</span>Sage,<span class="built_in">LOWER</span>(Sdept)</span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure><p>我们还可以通过制定别名来改变查询结果的列标题，这对于含算术表达式、常量、函数名的&lt;目标表达式&gt;尤为重要。例如可以把上边这道题如下定义列别名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname NAME,<span class="string">&#x27;Year of Birth:&#x27;</span> BIRTH,<span class="number">2014</span><span class="operator">-</span>Sage BIRTHDAY,</span><br><span class="line">       <span class="built_in">LOWER</span>(Sdept) DEPARTMENT</span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure><h3 id="》选择表中的若干元组"><a href="#》选择表中的若干元组" class="headerlink" title="》选择表中的若干元组"></a>》选择表中的若干元组</h3><h4 id="（1）消除取值重复的行"><a href="#（1）消除取值重复的行" class="headerlink" title="（1）消除取值重复的行"></a><strong>（1）消除取值重复的行</strong></h4><p>两个本来并不完全相同的元组在投影到指定的某些列后，可能会变成相同的行。可以用 DISTINCT 消除它们。例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*我们先查询一下选修了课程的学生学号*/</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*由于一个学生可以选修多个课程，</span></span><br><span class="line"><span class="comment">所以执行上面的语句后，</span></span><br><span class="line"><span class="comment">查询结果里会有许多重复的行。</span></span><br><span class="line"><span class="comment">如果想去掉表中的重复行，</span></span><br><span class="line"><span class="comment">必须指定 DISTINCT*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*如果没有指定 DISTINCT 关键词，</span></span><br><span class="line"><span class="comment">则默认为 ALL，</span></span><br><span class="line"><span class="comment">即保留结果表中取值重复的行*/</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC;</span><br><span class="line"><span class="comment">/*等价于*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ALL</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC;</span><br></pre></td></tr></table></figure><h4 id="（2）查询满足条件的元组"><a href="#（2）查询满足条件的元组" class="headerlink" title="（2）查询满足条件的元组"></a><strong>（2）查询满足条件的元组</strong></h4><p>可以通过 WHERE 子句实现，WHERE 子句常用的查询条件如下表：</p><table><thead><tr><th>查询条件</th><th>谓词</th></tr></thead><tbody><tr><td>比较</td><td>=，&gt;，&lt;，&gt;=，&lt;=，!&gt;，!&lt;；NOT+上述比较运算符</td></tr><tr><td>确定范围</td><td>BETWEED AND，NOT BETWEED AND</td></tr><tr><td>确定集合</td><td>IN，NOT IN</td></tr><tr><td>字符匹配</td><td>LIKE，NOT LIKE</td></tr><tr><td>空值</td><td>IS NULL，IS NOT NULL</td></tr><tr><td>多重条件（逻辑运算）</td><td>AND，OR，NOT</td></tr></tbody></table><p>例如，“比较大小”的几道例题</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询计算机科学系全体学生的名单</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;CS&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询所有年龄在20岁以下的学生姓名及其年龄</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage<span class="operator">&lt;</span><span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询考试成绩不合格的学生的学号</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Sno     </span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Grade<span class="operator">&lt;</span><span class="number">60</span>;</span><br><span class="line"><span class="comment">/*这里使用了 DISTINCT 短语，</span></span><br><span class="line"><span class="comment">当一个学生有多门课程不及格，</span></span><br><span class="line"><span class="comment">他的学号也只列一次*/</span></span><br></pre></td></tr></table></figure><p>例如，“确定范围”的几道例题<br>谓词<code>BETWEED AND</code>和<code>NOT BETWEED AND</code>可以查找属性值（在/不在）某一范围内的元组。其中<code>BETWEED</code>后面是范围的下限（低值）， <code>AND</code>后是范围的上限（高值）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询年龄在20~23岁（包括20、23）之间的学生的姓名、系别和年龄。</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname,Sdept,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">23</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询年龄不在20~23岁的学生的姓名、系别和年龄。</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname,Sdept,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">23</span>;</span><br></pre></td></tr></table></figure><p>例如，“确定集合”的几道例题<br>通过IN来查找属性值属于指定的集合元素</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询计算机科学系（CS）、数学系（MA）、和信息系（IS）学生的姓名和性别</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname,Ssex</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="keyword">IN</span>(<span class="string">&#x27;CS&#x27;</span>,<span class="string">&#x27;MA&#x27;</span>,<span class="string">&#x27;IS&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询既不是计算机科学系（CS）、数学系（MA）也不是信息系（IS）学生的姓名和性别</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname,Ssex</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="keyword">NOT</span> <span class="keyword">IN</span>(<span class="string">&#x27;CS&#x27;</span>,<span class="string">&#x27;MA&#x27;</span>,<span class="string">&#x27;IS&#x27;</span>);</span><br></pre></td></tr></table></figure><p>例如，“字符匹配”的几道例题<br>谓词LIKE可以用来进行字符串的匹配</p><ul><li><code>%</code>（百分号）代表任意长度的字符串。<br>例如a%b表示以a开头，以b结尾的任意长度的字符串</li><li><code>_</code>（下横线）代表任意单个字符。例如a_b代表以a开头，以b结尾的长度为3的任意字符串。<br>如acb、afb等都满足该匹配串。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询学号为201215121的学生的详细情况</span></span><br><span class="line"><span class="keyword">SELECT</span><span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno <span class="keyword">LIKE</span><span class="string">&#x27;201215121&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*上面代码也等价于*/</span></span><br><span class="line"><span class="keyword">SELECT</span><span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno <span class="operator">=</span><span class="string">&#x27;201215121&#x27;</span></span><br><span class="line"><span class="comment">/*如果LIKE后面的匹配串中不含通配符，</span></span><br><span class="line"><span class="comment">则可以用=运算符取代LIKE谓词，</span></span><br><span class="line"><span class="comment">用！=或&lt;&gt;运算符取代NOT LIKE 谓词。*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询所有姓刘学生的姓名、学号和性别</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname,Ssex</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sname <span class="keyword">LIKE</span> <span class="string">&#x27;刘%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询性欧阳且全名为三个汉子的学生的姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sname <span class="keyword">LIKE</span> <span class="string">&#x27;欧阳_&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询性名中第二个字为阳的学生的姓名和学号</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname,Sno</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sname <span class="keyword">LIKE</span> <span class="string">&#x27;_阳%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询所有不姓刘的学生的姓名和学号</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname,Sno</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sname <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27;刘%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询DB_Design课程的课程号和学分</span></span><br><span class="line"><span class="keyword">SELECT</span> Cno,Ccredit</span><br><span class="line"><span class="keyword">FROM</span> Course</span><br><span class="line"><span class="keyword">WHERE</span> Sname  <span class="keyword">LIKE</span> <span class="string">&#x27;DB\_Design&#x27;</span> <span class="keyword">ESCAPE</span><span class="string">&#x27;\&#x27;</span>;   <span class="comment">/*ESCAPE’&#x27;表示&quot;&quot;为换码字符*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询以‘DB_’开头，且倒数第三个字符为i的课程详细情况</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Course</span><br><span class="line"><span class="keyword">WHERE</span> Cname <span class="keyword">LIKE</span> <span class="string">&#x27;DB\_i__&#x27;</span> <span class="keyword">ESCAPE</span><span class="string">&#x27;\&#x27;</span>;</span><br></pre></td></tr></table></figure><p>例如，“涉及空值的查询”的几道例题</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询缺少成绩的学生的学号和相应的课程号</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Cno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Grade <span class="keyword">IS</span> <span class="keyword">NULL</span>;    <span class="comment">/*这里的IS不能用=代替*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询所有有成绩的学生的学号和相应的课程号</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Cno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Grade <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p>例如，“多重条件查询”的几道例题<br>使用 AND 和 OR 解决</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询计算机科学系年龄在20岁以下的学生姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;CS&#x27;</span> <span class="keyword">AND</span> Sage<span class="operator">&lt;</span><span class="number">20</span>;</span><br></pre></td></tr></table></figure><h3 id="》ORDER-BY-子句"><a href="#》ORDER-BY-子句" class="headerlink" title="》ORDER BY 子句"></a>》ORDER BY 子句</h3><p>我们可以用 ORDER BY 子句对查询结果按照一个或多个属性列的升序（ASC）或降序（DESC）排列，默认值为升序。</p><p>例如，查询选修了3号课程的学生的学号及其成绩，查询结果按分数的降序排列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Grade</span><br><span class="line"><span class="keyword">FROM</span> Sc</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span><span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Grade <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>例如，查询全体学生情况，查询结果按所在系的系号生序排列，同一系中的学生按年龄降序排列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Sdept,Sage <span class="keyword">DESC</span>;   <span class="comment">/*Sdept可以不写升序（ASC），因为默认值为升序*/</span></span><br></pre></td></tr></table></figure><h3 id="》聚集函数"><a href="#》聚集函数" class="headerlink" title="》聚集函数"></a>》聚集函数</h3><p>主要有：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">COUNT</span>(<span class="operator">*</span>)                            <span class="comment">/*统计【元组个数】*/</span></span><br><span class="line"><span class="built_in">COUNT</span>( [<span class="keyword">DISTINCT</span>丨<span class="keyword">ALL</span>] <span class="operator">&lt;</span>列名<span class="operator">&gt;</span>)      <span class="comment">/*统计一列中【值的个数】*/</span></span><br><span class="line"><span class="built_in">SUM</span>( [<span class="keyword">DISTINCT</span>丨<span class="keyword">ALL</span>] <span class="operator">&lt;</span>列名<span class="operator">&gt;</span>)        <span class="comment">/*计算一列值的【总和】*/</span></span><br><span class="line"><span class="built_in">AVG</span>( [<span class="keyword">DISTINCT</span>丨<span class="keyword">ALL</span>] <span class="operator">&lt;</span>列名<span class="operator">&gt;</span>)        <span class="comment">/*计算一列值的【平均值】*/</span></span><br><span class="line"><span class="built_in">MAX</span>( [<span class="keyword">DISTINCT</span>丨<span class="keyword">ALL</span>] <span class="operator">&lt;</span>列名<span class="operator">&gt;</span>)        <span class="comment">/*求一列值中的【最大值】*/</span></span><br><span class="line"><span class="built_in">MIN</span>( [<span class="keyword">DISTINCT</span>丨<span class="keyword">ALL</span>] <span class="operator">&lt;</span>列名<span class="operator">&gt;</span>)        <span class="comment">/*求一列值中的【最小值】*/</span></span><br></pre></td></tr></table></figure><blockquote><p>（1）如果指定 DISTINCT 短语，则表示在计算时取消列中的重复值；<br>（2）如果不指定，则 ALL 为默认值，则表示不取消重复值。</p></blockquote><p>例如，下面几个例题</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询学生总人数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询选修了课程的学生人数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> Sno)    <span class="comment">/*为了避免重复计算学生人数，必须使用DISTINCT*/</span></span><br><span class="line"><span class="keyword">FROM</span> SC;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 计算选修1号课程的学生平均成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span><span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询选修1号课程的学生最高分数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span><span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询学生201215012选修课程的总学分数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC,Course</span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span><span class="string">&#x27;201215012&#x27;</span><span class="keyword">AND</span> SC.Cno<span class="operator">=</span>Course.Cno;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>WHERE子句中是不能用聚集函数作为条件表达式的。<br>聚集函数只能用于SELECT子句和GROUP BY句中的HAVING子句。</p></blockquote><h3 id="》GROUP-BY-子句"><a href="#》GROUP-BY-子句" class="headerlink" title="》GROUP BY 子句"></a>》GROUP BY 子句</h3><p>主要用途：将查询结果按某一列或多列的值分组，值相等的为一组</p><p>例如，下面几例题的用法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 求各个课程号及相应的选课人数</span></span><br><span class="line"><span class="keyword">SELECT</span> Cno,<span class="built_in">COUNT</span>(Sno)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Cno</span><br><span class="line"><span class="comment">/*该语句对查询结果按Cno的值分组，</span></span><br><span class="line"><span class="comment">所有具有相同Cno值得元组为一组，</span></span><br><span class="line"><span class="comment">然后对每一个组作用聚集函数COUNT进行计算，以求得该组的学生人数。</span></span><br><span class="line"><span class="comment">若分组后还要按照一定的条件对这些组进行筛选，</span></span><br><span class="line"><span class="comment">最终只输出满足指定条件的组，则可以使用HAVING短语指定筛选条件。*/</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询选修了三门以上课程的学生学号</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">3</span>;</span><br><span class="line"><span class="comment">/*这里先用GROUP BY 子句按Sno进行分组，</span></span><br><span class="line"><span class="comment">再用聚集函数COUNT对每一组计数；</span></span><br><span class="line"><span class="comment">HAVING短语给出了选择组的条件，只有满足条件(即元组个数&gt;3，</span></span><br><span class="line"><span class="comment">表示此学生选修的课超过三门的组才会被选出来*/</span></span><br></pre></td></tr></table></figure><blockquote><p>WHERE子句和HAVING短语的区别在于作用对象不同：</p><ul><li>WHERE子句作用于基本表或视图，从中选择满足条件的元组。</li><li>HAVING短语作用于组，从中选择满足条件的组。</li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询平均成绩大于等于90分的学生学号和平均成绩</span></span><br><span class="line"><span class="comment">/*下面的语句是错误的*/</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,<span class="built_in">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> <span class="built_in">AVG</span>(Grade)<span class="operator">&gt;=</span><span class="number">90</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno;</span><br><span class="line"><span class="comment">/*因为WHERE子句中是不能用聚集函数作为条件表达式的，</span></span><br><span class="line"><span class="comment">正确的查询语句应该是：*/</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,<span class="built_in">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno;</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(Grade)<span class="operator">&gt;=</span><span class="number">90</span>;</span><br></pre></td></tr></table></figure><h2 id="2、连接查询"><a href="#2、连接查询" class="headerlink" title="2、连接查询"></a>2、连接查询</h2><h3 id="（1）等值与非等值连接查询"><a href="#（1）等值与非等值连接查询" class="headerlink" title="（1）等值与非等值连接查询"></a>（1）等值与非等值连接查询</h3><h3 id="（2）自身连接"><a href="#（2）自身连接" class="headerlink" title="（2）自身连接"></a>（2）自身连接</h3><h3 id="（3）外连接"><a href="#（3）外连接" class="headerlink" title="（3）外连接"></a>（3）外连接</h3><h3 id="（4）多表连接"><a href="#（4）多表连接" class="headerlink" title="（4）多表连接"></a>（4）多表连接</h3><h2 id="3、嵌套查询"><a href="#3、嵌套查询" class="headerlink" title="3、嵌套查询"></a>3、嵌套查询</h2><h3 id="（1）带有IN谓词的子查询"><a href="#（1）带有IN谓词的子查询" class="headerlink" title="（1）带有IN谓词的子查询"></a>（1）带有IN谓词的子查询</h3><h3 id="（2）带有比较运算符的子查询"><a href="#（2）带有比较运算符的子查询" class="headerlink" title="（2）带有比较运算符的子查询"></a>（2）带有比较运算符的子查询</h3><h3 id="（3）带有ANY-SOME-或ALL谓词的子查询"><a href="#（3）带有ANY-SOME-或ALL谓词的子查询" class="headerlink" title="（3）带有ANY(SOME)或ALL谓词的子查询"></a>（3）带有ANY(SOME)或ALL谓词的子查询</h3><h3 id="（4）带有EXISTS谓词的子查询"><a href="#（4）带有EXISTS谓词的子查询" class="headerlink" title="（4）带有EXISTS谓词的子查询"></a>（4）带有EXISTS谓词的子查询</h3><h2 id="4、集合查询"><a href="#4、集合查询" class="headerlink" title="4、集合查询"></a>4、集合查询</h2><ul><li>并操作 UNION</li><li>交操作 INTERSECT</li><li>差操作 EXCEPT</li></ul><h2 id="5、基于派生表的查询"><a href="#5、基于派生表的查询" class="headerlink" title="5、基于派生表的查询"></a>5、基于派生表的查询</h2><h2 id="6、SELECT语句的一般格式"><a href="#6、SELECT语句的一般格式" class="headerlink" title="6、SELECT语句的一般格式"></a>6、SELECT语句的一般格式</h2><hr><h1 id="五、数据更新"><a href="#五、数据更新" class="headerlink" title="五、数据更新"></a>五、数据更新</h1><h2 id="1、插入数据"><a href="#1、插入数据" class="headerlink" title="1、插入数据"></a>1、插入数据</h2><p>数据插入语句 INSERT 两种形式：</p><ul><li>插入一个元组</li><li>插入子查询结果（可一次插入多个元组）</li></ul><p>例如，下面几个插入元组的例题</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将一个新学生元组(学号：201215128，姓名：陈东，性别：男，所在系：IS，年龄：18岁)插入到Student表中</span></span><br><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span> Student(Sno,Sname,Ssex,Sdept,Sage) <span class="comment">/*指出表名以及要赋值的属性名*/</span></span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;201215128&#x27;</span>,<span class="string">&#x27;陈东&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;IS&#x27;</span>,<span class="number">18</span>); <span class="comment">/*对新元组的各属性赋值*/</span><span class="comment">/*字符串常数要用（英文）单引号括起来*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将学生张成民的信息插入到Student表中</span></span><br><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span> Student    <span class="comment">/*没指出属性名，说明要插入所有属性*/</span></span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;201215128&#x27;</span>,<span class="string">&#x27;张成民&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;CS&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入一条选课记录(‘2001215128’,‘1’)</span></span><br><span class="line"><span class="keyword">INSERT</span> </span><br><span class="line"><span class="keyword">INTO</span> SC(Sno,Cno)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;201215128&#x27;</span>,<span class="string">&#x27;1&#x27;</span>) <span class="comment">/*关系数据库管理系统将在新插入记录Grade上自动赋空值*/</span></span><br><span class="line"><span class="comment">-- 或者：</span></span><br><span class="line"><span class="keyword">INSERT</span> </span><br><span class="line"><span class="keyword">INTO</span> SC</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;201215128&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="keyword">NULL</span>) <span class="comment">/*因为没有指出SC的属性名，在Grade列上要明确给出空值*/</span></span><br></pre></td></tr></table></figure><p>例如，下面插入子查询结果的例题</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 对每一个系，求学生的平均年龄，并把结果存入数据库</span></span><br><span class="line"></span><br><span class="line">首先在数据库中建立一个新表，其中一列存放系名，另一列存放相应的学生平均年龄</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Dept_age</span><br><span class="line">(Sdept <span class="type">CHAR</span>(<span class="number">15</span>)</span><br><span class="line"> Avg_age <span class="type">SMALLINT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">然后对Student表按系分组求平均年龄，再把系名和平均年龄存入新表中</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span> Dept_age(Sdept,Avg_age)</span><br><span class="line"><span class="keyword">SELECT</span> Sdept,<span class="built_in">AVG</span>(Sage)</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sdept;</span><br></pre></td></tr></table></figure><h2 id="2、修改数据"><a href="#2、修改数据" class="headerlink" title="2、修改数据"></a>2、修改数据</h2><p>修改操作又称为更新操作。</p><p>SET子句给出的值用于取代相应的属性列值。</p><p>如果省略WHERE子句，则表示要修改表中的所有元组。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、修改某一个元组的值</span><br><span class="line"></span><br><span class="line">UPDATE Student</span><br><span class="line"><span class="keyword">SET</span> Sage<span class="operator">=</span><span class="number">22</span></span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span><span class="string">&#x27;201215121&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、修改多个元组的值</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将所有学生的年龄增加一岁</span></span><br><span class="line">UPDATE Student</span><br><span class="line"><span class="keyword">SET</span> Sage<span class="operator">=</span>Sage<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、带子查询的修改语句</span><br><span class="line"></span><br><span class="line">UPDATE SC</span><br><span class="line"><span class="keyword">SET</span> Grade<span class="operator">=</span><span class="number">0</span></span><br><span class="line"><span class="keyword">WHERE</span> Sno <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> Sno</span><br><span class="line"> <span class="keyword">FROM</span> Student</span><br><span class="line"> <span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;CS&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="3、删除数据"><a href="#3、删除数据" class="headerlink" title="3、删除数据"></a>3、删除数据</h2><p>如果省略WHERE子句，则表示要删除表中的全部元组。但也仅仅只是删除表的数据，不删除表的定义，表的定义仍在字典中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、删除某一个元组的值</span><br><span class="line"><span class="comment">-- 删除学号为201215128的学生记录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> Studnt</span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span><span class="string">&#x27;201215128&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、删除多个元组的值</span><br><span class="line"><span class="comment">-- 删除所有学生的选课记录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> SC;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、带子查询的删除语句</span><br><span class="line"><span class="comment">-- 删除计算机科学系所有学生的选课记录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Son <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> Sno</span><br><span class="line"> <span class="keyword">FROM</span> Student</span><br><span class="line"> <span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;CS&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><hr><h1 id="六、空值的处理"><a href="#六、空值的处理" class="headerlink" title="六、空值的处理"></a>六、空值的处理</h1><p>所谓空值，就是“不知道”或“不存在”或“无意义”的值，含有不确定性。</p><p><strong>1、空值的产生</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 向SC表中插入一个元组，学生号是“201215126”，课程号是“1”，成绩为空</span></span><br><span class="line"><span class="keyword">INSERT</span> </span><br><span class="line"><span class="keyword">INTO</span> SC(Sno,Cno,Grade)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;201215126&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="keyword">NULL</span>);   <span class="comment">/*插入时没有考试成绩，取空值*/</span></span><br><span class="line"><span class="comment">-- 或</span></span><br><span class="line"><span class="keyword">INSERT</span> </span><br><span class="line"><span class="keyword">INTO</span> SC(Sno,Cno,Grade)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;201215126&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);   <span class="comment">/*插入时没有对成绩赋值，取空值*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将Student表中学生号为“201215200”的学生所属的系改为空值</span></span><br><span class="line">UPDATE Student</span><br><span class="line"><span class="keyword">SET</span> Sdept<span class="operator">=</span><span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span><span class="string">&#x27;201215200&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>2、空值的判断</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 从Student表中找出漏填了数据的学生信息</span></span><br><span class="line"><span class="keyword">SELECT</span><span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sname <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">OR</span> Ssex <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">OR</span> Sdept <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p><strong>3、空值的约束条件</strong></p><p>以下情况不能取空值：</p><ul><li>属性定义（或域定义）中有 NOT NULL 约束条件的</li><li>加了 UNIQUE 限制的属性</li><li>码属性不能取空值</li></ul><p><strong>4、空值的算术运算、比较运算和逻辑运算</strong></p><ul><li>空值与另一个值（包括空值）的算数运算结果为空值</li><li>空值与另一个值（包括空值）的比较运算结果为 UNKNOWN</li></ul><blockquote><p>有了 UNKNOWN 后，传统的逻辑运算的二值（TRUE, FALSE）逻辑就扩展成了三值逻辑。</p></blockquote><hr><h1 id="七、视图"><a href="#七、视图" class="headerlink" title="七、视图"></a>七、视图</h1><h2 id="1、定义视图"><a href="#1、定义视图" class="headerlink" title="1、定义视图"></a>1、定义视图</h2><p><strong>1、建立视图一般格式：</strong><br>其中<code>WITH CHECK OPTION</code>表示对视图进行 UPDATE、INSERT 和 DELETE 操作时要保证更新、插入或删除的行满足视图定义中的谓词条件（即子查询中的条件表达式）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> <span class="operator">&lt;</span>视图名<span class="operator">&gt;</span> [(<span class="operator">&lt;</span>列名<span class="operator">&gt;</span>[,<span class="operator">&lt;</span>列名<span class="operator">&gt;</span>]…)]</span><br><span class="line"><span class="keyword">AS</span> <span class="operator">&lt;</span>子查询<span class="operator">&gt;</span></span><br><span class="line">[<span class="keyword">WITH</span> CHICK OPTION]</span><br></pre></td></tr></table></figure><p>例如，下面几个例题</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建立信息系学生的视图</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_Student</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;IS&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 建立信息系学生的视图,并要求进行修改和插入操作时仍需保证该视图只有信息系学生</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_Student</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;IS&#x27;</span></span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">CHECK</span> OPTION;</span><br></pre></td></tr></table></figure><p>视图还可以建立在多个基本表上</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建立信息系选修了1号课程的学生的视图(包括学号、姓名、成绩)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_S1(Sno，Sname,Grade)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname,Grade</span><br><span class="line"><span class="keyword">FROM</span> Student,SC</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;IS&#x27;</span><span class="keyword">AND</span></span><br><span class="line">Student.Sno<span class="operator">=</span>SC.Sno <span class="keyword">AND</span></span><br><span class="line">SC.Sno<span class="operator">=</span><span class="string">&#x27;1&#x27;</span>;</span><br></pre></td></tr></table></figure><p>视图不仅可以建立在一个或多个基本表上，也可以建立在一个或多个已定义好的视图上，或建立在基本表与视图上。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建立信息系选修了1号课程且成绩在90分以上的学生的视图</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_S2</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Grade</span><br><span class="line"><span class="keyword">FROM</span> IS_S1</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">&gt;=</span><span class="number">90</span>;</span><br></pre></td></tr></table></figure><p>带虚拟列的视图（带表达式的视图）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 定义一个反映学生出生年份的视图</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> BT_S(Sno,Sname,Sbirth)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,<span class="number">2014</span><span class="operator">-</span>Sage</span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure><p>分组视图（带有聚集函数和 FROUP BY 子句的查询来定义视图）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将学生的学号及平均年龄定义为一个视图</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> S_G(Sno，Gavg)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,<span class="built_in">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno;</span><br></pre></td></tr></table></figure><p>下面这个例题中，F_Student视图的属性列与Student表的属性列一一对应。如果修改了基本表Student的结构，则F_Student视图与Student表的映像关系就会被破坏，该视图就无法正常工作了。故修改基本表后要先删除原先导出的视图，再重建一次视图。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将Student表中女生记录定义为一个视图</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> F_Student(F_sno,name,sex,age,dept)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span><span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Ssex<span class="operator">=</span><span class="string">&#x27;女&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>2、删除视图的语句格式：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> <span class="operator">&lt;</span>视图名<span class="operator">&gt;</span> [CASCADE];</span><br></pre></td></tr></table></figure><p>例如下面例题</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">删除视图BT_S和视图IS_S1</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> BT_S;     <span class="comment">/*成功执行*/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> IS_S1;    <span class="comment">/*拒绝执行*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 由于IS_S1视图上还导出了IS_S2视图，所以需要使用级联删除语句</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> IS_S1 CASCADE;</span><br></pre></td></tr></table></figure><h2 id="2、查询视图"><a href="#2、查询视图" class="headerlink" title="2、查询视图"></a>2、查询视图</h2><p>在信息系学生的视图中找出年龄小于20岁的学生</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Sage</span><br><span class="line"><span class="keyword">FROM</span> IS_Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage<span class="operator">&lt;</span><span class="number">20</span>;</span><br><span class="line"><span class="comment">--本例转换后（即视图消解后）的查询语句为：</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;IS&#x27;</span> <span class="keyword">AND</span> Sage<span class="operator">&lt;</span><span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>查询选修了一号课程信息的学生</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> IS_Student.Sno,Sname</span><br><span class="line"><span class="keyword">FROM</span> IS_Student，SC</span><br><span class="line"><span class="keyword">WHERE</span> IS_Student.Sno<span class="operator">=</span>SC.Sno <span class="keyword">AND</span> SC.Cno<span class="operator">=</span><span class="string">&#x27;1&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在S_G视图中查询平均成绩在90分以上的学生学号和平均成绩</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,<span class="built_in">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(Grade)<span class="operator">&gt;=</span><span class="number">90</span>;</span><br></pre></td></tr></table></figure><h2 id="3、更新视图"><a href="#3、更新视图" class="headerlink" title="3、更新视图"></a>3、更新视图</h2><p>是指通过视图来插入（INSERT）、删除（DELECT）和修改（UPDATE）数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将信息系学生视图IS_Student中学号为‘201215122’的学生姓名改为刘晨</span></span><br><span class="line">UPDATE IS_Student</span><br><span class="line"><span class="keyword">SET</span> Sname<span class="operator">=</span><span class="string">&#x27;刘晨&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span><span class="string">&#x27;201215122&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将信息系学生视图IS_Student中插入一个新的学生记录</span></span><br><span class="line"><span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">INTO</span> S_Student</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;201215129&#x27;</span>,<span class="string">&#x27;赵信&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;IS&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除信息系学生视图IS_Student中学号为‘201215129’的记录</span></span><br><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> IS_Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span><span class="string">&#x27;201215129&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="4、视图的作用"><a href="#4、视图的作用" class="headerlink" title="4、视图的作用"></a>4、视图的作用</h2><ul><li>视图能够简化用户的操作</li><li>视图使用户以多种角度看待同一数据</li><li>视图对重构数据库提供了一定程度的逻辑独立性</li><li>视图能够对机密数据提供安全保护</li><li>适当利用视图可以更清晰地表达查询</li></ul><hr><h1 id="八、授权"><a href="#八、授权" class="headerlink" title="八、授权"></a>八、授权</h1><p>该内容在课本下一章（第二章 数据库安全性）的P141页第二节（数据库安全性控制）中。</p><h2 id="1、授予"><a href="#1、授予" class="headerlink" title="1、授予"></a>1、授予</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 【例4.1】把Student表的权限授给用户U1</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> Student</span><br><span class="line"><span class="keyword">TO</span> U1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 【例4.2】把对Student表和Course表的全部操作权限授予用户U2和U3</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="operator">/</span><span class="operator">/</span>向多个用户传播</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> Student,Course</span><br><span class="line"><span class="keyword">TO</span> U2,U3;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 【例4.3】把对表SC的查询权限授予所有用户</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> SC</span><br><span class="line"><span class="keyword">TO</span> PUBLIC;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 【例4.4】把查询Student表和修改学生学号的权限授给用户U4</span></span><br><span class="line"><span class="keyword">GRANT</span> UPDATE(Sno),<span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> Student</span><br><span class="line"><span class="keyword">TO</span> U4;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 【例4.5】把对表SC的INSERT权限授予U5用户，并允许将此权限再授予给其他用户</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> SC</span><br><span class="line"><span class="keyword">TO</span> U5</span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br></pre></td></tr></table></figure><h2 id="2、收回"><a href="#2、收回" class="headerlink" title="2、收回"></a>2、收回</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 【例4.8】把用户U4修改学生学号的权限收回</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">REVOKE</span> UPDATE(Sno)</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">TABLE</span> Student</span><br><span class="line"><span class="keyword">FROM</span> U4;</span><br></pre></td></tr></table></figure><hr><h1 id="【本章感想】"><a href="#【本章感想】" class="headerlink" title="【本章感想】"></a>【本章感想】</h1><p>&emsp;&emsp;SQL语句这一章的东西好多啊，花了好几天时间才慢慢啃完，中途也因为感觉太长，好几次写的想吐。还有，以后再学其他章节的时候我可能不会像这一章的这篇文章一样写那么详细了，因为效率真的太低了！“所收获的学习效果”远不及“所付出的时间成本”！虽然确实，章节内的逻辑会整理得很清晰，通过博文目录很一目了然，但我的做法无异于把课本内容“搬运”过来啊，那我买纸质书又有何意义？</p><hr><p>感谢下方博客为此篇文章写作提供了方便</p><p>CSDN - <a href="https://blog.csdn.net/R_Venom/article/details/117371610">数据库系统概论期末复习</a></p>]]></content>
      
      
      <categories>
          
          <category> 《数据库系统概论》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据库】第2章 关系数据库</title>
      <link href="/2021/10/28/2021-25/"/>
      <url>/2021/10/28/2021-25/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文所属《数据库系统原理》分类专栏，相关文章导航请点击<a href="https://barry-flynn.github.io/2021/09/29/2021-5/">《数据库系统原理》目录汇总贴</a></p></blockquote><h1 id="一、关系数据结构及形式化定义"><a href="#一、关系数据结构及形式化定义" class="headerlink" title="一、关系数据结构及形式化定义"></a>一、关系数据结构及形式化定义</h1><p><strong>【基本概念】</strong></p><h2 id="1、域（domain"><a href="#1、域（domain" class="headerlink" title="1、域（domain)"></a>1、域（domain)</h2><p>是一组具有相同数据类型的值的集合</p><h2 id="2、笛卡尔积"><a href="#2、笛卡尔积" class="headerlink" title="2、笛卡尔积"></a>2、笛卡尔积</h2><p>是域上的一种集合运算<br>一个域允许不同取值个数称为这个域的<strong>基数</strong></p><h2 id="3、关系"><a href="#3、关系" class="headerlink" title="3、关系"></a>3、关系</h2><p>关系是笛卡尔积的有限子集，所以关系也是一张二维表，表的每一行对应一个元组，表的每一列对应一个域。每一列都要起一个名字，称为属性。若关系中的某一属性组的值能唯一地标识一个元组，而其子集不能，则称为属性组为<strong>候选码</strong>。</p><p>若一个关系有多个候选码，则选定其中一个为<strong>主码</strong>。候选码的诸属性称为<strong>主属性</strong>，不包括在任何候选码中的属性称为<strong>非主属性</strong>，或<strong>非码属性</strong>。在最简单的情况下，候选码只包含一个属性。在最极端的情况下，关系模式的所有属于是这个的候选码，称为<strong>全码</strong>。</p><p>关系可以有三种类型：</p><ul><li>基本关系（又称基本表、基表）</li><li>查询表</li><li>视图表</li></ul><p>基本关系具有以下6个性质：</p><ul><li>1、列是同质的，即每一列中的分量是同一类型的数据，来自同一域。</li><li>2、不同的列可出自同一个域，称其中的每一列为一个属性，不同的属性要给予不同的属性名。</li><li>3、列的顺序无所谓，即列顺序是无关紧要的</li><li>4、任意两个 元组的候选码不能取相同的值</li><li>5、行的顺序无所谓，即每一个分量都必须是不可分的数据项</li><li>6、分量必须取原子值，即每一个分量都必须是不可分的数据项</li></ul><h2 id="4、关系模式"><a href="#4、关系模式" class="headerlink" title="4、关系模式"></a>4、关系模式</h2><p>关系的描述称为关系模式。<br>它可以形式化的表示为：<code>R( U, D, DOM, F )</code><br>其中R为关系名，U为组成关系的属性名集合，D为U中属性所来自的域，DOM是属性向域的映像集合，F 为属性间数据的依赖关系集合。</p><h2 id="5、关系数据库"><a href="#5、关系数据库" class="headerlink" title="5、关系数据库"></a>5、关系数据库</h2><p>在一个给定的应用领域中，所有关系的集合构成一个关系数据库。</p><ul><li><p>关系数据库的“<strong>型</strong>”：<br>也称为关系数据库模式，是对关系数据库的描述。</p></li><li><p>关系数据库的“<strong>值</strong>”：<br>是这些关系模式在某一时刻对应的关系的集合，通常就称为关系数据库。</p></li></ul><h2 id="6、关系模型的存储结构"><a href="#6、关系模型的存储结构" class="headerlink" title="6、关系模型的存储结构"></a>6、关系模型的存储结构</h2><p>略。</p><hr><h1 id="二、关系操作"><a href="#二、关系操作" class="headerlink" title="二、关系操作"></a>二、关系操作</h1><h2 id="1、基本的关系操作"><a href="#1、基本的关系操作" class="headerlink" title="1、基本的关系操作"></a>1、基本的关系操作</h2><p>关系模型中常用的关系操作包括</p><ol><li>查询操作</li><li>插入、删除、修改操作</li></ol><p>查询操作又可以分为<code>选择</code>、<code>投影</code>、<code>连接</code>、<code>除</code>、<code>并</code>、<code>差</code>、<code>交</code>、<code>笛卡尔积</code>等。<br>其中<code>选择</code>、<code>投影</code>、<code>并</code>、<code>差</code>、<code>笛卡尔积</code>是5种基本操作。</p><p>关系操作的特点是集合操作方式，即操作的对象的结果都是集合。这种操作方式也称为一次一集合的方式。</p><h2 id="2、关系数据库语言的分类"><a href="#2、关系数据库语言的分类" class="headerlink" title="2、关系数据库语言的分类"></a>2、关系数据库语言的分类</h2><ol><li>关系代数语言（如ISBL）</li><li>关系演算语言<ul><li>元组关系演算语言（如ALPHA、QUEL）</li><li>域关系演算语言（如QBE）</li></ul></li><li>具有关系代数和关系演算双重特点的语言（如SQL）</li></ol><hr><h1 id="三、关系的完整性"><a href="#三、关系的完整性" class="headerlink" title="三、关系的完整性"></a>三、关系的完整性</h1><h2 id="1、实体完整性"><a href="#1、实体完整性" class="headerlink" title="1、实体完整性"></a>1、实体完整性</h2><p><strong>【实体完整性规则】</strong>：<br>若属性（指一个或一组属性）A是基本关系R的主属性，则A不能取空值。所谓空值就是“不知道”或“不存在”或“无意义”的值。</p><p>对于实体完整性规则说明如下：<br>1、实体完整性规则是针对基本表关系而言的。一个基本表通常对应现实世界一个实体集。<br>2、现实世界中的实体是可区分的。即它们具有某种唯一性标识。<br>3、相应地，关系模型中以主码作为唯一性标识<br>4、主码中的属性即属性不能取空值</p><h2 id="2、参照完整性"><a href="#2、参照完整性" class="headerlink" title="2、参照完整性"></a>2、参照完整性</h2><p><strong>【参照完整性的定义】</strong>：<br>设F是基本关系R的一个或一组属性，但不是关系R的码、K<sub>s</sub> 是基本关系S的主码。如果F与K<sub>s</sub> 相对应，则称<strong>F是R是外码</strong>，并称基本关系R为参照关系，基本关系被参照关系或目标关系。</p><p><strong>【参照完整性规则】</strong>：<br>若属性（或属性组)F是基本关系R的外码，它与基本准关系S的主码K<sub>s</sub> 相对应，则对于R中第一个元组F上的值必须：<br>1、或者取空值<br>2、或者等于S中某个元组的主码值</p><p>参照完整性规则就是定义<strong>外码</strong>与<strong>主码</strong>之间的引用规则。</p><h2 id="3、用户定义的完整性"><a href="#3、用户定义的完整性" class="headerlink" title="3、用户定义的完整性"></a>3、用户定义的完整性</h2><p>针对某一具体关系数据库的约束条件，反映某一具体应用所涉及的数据必须满足的语义要求。</p><hr><h1 id="四、关系代数"><a href="#四、关系代数" class="headerlink" title="四、关系代数"></a>四、关系代数</h1><h2 id="1、传统的集合运算"><a href="#1、传统的集合运算" class="headerlink" title="1、传统的集合运算"></a>1、传统的集合运算</h2><blockquote><p>传统的关系运算起源于数学的集合论</p></blockquote><ol><li><code>并</code>：<kbd> U ∪ S </kbd><br>t属于U或者属于S</li><li><code>差</code>：<kbd> R - S </kbd><br>t属于R且不属于S</li><li><code>交</code>：<kbd> R ∩ S </kbd><br>r属于R且也属于S</li><li><code>笛卡尔积</code>：<kbd> R x S </kbd><br>R中任意与S任意进行组合</li></ol><h2 id="2、专门的关系运算"><a href="#2、专门的关系运算" class="headerlink" title="2、专门的关系运算"></a>2、专门的关系运算</h2><blockquote><p>数据库中特有的运算规则</p></blockquote><ol><li><code>选择</code>：<kbd> δ<sub>F</sub>(R) </kbd><br>对行进行操作，F是选择条件，R是关系表名。</li><li><code>投影</code>：<kbd> ∏<sub>A</sub>(R) </kbd><br>对列进行操作，A为R的属性列。</li><li><code>连接</code>：<kbd> R⋈S </kbd><br>分为一般连接、等值连接、自然连接（特殊的等值连接）、外连接、左外连接、右外连接。</li><li><code>除运算</code>：<kbd> R÷S </kbd><br>同时从行和列角度进行运算，<br>按我目前的理解，它像是一种比对操作。</li></ol><hr><h1 id="五、-关系演算（选学）"><a href="#五、-关系演算（选学）" class="headerlink" title="五、*关系演算（选学）"></a>五、*关系演算（选学）</h1><p>略。</p><hr><h1 id="【小结与习题】"><a href="#【小结与习题】" class="headerlink" title="【小结与习题】"></a>【小结与习题】</h1><ol><li><p><strong>试述关系模型的三个组成部分。</strong><br>（1）关系的数据结构<br>（2）关系数据模型的操作集合<br>（3）关系模型的完整性约束。</p></li><li><p><strong>简述关系数据库语言的特点和分类。</strong><br>关系数据语言可以分为三类：<br>（1）<strong>关系演算语言</strong>：元组关系演算语言、域关系演算语言。<br>（2）<strong>关系代数语言</strong>：通过关系代数运算符完成运算，包括集合运算符、专门的关系运算符，有并、差、交、笛卡尔积、选择、投影、连接、除。<br>（3）<strong>SQL语言</strong>：具有关系代数和关系演算双重特点的语言</p></li><li><p><strong>定义并理解下列术语，说明它们之间的联系与区别。</strong></p><blockquote><p><strong>（1）域，笛卡尔积，关系，元组，属性。</strong><br><code>域</code>：域是具有相同数据类型的值的集合。<br><code>笛卡尔积</code>：给定一组域D1，D2,…….,Dn,允许其中某些域是相同的。D1，D2,…….,Dn的笛卡尔积为：D1×D2×…….×Dn={（d1,d2,d3……,dn）|di∈Di,i=1,2,…,n},是所有域 取值的一个组合，并且不能有重复。<br><code>关系</code>：D1×D2×…….×Dn的子集叫做在域D1，D2,…….,Dn上的关系，表示为 R（D1，D2,…….,Dn） R:关系名，n:是关系的目或度，关系也是一个二维表，表的每一行对应一个元组，表的每一列对应一个域。<br><code>元组</code>：笛卡尔积中的每一个元素叫做一个元组或简称元组。<br><code>属性</code>：关系中不同的列可以对应相同的域，为了加以区分，必须给每个列起一个名字，成为属性。n目关系必有n个属性。<br><strong>（2）主码，候选码，外码。</strong><br><code>主码</code>：若一个关系有多个候选码，则选定其中一个为主码。<br><code>候选码</code>：若关系中的某一组属性组的值能唯一的标识一个元组，则称为该属性组为候选码。<br><code>外码</code>：关系R中的一个属性组，他不是R的候选码，但它与另一个关系的候选码相对应，则称这个属性组为R的外码（外键），两个关系通常用外码相互连接。<br><strong>（3）关系模式，关系，关系数据库。</strong><br><code>关系模式</code>：关系模式是型，关系模式是对关系的描述，关系模式可以形象化地表示为：R（U，D，DOM，F）。是对关系的描述，静态的、稳定的。<br><code>关系</code>：关系：D1×D2×…….×Dn的子集叫做在域D1，D2,…….,Dn上的关系，表示为 R（D1，D2,…….,Dn） R:关系名，n:是关系的目或度，关系也是一个二维表，表的每一行对应一个元组，表的每一列对应一个域。关系是值，是关系模式在某一时刻的状态或者内容，动态的、随时间不断变化的。<br><code>关系数据库</code>：在一个给定的应用领域中，所有关系的集合构成的一个关系数据库<br>关系数据库模式是对关系数据库的描述。关系模式在某一时刻对应的关系的集合，通常称为关系数据库。</p></blockquote></li><li><p><strong>举例说明关系模式和关系的区别。</strong></p><blockquote><p><strong>关系模式</strong>是静态的，比如一张二维表的表头，即有哪些构成，每个列的名称类型长度等。</p><p><strong>关系</strong>是动态的，就是一张二维表的具体内容，就是除了标题以外的数据行，由于表数据经常被修改，插入，删除，所以不同时刻、关系可能不一样、其实，关系就是数学中的集合了，每一行就是集合的一个元素。</p></blockquote></li><li><p><strong>试述关系模型的完整性规则。在参照完整性中，什么情况下外码属性的值可以为空值？</strong></p><blockquote><p><strong>实体完整性规则</strong>：若属性A是基本关系R的主属性，则属性A不能取空值。空值就是“不知道”或“不存在”或“无意义”的值。</p><p><strong>参照完整性</strong>:若属性（或属性组）F是基本关系R的外码，它与基本关系S的主码Ks相对应（基本关系R和S不一定是不同的关系），则对于R中每个元组在F上的值必须为：</p><ul><li>或者取空值（F的每个属性值均为空值）</li><li>或者等于S中某个元组的主码值。</li></ul><p>当属性F本身不是主属性，则可以取空值，否则不能取空值。</p></blockquote></li><li><p>略。</p></li><li><p><strong>试述等值连接与自然连接的区别与联系。</strong><br>自然连接是一种特殊的等值连接(自然连接是除去重复属性的等值连接)。<br>1、自然连接一定是等值连接，但等值连接不一定是自然连接。<br>2、等值连接要求相等的分量，不一定是公共属性；而自然连接要求相等的分量必须是公共属性。<br>3、等值连接不把重复的属性除去；而自然连接要把重复的属性除去。</p></li><li><p><strong>关系代数的基本运算有哪些？如何用这些基本运算表示其他运算。</strong><br>基本的运算：<code>并</code>、<code>差</code>、<code>笛卡尔积</code>、<code>选择</code>和<code>投影</code>。<br>其他三种运算<code>交</code>、<code>连接</code>、<code>除</code>，均可以用这五种基本运算表达。</p></li></ol><hr><p><strong>本章感悟：</strong><br>关系代数那一节还需要查资料加强了解，对那四种专门的关系运算理解不是很深（尤其是连接运算和除运算）。另外我想说，数据库这前两章好难啃啊，概念太多，脑子很乱。</p><p><strong>本章学习过程中浏览过的博文：</strong></p><p>CSDN -<a href="https://blog.csdn.net/qq_45978890/article/details/114139520">数据库关系代数详解</a><br>CSDN -<a href="https://blog.csdn.net/qq_27949963/article/details/106445063">王珊的第五版数据库系统概论–第二章总结概述</a><br>CSDN -<a href="https://iamlzy.blog.csdn.net/article/details/86482373">《数据库系统概论》| 第二章 关系数据库 知识梳理</a></p>]]></content>
      
      
      <categories>
          
          <category> 《数据库系统概论》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据库】第1章 绪论丨小结与习题</title>
      <link href="/2021/10/27/2021-24/"/>
      <url>/2021/10/27/2021-24/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文所属《数据库系统原理》分类专栏，相关文章导航请点击<a href="https://barry-flynn.github.io/2021/09/29/2021-5/">《数据库系统原理》目录汇总贴</a></p></blockquote><ul><li><strong>1、试述数据、数据库、数据库系统、数据库管理系统的概念。</strong></li></ul><p>（1）数据是描述事物的符号记录。<br>（2）数据库是长期储存在计算机内的、有组织的、可共享的数据集合。<br>（3）数据库系统是指在计算机系统中引入数据库后的系统构成，一般由数据库、数据库管理系统（及其开发工具）、应用系统、数据库管理员构成。<br>（4）数据库管理系统是位于用户与操作系统之间的一层数据管理软件，用于科学地组织和存储数据、高效地获取和维护数据。</p><ul><li><strong>2、使用数据库系统有什么好处？</strong></li></ul><p>使用数据库系统可以大大提高应用开发的效率，方便用户使用，减轻数据库系统管理人员维护负担。</p><ul><li><strong>3、试述文件系统与数据库系统的区别和联系。</strong></li></ul><p>（1）区别：文件系统面向某一应用程序，共享性差，冗余度大，数据独立性差，记录内有结构，整体无结构，由应用程序自己控制。数据库系统面向现实世界，共享性高，冗余度小，具有较高的物理独立性和一定的逻辑独立性，整体结构化，用数据模型描述，由数据库管理系统提供数据的安全性、完整性、并发控制和恢复能力。<br>（2）联系：文件系统与数据库系统都是计算机系统中管理数据的软件。解析文件系统是操作系统的重要组成部分；而 DBMS 是独立于操作系统的软件。但是 DBMS 是在操作系统的基础上实现的；数据库中数据的组织和存储是通过操作系统中的文件系统来实现的。</p><ul><li><strong>4、举出适合用文件系统而不是数据库系统的例子，以及适合用数据库系统的应用例子。</strong></li></ul><p>（1）适用于文件系统而不是数据库系统的应用例子有数据的备份、软件或应用程序使用过程中的临时数据存储。<br>（2）适用于数据库系统而非文件系统的应用例子，几乎所有企业或部门的信息系统都以数据库系统为基础，都使用数据库。一个工厂的管理信息系统（其中会包括许多子系统，如库存管理系统、物资采购系统、作业调度系统、设备管理系统、人事管理系统等），学校的学生管理系统，人事管理系统，图书馆的图书管理系统，都适合用数据库系统。</p><ul><li><strong>5、试述数据库系统的特点。</strong></li></ul><p>（1）数据结构化数据库系统实现整体数据的结构化。<br>（2）数据的共享性高，冗余度低，易扩充。<br>（3）数据独立性高数据独立性包括数据的物理独立性和数据的逻辑独立性。<br>（4）数据由 DBMS 统一管理和控制数据库的共享是并发的共享。</p><ul><li><strong>6、数据库管理系统的主要功能有哪些？</strong></li></ul><p>数据库管理系统的主要功能有数据库定义功能、数据存取功能、数据库运行管理、数据库的建立和维护功能。</p><ul><li><strong>7、什么是概念模型？试述概念模型的作用。</strong> </li></ul><p>概念模型，也称信息模型，是按用户的观点来对数据和信息建模，主要用于数据库设计。概念模型实际上是现实世界到机器世界的一个中间层次。概念模型用于信息世界的建模，是现实世界到信息世界的第一层抽象，是数据库设计人员进行数据库设计的有力工具，也是数据库设计人员和用户之间进行交流的语言。</p><ul><li><strong>8、定义并解释概念模型中以下术语：实体、实体型、实体集、实体之间的联系。</strong></li></ul><p>（1）实体是客观存在并可以相互区分的事物。<br>（2）实体型是具有相同属性的实体具有相同的特征和性质，用实体名及其属性名集合来抽象和刻画同类实体。<br>（3）实体集是同型实体的集合；<br>（4）实体之间的联系：通常是指不同实体型的实体集之间的联系，实体之间的联系有一对一、一对多和多对多等多种类型。</p><ul><li><strong>9、试述数据模型的概念、数据模型的作用和数据模型的三个要素。</strong></li></ul><p>（1）数据模型是对现实世界数据特征的抽象。<br>（2）数据模型的作用是用来描述数据、组织数据和对数据进行操作。<br>（3）数据模型的三个要素是数据结构、数据操作、数据的完整性约束条件。</p><ul><li><strong>10、试述层次模型的概念，举出三个层次模型的实例。</strong></li></ul><p>（1）层次模型用树形结构来表示各类实体以及实体间的联系，在数据库中定义满足的基本层次联系的集合为层次模型：有且只有一个结点没有双亲结点，即根结点；根以外的其他结点有且只有一个双亲结点。<br>（2）实例：教员学生层次数据库模型、行政机构层次数据库模型、行政区域层次数据库模型。</p><ul><li><strong>11、试述网状模型的概念，举出三个网状模型的实例。</strong></li></ul><p>（1）满足下面两个条件的基本层次联系集合为网状模型。允许一个以上的结点无双亲；一个结点可以有多于一个的双亲。<br>（2）实例：学生选课网状数据库模型、教师选教室网状数据模型、学生选教室网址数据模型。</p><ul><li><strong>12、试述网状、层次数据库的优缺点。</strong></li></ul><p>（1）层次模型：<br>优点主要有：模型简单，对具有一对多层次关系的部门描述非常自然、直观，容易理解，这是层次数据库的突出优点；用层次模型的应用系统性能好，特别是对于那些实体间联系是固定的且预先定义好的应用，采用层次模型来实现，其性能优于关系模型；层次数据模型提供了良好的完整性支持。</p><p>缺点主要有：现实世界中很多联系是非层次性的，如多对多联系、一个结点具有多个双亲等，层次模型不能自然地表示这类联系，只能通过引入冗余数据或引入虚拟结点来解决；对插入和删除操作的限制比较多；查询子女结点必须通过双亲结点。</p><p>（2）网状数据模型：<br>优点主要有：能够更为直接地描述现实世界，如一个结点可以有多个双亲；具有良好的性能，存取效率较高。</p><p>网状数据模型的缺点主要有：结构比较复杂，而且随着应用环境的扩大，数据库的结构就变得越来越复杂，不利于最终用户掌握；其 DDL、DML 语言复杂，用户不容易使用。由于记录之间联系是通过存取路径实现的，应用程序在访问数据时必须选择适当的存取路径。因此，用户必须了解系统结构的细节，加重了编写应用程序的负担。</p><ul><li><strong>13、试述关系模型的概念，定义并解释以下术语：关系，属性，域，元组，码，分量，关系模式。</strong></li></ul><p>（1）关系模型由关系数据结构、关系操作集合和关系完整性约束三部分组成。在用户观点下，关系模型中数据的逻辑结构是一张二维表，它由行和列组成。<br>（2）关系：一个关系对应通常说的一张表。<br>（3）属性：表中的一列即为一个属性。<br>（4）域：属性的取值范围。<br>（5）元组：表中的一行即为一个元组。<br>（6）主码：表中的某个属性组，它可以惟一确定一个元组。<br>（7）分量：元组中的一个属性值。<br>（8）关系模式：对关系的描述，一般表示为关系名（属性 1 ，属性 2 ， … ，属性 n )。</p><ul><li><strong>14、试述关系数据库的特点。</strong></li></ul><p>（1）关系模型与非关系模型不同，它是建立在严格的数学概念的基础上的。<br>（2）关系模型的概念单一，无论实体还是实体之间的联系都用关系表示，操作的对象和操作的结果都是关系。<br>（3）关系模型的存取路径对用户透明，从而具有更高的数据独立性、更好的安全保密性，也简化了程序员的工作和数据库开发建立的工作。</p><ul><li><strong>15、试述数据库系统三级模式结构，这种结构的优点是什么？</strong></li></ul><p>（1）数据库系统的三级模式结构由外模式、模式和内模式组成。<br>（2）外模式:亦称子模式或用户模式，是数据库用户能够看见和使用的局部数据的逻辑结构和特征的描述，是数据库用户的数据视图，是与某一应用有关的数据的逻辑表示。<br>（3）模式:亦称逻辑模式，是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图。模式描述的是数据的全局逻辑结构。外模式涉及的是数据的局部逻辑结构，通常是模式的子集。<br>（4）内模式:亦称存储模式，是对数据的物理结构和存储方式的描述。<br>（5）优点：为了能够在内部实现这三个抽象层次的联系和转换，数据库系统在这三级模式之间提供了两层映像：外模式／模式映像和模式／内模式映像。正是这两层映像保证了数据库系统中的数据能够具有较高的逻辑独立性和物理独立性。</p><ul><li><strong>16、定义并解释以下术语：模式，外模式，内模式，数据定义语言，数据操纵语言。</strong></li></ul><p>（1）模式：也称逻辑模式，是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图。他是数据库系统模式结构的中间层，既不设计数据的物理储存细节和硬件环境，又与具体的应用程序、所使用的应用开发工具及高级程序设计语言无关。<br>（2）外模式：也称子模式或用户模式，它是数据库用户能够看见和使用的局部数据的逻辑结构和特征的描述，是数据库用户的数据视图，是与某一应用有关的数据的逻辑表示。<br>（3）内模式：也称存储模式，一个数据库只有一个内模式。它是数据物理结构和存放方式的描述，是数据在数据库内部的组织方式。<br>（4）数据定义语言：用来定义数据库的模式、外模式和内模式的语言。<br>（5）数据操纵语言：用来对数据库中的数据进行查询、插入、删除和修改的语句。</p><ul><li><strong>17、什么叫数据与程序的物理独立性？什么叫数据与程序的逻辑独立性？为什么数据库系统具有数据与程序的独立性？</strong></li></ul><p>（1）数据与程序的物理独立性:当数据库的存储结构改变了,由数据库管理员对模式/内模式映像作相应改变,可以使模式保持不变,从而应用程序也不必改变,这就是数据与程序的物理独立性,简称数据的物理独立性。<br>（2）数据与程序的逻辑独立性:当数据的逻辑结构即模式改变时,由数据库管理员对各个外模式/模式的映像作相应改变,可以使外模式保持不变,从而应用程序不必修改,这就是数据与程序的逻辑独立性，简称数据的逻辑独立性。<br>（3）数据库管理系统DBMS在三级模式之间提供的两级映像保证了数据库系统中的数据能够具有较高的逻辑独立性和物理独立性。</p><ul><li><strong>18、试述数据库系统的组成。</strong></li></ul><p>数据库系统一般由数据库、数据库管理系统（及其开发工具）、应用系统、数据库管理员和用户构成。</p><ul><li><strong>19、数据库管理员、系统分析员、数据库设计人员、应用程序员的职责是什么？</strong></li></ul><p>（1）数据库管理员的职责：决定数据库中的信息内容和结构、决定数据库的存储结构和存取策略、定义数据的安全性要求和完整性约束条件监控数据库的使用和运行、数据库的改进和重组、重构。<br>（2）系统分析员负责应用系统的需求分析和规范说明，系统分析员要和用户及 DBA 相结合，确定系统的硬件、软件配置，并参与数据库系统的概要设计。数据库设计人员负责数据库中数据的确定、数据库各级模式的设计。<br>（3）数据库设计人员必须参加用户需求调查和系统分析，然后进行数据库设计。在很多情况下，数据库设计人员就由数据库管理员担任。<br>（4）应用程序员负责设计和编写应用系统的程序模块，并进行调试和安装。</p>]]></content>
      
      
      <categories>
          
          <category> 《数据库系统概论》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据库】SQL Server 的安装记录</title>
      <link href="/2021/10/26/2021-23/"/>
      <url>/2021/10/26/2021-23/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本博客不提供任何激活和相关服务，请支持官方正版，安装软件仅作为学习用途。</p></blockquote><p>SQL Server版本很多，每个版本的又分为</p><ul><li>Enterprise（企业版，功能完备且强大）</li><li>Standard（标准版）</li><li>Express（精简版）等</li></ul><p>这几种在计算能力，数据存储能力等方面都有一些差异，大家可以根据自己所需功能挑选，我作为学习使用将安装<br> <strong>Microsoft SQL Server 2012 版本的 Express（精简版）</strong>。</p><p>本文步骤在Windows10操作系统下进行</p><hr><h1 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h1><p>你可以前往微软官网下载 <a href="https://www.microsoft.com/zh-cn/sql-server/sql-server-downloads">SQL Server 安装包</a> 和 <a href="https://docs.microsoft.com/zh-cn/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-ver15">SSMS 安装包</a>。<br>这里我选择了一个工具站：<br><a href="https://msdn.itellyou.cn/">I Tell You - MSDN 工具站</a><br>下载了如图两个：</p><blockquote><p><img src="https://i.loli.net/2021/10/26/dqLNhRX2apWfHey.jpg" alt="SQL下载1.jpg"></p></blockquote><p>这里贴出该工具站显示的下载地址：<br>复制ed2k链接，可以使用迅雷、旋风、百度网盘离线等工具。</p><ul><li>SQL Server 2012 Express (x64) - (Chinese-Simplified)<br>(大小：145.69MB)<br>下载地址：</li></ul><p><code>ed2k://|file|cn_sql_server_2012_express_sqlexpr_x64.exe|152770136|8EDDA977D902509E95B65B5B70AAB892|/</code></p><ul><li>SQL Server 2012 Express Management Studio (x64) - (Chinese-Simplified)<br>(大小：645.56MB)<br>下载地址：</li></ul><p><code>ed2k://|file|cn_sql_server_2012_express_management_studio_x64.exe|676916824|6DB126B7DD6DA1A993C7A9E4F7ED91D1|/</code> </p><hr><h1 id="安装数据库SQL-Server-Express"><a href="#安装数据库SQL-Server-Express" class="headerlink" title="安装数据库SQL Server Express"></a>安装数据库SQL Server Express</h1><blockquote><p>SQL Server Express 是由Microsoft所开发的SQL Server的其中一个版本，这个版本是免费且可自由转散布（需经注册），并且可和商用程序一起使用的小型数据库管理系统。（百度百科）</p></blockquote><ul><li><p>双击执行<code>cn_sql_server_2012_express_sqlexpr_x64.exe</code></p></li><li><p>点击“选项”，看一下它的安装目录</p><blockquote><p><img src="https://i.loli.net/2021/10/26/RKukWFxr6gQ1fb8.png" alt="SQL下载2.png"></p></blockquote></li><li><p>点击“安装”，选择“全新SQL Server独立安装…”</p><blockquote><p><img src="https://i.loli.net/2021/10/26/5UnHWQdGElxfyS6.png" alt="SQL下载3.png"><br><img src="https://i.loli.net/2021/10/26/EBj3XNMDrmgsJAP.png" alt="SQL下载4.png"></p></blockquote></li><li><p>许可条款：勾选完之后点击下一步</p><blockquote><p><img src="https://i.loli.net/2021/10/26/VyGAgMqwjmSREh7.png" alt="SQL下载5.png"></p></blockquote></li><li><p>产品更新：直接下一步</p><blockquote><p><img src="https://i.loli.net/2021/10/26/n5Th2ZEis1y8Jc9.png" alt="SQL下载6.png"></p></blockquote></li><li><p>点击安装</p><blockquote><p><img src="https://i.loli.net/2021/10/26/GA9RHzqUowP6ysZ.png" alt="SQL下载7.png"></p></blockquote></li><li><p>功能选项：全选，下一步</p><blockquote><p><img src="https://i.loli.net/2021/10/26/86R3Do4cfBIQLrw.png" alt="SQL下载8.png"></p></blockquote></li><li><p>实例配置：选择默认实例，下一步</p><blockquote><p><img src="https://i.loli.net/2021/10/26/PWryc96XVH2qdQM.png" alt="SQL下载9.png"></p></blockquote></li><li><p>服务器配置：下一步</p><blockquote><p><img src="https://i.loli.net/2021/10/26/Nt56qM9KLpHxVyE.png" alt="SQL下载10.png"></p></blockquote></li><li><p>数据库引擎配置：<br>1、选择混合模式<br>2、设置密码，越简单越好，记下来不要忘<br>3、添加当前用户<br>4、下一步</p><blockquote><p><img src="https://i.loli.net/2021/10/26/GgbqvjU7NnfMITH.png" alt="SQL下载11.png"></p></blockquote></li><li><p>错误报告：下一步</p><blockquote><p><img src="https://i.loli.net/2021/10/26/zuevxtI4PqQwmZb.png" alt="SQL下载12.png"></p></blockquote></li><li><p>正在安装</p><blockquote><p><img src="https://i.loli.net/2021/10/26/tmFoIzqpB837wTH.png" alt="SQL下载13.png"></p></blockquote></li><li><p>安装完成，关闭。</p><blockquote><p><img src="https://i.loli.net/2021/10/26/ofiHPQp6WYgTdCV.png" alt="SQL下载14.png"></p></blockquote></li></ul><p>至此，SQL Server 2012 Express 数据库安装完成。</p><hr><h1 id="安装图形化管理界面SSMS"><a href="#安装图形化管理界面SSMS" class="headerlink" title="安装图形化管理界面SSMS"></a>安装图形化管理界面SSMS</h1><blockquote><p>SQL Server Management Studio 是用于管理SQL Server基础架构的集成环境。Management Studio提供用于配置、监视和管理SQL Server实例的工具。 此外，它还提供了用于部署、监视和升级数据层组件（如应用程序使用的数据库和数据仓库）的工具以生成查询和脚本。（百度百科）<br>总之，SSMS是个方便操作的管理界面（客户端工具）。</p></blockquote><ul><li>双击执行<code>cn_sql_server_2012_express_management_studio_x64.exe</code></li></ul><p>安装过程与上面类似，直接放图：</p><blockquote><p><img src="https://i.loli.net/2021/10/26/AltPVxMoTz73Ecj.png" alt="SSMS下载1.png"></p></blockquote><blockquote><p><img src="https://i.loli.net/2021/10/26/Goqb3AdvX4ucgxi.jpg" alt="SSMS下载2.jpg"></p></blockquote><blockquote><p><img src="https://i.loli.net/2021/10/26/DkIb3x16cjOmr57.png" alt="SSMS下载3.png"></p></blockquote><blockquote><p><img src="https://i.loli.net/2021/10/26/QF6DZR837WuazpG.png" alt="SSMS下载4.png"></p></blockquote><blockquote><p><img src="https://i.loli.net/2021/10/26/eV5YP8TUJIG4DXi.png" alt="SSMS下载5.png"></p></blockquote><blockquote><p><img src="https://i.loli.net/2021/10/26/ZXK1hPOViG2IgQD.png" alt="SSMS下载6.png"></p></blockquote><blockquote><p><img src="https://i.loli.net/2021/10/26/sbEI8af1jMlunVW.png" alt="SSMS下载7.png"></p></blockquote><blockquote><p><img src="https://i.loli.net/2021/10/26/G6vHjkNSz5IqalK.png" alt="SSMS下载8.png"></p></blockquote><blockquote><p><img src="https://i.loli.net/2021/10/26/wOK85d9lzQt1yeL.png" alt="SSMS下载9.png"></p></blockquote><blockquote><p><img src="https://i.loli.net/2021/10/26/qlPhA8DQHVw1atn.png" alt="SSMS下载10.png"></p></blockquote><blockquote><p><img src="https://i.loli.net/2021/10/26/CQbpnIVTqG9goz8.png" alt="SSMS下载11.png"></p></blockquote><blockquote><p><img src="https://i.loli.net/2021/10/26/crzu76KPvpqjG8d.png" alt="SSMS下载12.png"></p></blockquote><blockquote><p><img src="https://i.loli.net/2021/10/26/YKplkNZnIPiAJ79.png" alt="SSMS下载13.png"></p></blockquote><hr><h1 id="检查并使用"><a href="#检查并使用" class="headerlink" title="检查并使用"></a>检查并使用</h1><p>打开左下角开始菜单，<br>安装完SQL Server Express应该会出现图片下面那四个程序；<br>安装完SQL Server Management Studio应该会出现图片上面那八个程序。<br><img src="https://i.loli.net/2021/10/26/vHB172frRShxD3w.png" alt="SQLserver和SSMS下载成功.png"><br>如果有说明都安装成功，可以使用了。</p><p>在开始菜单打开SQL Server Management Studio<br><img src="https://i.loli.net/2021/10/26/dVeuqTXngzxhYrC.png" alt="SSMS开始界面.png"></p><p>使用正常。</p><p><br /><br /><br /></p><p>本文完<br><strong>THE END.</strong></p><p><br /><br /><br /></p><hr><p>本文安装时的参考内容：<br><a href="https://blog.csdn.net/Python_Smily/article/details/105418425">Window10下载和安装SQL Server 2012详细教程</a><br><a href="https://blog.csdn.net/qq_37591637/article/details/93102794">SQL Server 2012 下载和安装详细教程</a><br><a href="https://mailiang.blog.csdn.net/article/details/89301494">SQL Server 2012 安装教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 《数据库系统概论》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据库】第1章 绪论丨（第4节）数据库系统的组成</title>
      <link href="/2021/10/25/2021-22/"/>
      <url>/2021/10/25/2021-22/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文所属《数据库系统原理》分类专栏，相关文章导航请点击<a href="https://barry-flynn.github.io/2021/09/29/2021-5/">《数据库系统原理》目录汇总贴</a></p></blockquote><h1 id="第3节-数据库系统的组成"><a href="#第3节-数据库系统的组成" class="headerlink" title="第3节 数据库系统的组成"></a>第3节 数据库系统的组成</h1><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p>（1）数据库<br>（2）数据库管理系统（及其开发工具）<br>（3）应用程序<br>（4）数据库管理员</p><p>下面分别介绍这几个部分的内容：</p><ol><li>硬件平台及数据库</li><li>软件</li><li>人员</li></ol><h2 id="1-对硬件资源的要求"><a href="#1-对硬件资源的要求" class="headerlink" title="1. 对硬件资源的要求"></a>1. 对硬件资源的要求</h2><p>（1）足够的内存<br>（2）足够大的磁盘和磁盘阵列等设备<br>（3）较高的通道能力，提高数据的传送率</p><h2 id="2-软件"><a href="#2-软件" class="headerlink" title="2. 软件"></a>2. 软件</h2><p>（1）数据库管理系统<br>（2）支持数据库管理系统运行的操作系统<br>（3）与数据库结构的高级语言及其编译系统<br>（4）以数据库管理系统为核心的应用开发工具<br>（5）为特定应用环境开发的数据库应用系统</p><h2 id="3-人员"><a href="#3-人员" class="headerlink" title="3. 人员"></a>3. 人员</h2><p>不同的人员涉及不同的数据抽象级别，具有不同的数据视图，如下图所示</p><blockquote><p><img src="https://i.loli.net/2021/10/25/tNVv6uMZzeCGkl4.png" alt="1.4.3 数据库系统的组成-各种人员的数据视图.png"></p></blockquote><p>（1）数据库管理员（DBA）</p><ul><li>决定数据库中信息内容和结构</li><li>决定数据库的存储结构和存取策略</li><li>定义数据的安全性要求和完整性约束条件</li><li>监控数据库的使用和运行<br>周期性转储数据库<br>  数据文件<br>  日志文件<br>系统故障恢复<br>介质故障恢复<br>监视审计文件</li><li>数据库的改进和重组、重构<br>性能监控和调优<br>定期对数据库进行重组织，以提高系统的性能<br>需求增加和改变时，数据库需要重构造</li></ul><p>（2）系统分析员<br>负责应用系统的需求分析和规范说明<br>与用户及数据库管理员结合，确定系统的硬软件配置<br>参与数据库系统的概要设计</p><p>（3）数据库设计人员<br>参加用户需求调查和系统分析<br>确定数据库中的数据<br>设计数据库各级模式</p><p>（4）应用程序员<br>设计和编写应用系统的程序模块<br>进行调试和安装</p><p>（5）最终用户<br>偶然用户<br>简单用户<br>复杂用户</p><hr><p>本节思维导图：</p><blockquote><p><img src="https://i.loli.net/2021/10/25/W9l32ESVGpJkILi.png" alt="1.4.3 数据库系统的组成.png"></p></blockquote><hr><p>本文思维导图源自：</p><p>CSDN - <a href="https://blog.csdn.net/frozennet/article/details/103817962">【数据库系统概论】第一章 绪论 1.4 数据库系统的组成</a></p>]]></content>
      
      
      <categories>
          
          <category> 《数据库系统概论》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据库】第1章 绪论丨（第3节）数据库系统的结构</title>
      <link href="/2021/10/25/2021-21/"/>
      <url>/2021/10/25/2021-21/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文所属《数据库系统原理》分类专栏，相关文章导航请点击<a href="https://barry-flynn.github.io/2021/09/29/2021-5/">《数据库系统原理》目录汇总贴</a></p></blockquote><h1 id="第3节-数据库系统的结构"><a href="#第3节-数据库系统的结构" class="headerlink" title="第3节 数据库系统的结构"></a>第3节 数据库系统的结构</h1><h2 id="数据库模式的概念"><a href="#数据库模式的概念" class="headerlink" title="数据库模式的概念"></a>数据库模式的概念</h2><ol><li><p>“型”和“值”的概念<br>（1）型（Type）：对某一类数据的结构和属性的说明<br>（2）值（Value）：是型的一个具体赋值</p></li><li><p>模式（Schema）<br>（1）数据库逻辑结构和特征的描述<br>（2）是型的描述，不涉及具体的值<br>（3）反映的数据的结构及其联系<br>（4）模式是相对稳定</p></li><li><p>实例（Instance）<br>（1）模式的一个具体值<br>（2）反映数据库某一时刻的状态<br>（3）同一个模式可以有多个实例<br>（4）实例随数据库中的数据的更新而变动</p></li></ol><blockquote><p><img src="https://i.loli.net/2021/10/25/YAUtKIZBTQlkxO2.png" alt="1.3.1 数据库系统模式的概念.png"></p></blockquote><hr><h2 id="数据库系统的三级模式结构"><a href="#数据库系统的三级模式结构" class="headerlink" title="数据库系统的三级模式结构"></a>数据库系统的三级模式结构</h2><p><img src="https://i.loli.net/2021/10/25/5CrTQUvpE8ZOzSV.png" alt="1.3.2 数据库系统的三级模式结构（图示）.png"></p><h3 id="1-模式（Schema）"><a href="#1-模式（Schema）" class="headerlink" title="1. 模式（Schema）"></a>1. 模式（Schema）</h3><p>（1）也称为逻辑模式<br>•     数据库中全体数据的逻辑结构和特征的描述<br>•     所有用户的公共数据视图</p><p>（2）一个数据库只有一个模式</p><p>（3）模式的地位：是数据库系统模式结构的中间层<br>•     与数据物理存储细节和硬件环境无关<br>•     与具体的应用程序、开发工具机高级程序设计语言无关</p><p>（4）模式的定义<br>•     数据的逻辑结构（数据项的名字、类型、取值范围）<br>•     数据之间的联系<br>•     数据有关的安全性、完整性要求</p><h3 id="2-外模式（External-Schema）"><a href="#2-外模式（External-Schema）" class="headerlink" title="2. 外模式（External Schema）"></a>2. 外模式（External Schema）</h3><p>（1）也称为子模式或为用户模式<br>•     数据用户使用局部数据的逻辑结构和特征的描述<br>•     数据库用户的数据视图，是与某一应用有关的数据的逻辑表示</p><p>（2）外模式的地位：介于模式与应用之间<br>•     模式与外模式的关系：一对多<br>•     外模式通常是模式的子集<br>•     一个数据库可以有多个外模式。反映了不同的用户的应用需求、看待数据的方式、对数据的保密的要求<br>•     对模式中同一数据，在外模式中的结构、类型、长度、保密级别等都可以不同</p><p>（3）外模式与应用的关系：一对多<br>•     同一外模式可以为某一用户的多个应用系统所使用<br>•     但一个应用程序只能使用一个外模式</p><p>（4）外模式的用途<br>•     保证数据库安全性的一个有力措施<br>•     每个用户只能看见和访问所对应的外模式中的数据</p><h3 id="3-内模式（Internal-Schema）"><a href="#3-内模式（Internal-Schema）" class="headerlink" title="3. 内模式（Internal Schema）"></a>3. 内模式（Internal Schema）</h3><p>（1）也称为存储模式<br>•     是数据物理结构和存储方式的描述</p><p>（2）是数据在数据库内部的表示方式<br>•     记录的存储方式<br>•     索引的组织方式<br>•     数据是否压缩存储<br>•     数据是否加密<br>•     数据存储记录结构的规定</p><p>（3）一个数据库只有一个内模式</p><blockquote><p><img src="https://i.loli.net/2021/10/25/Lmvg9tRpFf6sTzu.png" alt="1.3.2 数据库系统的三级模式结构.png"></p></blockquote><hr><h2 id="数据库的二级映像功能与数据独立性"><a href="#数据库的二级映像功能与数据独立性" class="headerlink" title="数据库的二级映像功能与数据独立性"></a>数据库的二级映像功能与数据独立性</h2><ol><li><p>三级模式是对数据的三个抽象级别</p></li><li><p>二级映象在数据库管理系统内部实现的三个抽象层次的联系和转换<br>（1）外模式/模式映象<br>（2）模式/内模式映象</p></li><li><p>外模式/模式映像<br>（1）模式：描述的数据的全局逻辑结构<br>（2）外模式：描述的是数据的局部逻辑结构<br>（3）同一个模式可以有任意多个外模式<br>（4）每一个外模式，数据库系统都有一个外模式/模式映象，定义外模式与模式之间的对应关系<br>（5）映像定义通常包含在各自外模式的描述中<br>（6）保证数据的<strong>逻辑独立性</strong><br>•     当模式改变时，数据库管理员对外模式/模式映象作相应改变，使外模式保持不变<br>•     应用程序是依据数据的外模式编写，应用程序不必修改，保证了数据与程序的逻辑独立性，简称数据的逻辑独立性</p></li><li><p>模式/内模式<br>（1）模式/内模式映象定义了数据全局逻辑结构与存储结构之间的对应关系<br>（2）数据库中模式/内模式映象是唯一的<br>（3）该映象定义通常包含在模式描述中<br>（4）保证数据的<strong>物理独立性</strong><br>•     当数据库的存储结构改变，数据库管理员修改模式/内模式映象，使模式保持不变<br>•     应用程序不受影响。保证了数据与程序的物理独立性，简称数据的物理独立性</p></li><li><p>数据库模式<br>（1）即全局逻辑结构是数据库的中心与关键<br>（2）独立于数据库的其他层次<br>（3）设计数据库模式结构时应首先确定数据库的逻辑模式</p></li><li><p>数据库的内模式<br>（1）依赖于它的全局逻辑结构<br>（2）独立于数据库的用户视图，即外模式<br>（3）独立于具体的存储设备<br>（4）将全局逻辑结构中所定义的数据结构及联系按照一定的物理存储策略进行组织，以达到较好的时间与空间效率</p></li><li><p>数据库的外模式<br>（1）面向具体的应用程序<br>（2）定义在逻辑模式之上<br>（3）独立于存储模式和存储设备<br>（4）但应用需求发生较大变化，相应外模式不能满足器视图需求时，该外模式就得做出相应的改动<br>（5）设计外模式时应充分考虑到应用的扩充性</p></li><li><p>特定的应用程序<br>（1）在外模式描述的数据结构上编制的<br>（2）依赖于特定的外模式<br>（3）与数据库的模式和存储结构独立<br>（4）不同的应用程序有时可以公用一个外模式</p></li><li><p>数据库的二级映象<br>（1）保证了数据库外模式的稳定性<br>（2）从底层保证了应用程序的稳定性，除非应用需求本身发生变化，否则应用程序一般不需要修改</p></li><li><p>数据与程序之间的独立性，使得数据的定义和描述可以从应用程序中分离出去</p></li><li><p>数据存取由数据库管理系统管理<br>（1）简化了应用程序的编制<br>（2）减少了应用程序的维护和修改</p></li></ol><blockquote><p><img src="https://i.loli.net/2021/10/25/ukt4ZCbNiW7DnY2.png" alt="1.3.3 数据库的二级映像功能与数据独立性.png"></p></blockquote><hr><p>本文思维导图源自：</p><p>CSDN - <a href="https://blog.csdn.net/frozennet/article/details/103817378">【数据库系统概论】第一章 绪论 1.3 数据库系统结构</a></p>]]></content>
      
      
      <categories>
          
          <category> 《数据库系统概论》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【4K】GALA《追梦赤子心》</title>
      <link href="/2021/10/16/2021-20/"/>
      <url>/2021/10/16/2021-20/</url>
      
        <content type="html"><![CDATA[<h1 id="正片观看"><a href="#正片观看" class="headerlink" title="正片观看"></a>正片观看</h1><div style="position: relative; padding: 30% 45%;"><iframe src="//player.bilibili.com/player.html?aid=633621775&bvid=BV1ob4y187YS&cid=424572515&page=1&as_wide=1&high_quality=1&danmaku=" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><hr><p>音乐的前奏一出来，<br>又把我的记忆带到了中学。<br>唉，已经大二了，<br>一想到明年就20岁了，<br>还是不敢相信，<br>总觉得自己还是小孩。</p><p>父母，也老了吧。</p><hr><h1 id="评论精选"><a href="#评论精选" class="headerlink" title="评论精选"></a>评论精选</h1><hr><p>【达仔哈哈】（2021-10-15 21:23）</p><blockquote><p>&emsp;&emsp;很感动，但是无法达到我心里的最底层。因为视频里我看到的，都是生活水平很不错，或者有些文化和才气的老人们。他们很可能不是同龄人中占大部分的。我们的户籍城市化率现在也低于50%，更多的农村留守老人，他们其实没有很多文化，更没有很多让自己活得体面的才艺，更多的，只能默默在心里思念，他们一手养大，却远在他乡的后代。……anyway，也希望大众传媒，关注一下他们。<br>&emsp;&emsp;此刻的我，在深圳某一个角落，想到已经年逾80的奶奶和外婆，再想到我可能甚至没有能力和机会带她们去一次远方的北京，看看她们在心里唯一有模糊向往的外省城市，我突然又没有了表达欲。</p></blockquote><ul><li><p>【54188hhc】（2021-10-15 22:51）</p><blockquote><p>&emsp;&emsp;其实辩证的看 你带着他们的希望出来了 不管咋样以后的你作为他们竭尽所能托出来的希望更应该努力 既然他们成不了视频里的人，你也要替他们成为视频里的人 加油！[星星眼]我跟你一样在北方的一个城市，我姥姥逼着自己的三个孩子考出来了 我母亲有心脏病照顾不了我后来我姥姥又把我弄到上大学，我带着她的希望继续走，这也是一种传承[呲牙][呲牙]<br>&emsp;&emsp;而且视频里是积极向上的 多积极一点对自己内心也是好的[呲牙]</p></blockquote></li><li><p>【瑞士糖兔兔荷兰逗】</p><blockquote><p>其实我觉得你的关注点有点偏了，无论是才艺还是去北京都不是最重要的，最重要的是你的奶奶和外婆有没有做自己喜欢的事，把每一天都过得尽量满足，只要不是悲观、消极的把自己关在家里度日（当然不包括身体不好情况特殊的），不每天恐惧变老，享受当下才是最重要的。这意味着等将来回想起自己人生的时候，不会觉得老年空虚。<br>喜欢做的事可以是看着戏剧频道一起咿咿呀呀的唱戏，可以是养着自己最想养的动物/植物每天快乐的照顾它，可以是喜欢与好友逛街，也可以是乐呵呵的和好友约着打麻将，更可以是每天晚上去河边散步看灯光夜景或者在楼下坐着乘凉聊天，更或许她们有自己想去的远方，也许不是北京，也许是想看某种景色。无论是什么样的老年生活，只要家里的老人过得开心，精神不空虚，同时身体健康，脑子清晰，这就是长辈们最好的生活了，而不是才艺。现在去不了远方，也可以偶尔带长辈爬个山丘拍一些照，或是偶尔就近去个不错的地方逛一逛，例如周边县或者市不错的景区一年去一个。<br>现在家里的长辈较多是独居（除非年龄太大或者是行动不便不放心），让他们找到自己喜欢做的事而不是经常窝在家里独守空房、从多半辈子奉献家庭的生活里摘不出来，也是一件非常重要的事。每天有了自己想做的事不仅人有了精气神，心理也会更健康、开朗，不再觉得孤独或者寂寞，更不会觉得人老了就没用了，老年生活寡淡。<br>所以让长辈更注重自己的生活，过得更加自我，这就是节目想传达的，不再让自己的老年过得只有照顾子孙的生活，也不恐惧衰老，更不觉得老人爱出门或者想学一些年轻时没条件学的东西是无用的、丢人的，多半辈子都把自己放在家庭里没了自我，没有自己的生活，到了年老，多满足自己的精神需求挺好的。平时你也可以多鼓励她们去做一些以前没条件能做的事，日子过得开心才是最重要的不是嘛[爱心]</p></blockquote></li></ul><hr><p>【广发保险经纪】（2021-10-15 09:49）</p><blockquote><p>16年，团队解散的时候，老大请我们去唱歌，在KTV里，他只点了这一首歌，他唱歌真得不好听，包括这首歌，但所有人，都被他唱这首歌时的认真震撼了。他是真的把自己代入了这首歌的状态下，发自肺腑唱出了自己要说的话。到现在，5年过去了，他事业一帆风顺，但我从他唱这首歌时的样子就知道，这样的人，是一个打不垮，煮不烂的铜豌豆，是一颗迟早要发光的金豌豆。</p></blockquote><hr><p>其实我很喜欢浏览评论区里别人的故事，通过别人的字符去感受那个人的生活，与打字时的心境。甚至有时候视频可能只有5分钟，看评论都能看上20分钟…[笑哭~]</p><p>最后分享一个『英文小诗』吧，<br>点击最后一行展开全文。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">New York is 3 hours ahead of California,</span><br><span class="line">纽约时间比加州时间早三个小时，</span><br><span class="line">but it does not make California slow.</span><br><span class="line">但加州时间并没有变慢。</span><br><span class="line">Someone graduated at the age of 22,</span><br><span class="line">有人22岁就毕业了，</span><br><span class="line">but waited 5 years before securing a good job!</span><br><span class="line">但等了五年才找到好的工作！</span><br><span class="line">Someone became a CEO at 25,</span><br><span class="line">有人25岁就当上CEO，</span><br><span class="line">and died at 50.</span><br><span class="line">却在50岁去世。</span><br><span class="line">While another became a CEO at 50,</span><br><span class="line">也有人迟到50岁才当上CEO，</span><br><span class="line">and lived to 90 years.</span><br><span class="line">然后活到90岁。</span><br><span class="line">Someone is still single,</span><br><span class="line">有人依然单身，</span><br><span class="line">while someone else got married.</span><br><span class="line">同时也有人已婚。</span><br><span class="line">Obama retires at 55,</span><br><span class="line">奥巴马55岁就退休，</span><br><span class="line">but Trump starts at 70.</span><br><span class="line">川普70岁才开始当总统。</span><br><span class="line">Absolutely everyone in this world works based on their Time Zone.</span><br><span class="line">世上每个人本来就有自己的发展时区。</span><br><span class="line">People around you might seem to go ahead of you,</span><br><span class="line">身边有些人看似走在你前面，</span><br><span class="line">some might seem to be behind you.</span><br><span class="line">也有人看似走在你后面。</span><br><span class="line">But everyone is running their own RACE, in their own TIME.</span><br><span class="line">但其实每个人在自己的时区有自己的步程。</span><br><span class="line">Don’t envy them or mock them.</span><br><span class="line">不用嫉妒或嘲笑他们。</span><br><span class="line">They are in their TIME ZONE, and you are in yours!</span><br><span class="line">他们都在自己的时区里，你也是！</span><br><span class="line">Life is about waiting for the right moment to act.</span><br><span class="line">生命就是等待正确的行动时机。</span><br><span class="line">So, RELAX.</span><br><span class="line">所以，放轻松。</span><br><span class="line">You’re not LATE.</span><br><span class="line">你没有落后。</span><br><span class="line">You’re not EARLY.</span><br><span class="line">你没有领先。</span><br><span class="line">You are very much ON TIME, and in your TIME ZONE Destiny set up for you.</span><br><span class="line">在命运为你安排的属于自己的时区里，一切都准时。</span><br></pre></td></tr></table></figure><p><br /><br /></p><p><strong>晚安。</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【担忧】关于我过多个人信息的暴露</title>
      <link href="/2021/10/13/2021-19/"/>
      <url>/2021/10/13/2021-19/</url>
      
        <content type="html"><![CDATA[<p>今天顺手瞅了一下百度统计，本想看看我博客网站的访问数据，却发生了一件令我脊骨微微发凉的事情。</p><p>因为我经常在<code>大♂佬群</code>或者<code>技术(交♂流)群</code>聊天划水鬼混，群名片上有我的博客地址，也习惯在其他地方（如CSDN）写博客时往我的博客引流，所以浏览了几页访客来源，看到很多是直接搜索我的博客网址访问的，所以我并没有感到什么不舒适，反而会因为别人对自己的小破博客网站的到访而开心。</p><p>其次，就是有零星几个访客是通过我友链过的朋友们的博客来的，这也没有什么，方便查看朋友的动态与互相引流本身就是互加友链的原因之一嘛，对吧。</p><p>但是，注意了，但是！我继续翻页时看到了一条访客是通过<code>必应搜索</code>进入的，我立马警惕了起来，瞪大了眼睛。</p><blockquote><p><img src="https://i.loli.net/2021/10/13/UiJO7ermzhMQpLo.png" alt="图2021-19_发现来源必应的访客.png"></p></blockquote><p>纳尼？必应？！</p><p>要知道，我的博客<a href="https://barry-flynn.github.io/">https://barry-flynn.github.io</a>目前为止只是托管在了GitHubPage上，我连域名和服务器都 <del>穷得</del> 懒得买啊，更别花时间折腾功夫去让浏搜索引擎收录我的网站了。更何况，我平常用百度搜索引擎，也没见能搜到我的博客啊！所以我下意识以为只有给像百度一样的搜索引擎 money 才能让自己的网站被收录……（看来是我缺乏常识了）</p><p>当我点开那位访客的必应搜索来源，我发现搜索排名还挺靠前（排第五）！Ta搜索的是“大二学年规划”，而我在Ta搜索该名词的十天前，写过“<a href="https://barry-flynn.github.io/2021/09/27/2021-4/">【日常生活】大二学年规划清单丨百里飞洋</a>”这篇随便瞎写的小破文章，于是那个人就点开看了两分钟……</p><blockquote><p><img src="https://i.loli.net/2021/10/14/LpS7qOMPiIHRZcy.png" alt="图2021-19_我的博客在必应的搜索排名第五.png"></p></blockquote><p>于是我在必应上搜索了一下我名称，好家伙，我直接好家伙，以后都不用别人人肉搜索我了，我几乎所有社交平台和个人信息全都自己出来了啊！</p><blockquote><p><img src="https://i.loli.net/2021/10/14/DqtKXrSxuj1LZaB.png" alt="图2021-19_必应搜索百里飞洋.png"></p></blockquote><p>如图，左边是我的几乎所有社交平台的主页，右边是我在B站发过的播放量高的视频……</p><p>其实顺藤摸瓜就能查到我绝大多数的个人信息了，因为我在我微博博文上、B站视频里和博客网站中都暴露挺多的，而且这不是个人隐私泄露，是我自己发布出去的……</p><p>相当于我已经在互联网上几乎全裸了……真的后怕……</p><p>说白了，就是平时不注意对隐私信息的处理，年少轻狂，分享欲太高，自我保护意识太差，还老是在不同平台用同一个ID，哎，包括这篇文章，其实算是私人日记的，我竟然也直接发布到公开的博客网站上，本来不知道这个事情的人，看完可能就直接去搜我的信息了……（说的你鸭，你不会待会儿准备去必应搜吧……）</p><p>罢了罢了，其实说开了，现在的人也没有多少隐私了，几乎全都在互联网上裸奔，信息泄露事件也屡见不鲜，我所暴露过的这些信息目前其实又能值几个钱呢？只是大大降低了人肉搜索我的门槛罢了。况且我目前仅仅是个无名小卒罢了，谁又会人肉我呢……（但保不齐以后）</p><p>诶不对不对，我暴露这些个人信息和社交联系方式，真的全是坏处吗？上面所说的这些担忧，会不会只是“被害妄想症”作祟？</p><p>算了，不想了，不早了，睡觉。</p><p>总之，此文，庸人自扰罢了。</p>]]></content>
      
      
      <categories>
          
          <category> 【我的日常】 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【并行计算】Linpack的安装与调试（一）：安装编译器和并行环境</title>
      <link href="/2021/10/13/2021-18/"/>
      <url>/2021/10/13/2021-18/</url>
      
        <content type="html"><![CDATA[<p>踩了很多坑，<br>网上教程每个人写的都不一样，<br>装错又卸载，卸载又重装，<br>老师也不教，直接布置任务下来，<br>有经验的同学也不知道我报错是因为什么，<br>好几个同学都压力大退课了。<br>头疼又难受，想吐，<br>做梦都在Linux上装软件，<br>都快魔怔了，写篇总结文吧。</p><blockquote><p>本文全过程在Ubuntu系统下进行</p></blockquote><hr><h1 id="编译器的安装"><a href="#编译器的安装" class="headerlink" title="编译器的安装"></a>编译器的安装</h1><p>安装vim，gcc，g++，gfortran，make<br>是的，如果没有安装过，那就全安装一遍。</p><pre><code>sudo apt install vim您希望继续执行吗？ [Y/n] ysudo apt install gcc您希望继续执行吗？ [Y/n] ysudo apt install g++您希望继续执行吗？ [Y/n] ysudo apt install gfortran您希望继续执行吗？ [Y/n] ysudo apt install make</code></pre><hr><h1 id="并行环境-mpich-的安装"><a href="#并行环境-mpich-的安装" class="headerlink" title="并行环境(mpich)的安装"></a>并行环境(mpich)的安装</h1><ul><li>常用的MPI并行环境有：MPICH、LAM-MPI、openmpi、Intel的MPI等。</li><li>如果CPU是Intel的产品，提议使用Intel的MPI。</li><li>这里使用MPICH。</li></ul><p><strong>安装目标：</strong><br>将 <code>mpich</code> 安装到 <code>/usr/local/mpich</code> 文件夹</p><p><strong>下载mpich安装包：</strong><br>我以<code>mpich-3.4.2.tar.gz</code>版本为例<br>下载地址：<a href="http://www.mpich.org/downloads/">www.mpich.org/downloads/</a><br>默认下载到家目录的“下载”目录中</p><p><strong>安装步骤：</strong></p><hr><p><strong>进入源代码压缩包所在目录</strong></p><pre><code>~$ cd 下载</code></pre><h2 id="解压安装包：tar命令"><a href="#解压安装包：tar命令" class="headerlink" title="解压安装包：tar命令"></a>解压安装包：tar命令</h2><pre><code>~/下载$ sudo tar -zxvf  mpich-3.4.2.tar.gz</code></pre><blockquote><p>命令详解：<br><a href="https://www.linuxcool.com/tar">tar命令 – 打包和备份的归档工具</a><br>参数<code>-z</code>：通过gzip指令压缩/解压缩文件，文件名最好为*.tar.gz<br>参数<code>-x</code>：从归档文件中提取文件<br>参数<code>-v</code>：显示操作过程<br>参数<code>-f</code>：指定备份文件</p></blockquote><p><strong>进入解压文件夹</strong></p><pre><code>~/下载$ cd mpich-3.4.2</code></pre><p><strong>显示目录内容</strong></p><pre><code>~/下载/mpich-3.4.2$ ls</code></pre><blockquote><p>命令详解：<br><a href="https://www.linuxcool.com/ls">ls命令 – 显示指定工作目录下的内容及属性信息</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aclocal.m4     configure     examples     mpich-doxygen.in   test</span><br><span class="line">autogen.sh     configure.ac  maint        README             www</span><br><span class="line">CHANGES        contrib       Makefile.am  README.envvar</span><br><span class="line">confdb         CONTRIBUTING  Makefile.in  RELEASE_NOTES</span><br><span class="line">config.log     COPYRIGHT     man          src</span><br><span class="line">config.system  doc           modules      subsys_include.m4</span><br></pre></td></tr></table></figure><hr><h2 id="配置：configure命令"><a href="#配置：configure命令" class="headerlink" title="配置：configure命令"></a>配置：configure命令</h2><pre><code>~/下载/mpich-3.4.2$ sudo ./configure --prefix=/usr/local/mpich</code></pre><blockquote><p>命令详解：<br><code>configure</code>：是一个shell脚本，它在源文件的根目录中。他的作用是检查你的系统中是否有编译这个程序依赖的其它库之类的东西。<br><code>prefix 参数</code>：指定目标安装路径，必须指定，否则不知道默认安装到哪里，不方便以后的管理（类似windows的安装路径）。prefix后的路径随意； 另外“ ./configure ”中“ ./ ”——表示当前目录，这个是相对路径。</p></blockquote><ul><li><p>若未进行第一步的“编译器的安装”，可能会出现以下报错，<br>（如遇到请先安装第一步的编译器，再执行./configure命令）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">barryflynn@barryflynn:/usr/mpich/mpich-3.4.2$ sudo ./configure --prefix=/usr/mpich</span><br><span class="line">[sudo] barryflynn 的密码： </span><br><span class="line">Configuring MPICH version 3.4.2 with  &#x27;--prefix=/usr/mpich&#x27;</span><br><span class="line">Running on system: Linux barryflynn 5.11.0-34-generic #36~20.04.1-Ubuntu SMP Fri Aug 27 08:06:32 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line">checking build system type... x86_64-unknown-linux-gnu</span><br><span class="line">checking host system type... x86_64-unknown-linux-gnu</span><br><span class="line">checking target system type... x86_64-unknown-linux-gnu</span><br><span class="line">checking for gcc... no</span><br><span class="line">checking for cc... no</span><br><span class="line">checking for cl.exe... no</span><br><span class="line">configure: error: in `/usr/mpich/mpich-3.4.2&#x27;:</span><br><span class="line">configure: error: no acceptable C compiler found in $PATH</span><br><span class="line">See `config.log&#x27; for more details</span><br><span class="line"></span><br><span class="line">------------------翻译----------------------</span><br><span class="line"></span><br><span class="line">使用“--prefix=/usr/MPICH”配置MPICH版本3.4.2</span><br><span class="line">在系统上运行：Linux barryflynn 5.11.0-34-generic#36~20.04.1-Ubuntu SMP Fri Aug 27 08:06:32 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line">正在检查生成系统类型。。。x86_64-unknown-linux-gnu</span><br><span class="line">正在检查主机系统类型。。。x86_64-unknown-linux-gnu</span><br><span class="line">正在检查目标系统类型。。。x86_64-unknown-linux-gnu</span><br><span class="line">正在检查gcc。。。不</span><br><span class="line">正在检查抄送。。。不</span><br><span class="line">正在检查cl.exe。。。不</span><br><span class="line">配置：错误：在“/usr/mpich/mpich-3.4.2”中：</span><br><span class="line">配置：错误：在$PATH中找不到可接受的C编译器</span><br><span class="line">有关详细信息，请参阅“config.log” </span><br></pre></td></tr></table></figure></li><li><p>如果进最后进程代码报错是这样的：<br>（展开后直接看最后那部分跟你的是否一样）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line">Configuring MPICH version 3.4.2 with  &#x27;--prefix=/usr/local/mpich&#x27;</span><br><span class="line">Running on system: Linux barryflynn 5.11.0-34-generic #36~20.04.1-Ubuntu SMP Fri Aug 27 08:06:32 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line">checking build system type... x86_64-unknown-linux-gnu</span><br><span class="line">checking host system type... x86_64-unknown-linux-gnu</span><br><span class="line">checking target system type... x86_64-unknown-linux-gnu</span><br><span class="line">checking for gcc... gcc</span><br><span class="line">checking whether the C compiler works... yes</span><br><span class="line">checking for C compiler default output file name... a.out</span><br><span class="line">checking for suffix of executables... </span><br><span class="line">checking whether we are cross compiling... no</span><br><span class="line">checking for suffix of object files... o</span><br><span class="line">checking whether we are using the GNU C compiler... yes</span><br><span class="line">checking whether gcc accepts -g... yes</span><br><span class="line">checking for gcc option to accept ISO C89... none needed</span><br><span class="line">checking whether gcc understands -c and -o together... yes</span><br><span class="line">checking for gcc option to accept ISO C99... none needed</span><br><span class="line">checking how to run the C preprocessor... gcc -E</span><br><span class="line">checking for grep that handles long lines and -e... /usr/bin/grep</span><br><span class="line">checking for egrep... /usr/bin/grep -E</span><br><span class="line">checking for ANSI C header files... yes</span><br><span class="line">checking for sys/types.h... yes</span><br><span class="line">checking for sys/stat.h... yes</span><br><span class="line">checking for stdlib.h... yes</span><br><span class="line">checking for string.h... yes</span><br><span class="line">checking for memory.h... yes</span><br><span class="line">checking for strings.h... yes</span><br><span class="line">checking for inttypes.h... yes</span><br><span class="line">checking for stdint.h... yes</span><br><span class="line">checking for unistd.h... yes</span><br><span class="line">checking minix/config.h usability... no</span><br><span class="line">checking minix/config.h presence... no</span><br><span class="line">checking for minix/config.h... no</span><br><span class="line">checking whether it is safe to define __EXTENSIONS__... yes</span><br><span class="line">checking for a BSD-compatible install... /usr/bin/install -c</span><br><span class="line">checking whether build environment is sane... yes</span><br><span class="line">checking for a thread-safe mkdir -p... /usr/bin/mkdir -p</span><br><span class="line">checking for gawk... no</span><br><span class="line">checking for mawk... mawk</span><br><span class="line">checking whether make sets $(MAKE)... yes</span><br><span class="line">checking for style of include used by make... GNU</span><br><span class="line">checking whether make supports nested variables... yes</span><br><span class="line">checking dependency style of gcc... gcc3</span><br><span class="line">checking whether to enable maintainer-specific portions of Makefiles... yes</span><br><span class="line">checking for ar... ar</span><br><span class="line">checking the archiver (ar) interface... ar</span><br><span class="line">checking how to print strings... printf</span><br><span class="line">checking for a sed that does not truncate output... /usr/bin/sed</span><br><span class="line">checking for fgrep... /usr/bin/grep -F</span><br><span class="line">checking for ld used by gcc... /usr/bin/ld</span><br><span class="line">checking if the linker (/usr/bin/ld) is GNU ld... yes</span><br><span class="line">checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B</span><br><span class="line">checking the name lister (/usr/bin/nm -B) interface... BSD nm</span><br><span class="line">checking whether ln -s works... yes</span><br><span class="line">checking the maximum length of command line arguments... 1572864</span><br><span class="line">checking how to convert x86_64-unknown-linux-gnu file names to x86_64-unknown-linux-gnu format... func_convert_file_noop</span><br><span class="line">checking how to convert x86_64-unknown-linux-gnu file names to toolchain format... func_convert_file_noop</span><br><span class="line">checking for /usr/bin/ld option to reload object files... -r</span><br><span class="line">checking for objdump... objdump</span><br><span class="line">checking how to recognize dependent libraries... pass_all</span><br><span class="line">checking for dlltool... no</span><br><span class="line">checking how to associate runtime and link libraries... printf %s\n</span><br><span class="line">checking for archiver @FILE support... @</span><br><span class="line">checking for strip... strip</span><br><span class="line">checking for ranlib... ranlib</span><br><span class="line">checking command to parse /usr/bin/nm -B output from gcc object... ok</span><br><span class="line">checking for sysroot... no</span><br><span class="line">checking for a working dd... /usr/bin/dd</span><br><span class="line">checking how to truncate binary pipes... /usr/bin/dd bs=4096 count=1</span><br><span class="line">checking for mt... mt</span><br><span class="line">checking if mt is a manifest tool... no</span><br><span class="line">checking for dlfcn.h... yes</span><br><span class="line">checking for objdir... .libs</span><br><span class="line">checking if gcc supports -fno-rtti -fno-exceptions... no</span><br><span class="line">checking for gcc option to produce PIC... -fPIC -DPIC</span><br><span class="line">checking if gcc PIC flag -fPIC -DPIC works... yes</span><br><span class="line">checking if gcc static flag -static works... yes</span><br><span class="line">checking if gcc supports -c -o file.o... yes</span><br><span class="line">checking if gcc supports -c -o file.o... (cached) yes</span><br><span class="line">checking whether the gcc linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes</span><br><span class="line">checking whether -lc should be explicitly linked in... no</span><br><span class="line">checking dynamic linker characteristics... GNU/Linux ld.so</span><br><span class="line">checking how to hardcode library paths into programs... immediate</span><br><span class="line">checking whether stripping libraries is possible... yes</span><br><span class="line">checking if libtool supports shared libraries... yes</span><br><span class="line">checking whether to build shared libraries... yes</span><br><span class="line">checking whether to build static libraries... yes</span><br><span class="line">checking whether make supports nested variables... (cached) yes</span><br><span class="line">checking for g++... g++</span><br><span class="line">checking whether we are using the GNU C++ compiler... yes</span><br><span class="line">checking whether g++ accepts -g... yes</span><br><span class="line">checking dependency style of g++... gcc3</span><br><span class="line">checking how to run the C++ preprocessor... g++ -E</span><br><span class="line">checking for ld used by g++... /usr/bin/ld -m elf_x86_64</span><br><span class="line">checking if the linker (/usr/bin/ld -m elf_x86_64) is GNU ld... yes</span><br><span class="line">checking whether the g++ linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes</span><br><span class="line">checking for g++ option to produce PIC... -fPIC -DPIC</span><br><span class="line">checking if g++ PIC flag -fPIC -DPIC works... yes</span><br><span class="line">checking if g++ static flag -static works... yes</span><br><span class="line">checking if g++ supports -c -o file.o... yes</span><br><span class="line">checking if g++ supports -c -o file.o... (cached) yes</span><br><span class="line">checking whether the g++ linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes</span><br><span class="line">checking dynamic linker characteristics... (cached) GNU/Linux ld.so</span><br><span class="line">checking how to hardcode library paths into programs... immediate</span><br><span class="line">checking for gfortran... gfortran</span><br><span class="line">checking whether we are using the GNU Fortran compiler... yes</span><br><span class="line">checking whether gfortran accepts -g... yes</span><br><span class="line">checking if libtool supports shared libraries... yes</span><br><span class="line">checking whether to build shared libraries... yes</span><br><span class="line">checking whether to build static libraries... yes</span><br><span class="line">checking for gfortran option to produce PIC... -fPIC</span><br><span class="line">checking if gfortran PIC flag -fPIC works... yes</span><br><span class="line">checking if gfortran static flag -static works... yes</span><br><span class="line">checking if gfortran supports -c -o file.o... yes</span><br><span class="line">checking if gfortran supports -c -o file.o... (cached) yes</span><br><span class="line">checking whether the gfortran linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes</span><br><span class="line">checking dynamic linker characteristics... (cached) GNU/Linux ld.so</span><br><span class="line">checking how to hardcode library paths into programs... immediate</span><br><span class="line">checking whether we are using the GNU Fortran 77 compiler... yes</span><br><span class="line">checking whether gfortran accepts -g... yes</span><br><span class="line">checking if libtool supports shared libraries... yes</span><br><span class="line">checking whether to build shared libraries... yes</span><br><span class="line">checking whether to build static libraries... yes</span><br><span class="line">checking for gfortran option to produce PIC... -fPIC</span><br><span class="line">checking if gfortran PIC flag -fPIC works... yes</span><br><span class="line">checking if gfortran static flag -static works... yes</span><br><span class="line">checking if gfortran supports -c -o file.o... yes</span><br><span class="line">checking if gfortran supports -c -o file.o... (cached) yes</span><br><span class="line">checking whether the gfortran linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes</span><br><span class="line">checking dynamic linker characteristics... (cached) GNU/Linux ld.so</span><br><span class="line">checking how to hardcode library paths into programs... immediate</span><br><span class="line">configure: RUNNING PREREQ FOR CH4 DEVICE</span><br><span class="line">checking rdma/fabric.h usability... no</span><br><span class="line">checking rdma/fabric.h presence... no</span><br><span class="line">checking for rdma/fabric.h... no</span><br><span class="line">checking for fi_getinfo in -lfabric... no</span><br><span class="line">checking ucp/api/ucp.h usability... no</span><br><span class="line">checking ucp/api/ucp.h presence... no</span><br><span class="line">checking for ucp/api/ucp.h... no</span><br><span class="line">checking for ucp_config_read in -lucp... no</span><br><span class="line">configure: error: no ch4 netmod selected</span><br><span class="line"></span><br><span class="line">  The default ch4 device could not detect a preferred network</span><br><span class="line">  library. Supported options are ofi (libfabric) and ucx:</span><br><span class="line"></span><br><span class="line">    --with-device=ch4:ofi or --with-device=ch4:ucx</span><br><span class="line"></span><br><span class="line">  Configure will use an embedded copy of libfabric or ucx if one is</span><br><span class="line">  not found in the user environment. An installation can be specified</span><br><span class="line">  by adding</span><br><span class="line"></span><br><span class="line">    --with-libfabric=&lt;path/to/install&gt; or --with-ucx=&lt;path/to/install&gt;</span><br><span class="line"></span><br><span class="line">  to the configuration.</span><br><span class="line"></span><br><span class="line">  The previous MPICH default device (ch3) is also available and</span><br><span class="line">  supported with option:</span><br><span class="line"></span><br><span class="line">    --with-device=ch3</span><br><span class="line">    </span><br><span class="line">barryflynn@barryflynn:~/下载/mpich-3.4.2$ </span><br></pre></td></tr></table></figure><p>那你ls一下，肯定没有名为Makefile的文件，说明没有configure成功，</p><pre><code>  ~/下载/mpich-3.4.2$ ls</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aclocal.m4  config.system  COPYRIGHT    Makefile.in       README.envvar      www</span><br><span class="line">autogen.sh  configure      doc          man               RELEASE_NOTES</span><br><span class="line">CHANGES     configure.ac   examples     modules           src</span><br><span class="line">confdb      contrib        maint        mpich-doxygen.in  subsys_include.m4</span><br><span class="line">config.log  CONTRIBUTING   Makefile.am  README            test</span><br></pre></td></tr></table></figure><p>那么按照上边报错代码的结尾，加上<code>--with-device=ch4:ofi</code></p><pre><code>  ~/下载/mpich-3.4.2$ sudo ./configure --prefix=/usr/local/mpich --with-device=ch4:ofi</code></pre><p>然后飘过大坨大坨代码…..</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">config.status: creating Makefile</span><br><span class="line">config.status: creating include/Makefile</span><br><span class="line">config.status: creating src/Makefile</span><br><span class="line">config.status: creating dtpoolsconf.h</span><br><span class="line">config.status: executing depfiles commands</span><br><span class="line">config.status: executing libtool commands</span><br><span class="line">***</span><br><span class="line">*** device: ch4</span><br><span class="line">*** netmods: ofi</span><br><span class="line">*** shm: auto</span><br><span class="line">***</span><br><span class="line">Configuration completed.</span><br></pre></td></tr></table></figure><p>最后看到<code>Configuration completed.</code>代表配置完成。<br>现在查看一下目录：</p><pre><code>  ~/下载/mpich-3.4.2$ ls</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aclocal.m4  config.status  COPYRIGHT  Makefile       mpich-doxygen.in   test</span><br><span class="line">autogen.sh  config.system  doc        Makefile.am    README             www</span><br><span class="line">CHANGES     configure      examples   Makefile.in    README.envvar</span><br><span class="line">confdb      configure.ac   lib        man            RELEASE_NOTES</span><br><span class="line">config.log  contrib        libtool    modules        src</span><br><span class="line">config.lt   CONTRIBUTING   maint      mpich-doxygen  subsys_include.m4</span><br></pre></td></tr></table></figure><p>可以看到现在有Makefile 了，配置成功。</p></li></ul><hr><h2 id="编译：make命令"><a href="#编译：make命令" class="headerlink" title="编译：make命令"></a>编译：make命令</h2><pre><code>~/下载/mpich-3.4.2$ sudo make</code></pre><p>时间可能会很长，慢慢等待。</p><hr><h2 id="安装：make-install命令"><a href="#安装：make-install命令" class="headerlink" title="安装：make install命令"></a>安装：make install命令</h2><pre><code>~/下载/mpich-3.4.2$ sudo make install</code></pre><hr><h2 id="设置环境变量：export-PATH"><a href="#设置环境变量：export-PATH" class="headerlink" title="设置环境变量：export PATH"></a>设置环境变量：export PATH</h2><p>安装好了之后，还需要告诉系统mpi库的路径地址，这样当你调用mpi的命令时，系统才知道你在干什么。在用户的根目录（即：家目录 <code>~</code> ）下，有一个<code>.bashrc</code>的文本文件（默认使用的是bash，如果是zsh等自行查阅资料）。这个文件可以理解为，每次打开终端时都会加载的启动项。</p><pre><code>vim ~/.bashrc</code></pre><p>通过之前安装的vim编译器打开当前用户下所对应的.bashrc文件，<br>按a进入插入模式，<br>在其中加入一行（建议用方向键滑到最下，添加到最下面一行）:</p><pre><code>export PATH=&quot;/usr/local/mpich/bin:$PATH&quot; </code></pre><p>添加完后Esc退出插入模式，最后一行输入 <code>：wq</code> 保存退出。</p><p>保存退出之后 ，使用source这一命令执行一下就把新加的命令执行了。</p><pre><code>source ~/.bashrc</code></pre><hr><p>之后，用which来检验下配置的环境变量是否正确。</p><pre><code>which mpicc</code></pre><p>若返回了类似下面这样的路径，就行了</p><pre><code>/usr/local/mpich/bin/mpicc</code></pre><p>再执行命令：</p><pre><code>which mpif90</code></pre><p>若返回了类似下面这样的路径，就行了</p><pre><code>/usr/local/mpich/bin/mpif90</code></pre><p>如果执行<code>which mpicc</code>和<code>which mpif90</code>后没有返回路径，说明环境变量路径配置错误，请重新<code>vim ~/.bashrc</code>回去检查修改</p><hr><p>进入当初安装包解压后的文件夹的<code>examples</code>目录下，去测试一下hello是否能顺利运行。</p><pre><code>cd ~/下载/mpich-3.4.2/examples</code></pre><p>先编译一下</p><pre><code>mpicc -o hellow hellow.c</code></pre><p>再运行试试：</p><pre><code>mpirun -np 4 ./hellow</code></pre><p>若出现如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hello world from process 1 of 4</span><br><span class="line">Hello world from process 0 of 4</span><br><span class="line">Hello world from process 2 of 4</span><br><span class="line">Hello world from process 3 of 4</span><br></pre></td></tr></table></figure><p>代表并行环境MPICH安装成功。</p><blockquote><p>如果细心可能注意到，我全程没有进入超级管理员模式，只是在必要时在命令前添加<code>sudo</code>命令（<a href="https://www.linuxcool.com/sudo">以系统管理者的身份执行指令</a>），所以命令行之前都是<code>$</code>符号，而不是超级管理员下的<code>#</code>符号。</p></blockquote><p><br /><br /><br /><br /><br /><br><strong>THE END.</strong><br><strong>本文完~</strong></p><hr><h1 id="专业名词积累"><a href="#专业名词积累" class="headerlink" title="专业名词积累"></a>专业名词积累</h1><ul><li><code>OS</code>：操作系统（Operating System）。</li><li><code>MKL</code>：英特尔数学核心函数库（Intel Math Kernel Library）。</li><li><code>MPI</code>：消息传递接口（Moldflow Plastic Insight），是为并行任务开发的一个标准接口库，是一个提供深入制件和模具设计分析的软件包,它提供强大的分析功能、可视化功能和项目管理工具。这些工具使客户可以进行深入的分析和优化。MPI使用户可以对制件的几何形状、材料的选择、模具设计及加工参数设置进行优化以获得高质量的产品。MPI是一个库，而不是一门语言。它是一种标准或规范的代表，而不特指某一个对它的具体实现。</li><li><code>MPICH</code>：消息传递接口（Message Passing Interface）。MPICH是一种最重要的MPI实现，MPICH是一个与MPI-1规范同步发展的版本，每当MPI推出新的版本，就会有相应的MPICH的实现版本。MPICH含三层结构，最上层是MPI的API，基本是点到点通信，和在点到点通信基础上构造的集群通信（Collective Communication）；中间层是ADI层（Abstract Device Interface），其中device可以简单地理解为某一种底层通信库，ADI就是对各种不同的底层通信库的不同接口的统一标准；底层是具体的底层通 信库，例如工作站机群上的p4通信库、曙光1000上的NX库、曙光3000上的BCL通信库等。</li><li><code>Linpack</code>：线性系统软件包（Linear system package）。至目前为止， LINPACK 还是广泛地应用于解各种数学和工程问题。 也由于它高效率的运算， 使得其它几种数学软件例如IMSL、 MATLAB 纷纷加以引用来处理矩阵问题， 所以足见其在科学计算上有举足轻重的地位。Linpack现在在国际上已经成为最流行的用于测试高性能计算机系统浮点性能的benchmark。通过利用高性能计算机，用<strong>高斯消元法</strong>求解N元一次稠密线性代数方程组的测试，评价高性能计算机的浮点性能。</li><li><code>HPL</code>：用于分布式内存计算机的高性能Linpack基准测试（High-performance Linpack Benchmark for Distributed-memory Computers），是针对现代并行计算机提出的测试方式。用户在不修改任意测试程序的基础上，可以调节问题规模大小N(矩阵大小)、使用到的CPU数目、使用各种优化方法等来执行该测试程序，以获取最佳的性能。HPL采用高斯消元法求解线性方程组。当求解问题规模为N时，浮点运算次数为(2/3 * N^3－2<em>N^2)。因此，只要给出问题规模N，测得系统计算时间T，峰值=计算量(2/3 * N^3－2</em>N^2)/计算时间T，测试结果以浮点运算每秒（Flops）给出，衡量计算机性能的一个重要指标就是计算峰值或者浮点计算峰值。HPL测试结果是TOP500排名的重要依据。在比赛中，参赛队正确安装和编译HPL包之后，通过一定的配置修改，开始运行HPL，HPL的运行方式和MPI密切相关，不同的MPI在运行方面有一定的差别。运行结束输出结果后，参赛队需要针对实际测试结果进行分析，不断修改配置，优化测试，以取得满意的结果。</li><li><code>HPCG</code>：高性能共轭梯度 （High Performance Conjugate Gradient）。随着高性能应用的不断发展，其性能与HPL所测的结果（主要是系统利用率）相差较大，这主要是由于HPL包含大量稠密矩阵计算，具有良好的数据局部性，容易开发并行性和局部性，但并不能代表其他大量实际应用中常见的不易扩展和开发局部性的稀疏计算和访存模式。HPCG是求解稀疏矩阵方程组的一种迭代算法，使用局部对称Gauss—Seidel预条件子的预处理共轭梯度法，主要数据为对称正定稀疏矩阵，每一个计算循环需要调用稀疏矩阵向量乘、预条件子、向量更新和向量内积操作。覆盖了常用的计算和通信模式。HPCG类似HPL，允许使用多种优化方法调优，例如新的稀疏矩阵格式等。</li></ul><hr><h1 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h1><p><strong>主要：</strong></p><ul><li><a href="https://zhuanlan.zhihu.com/p/356705583">两小时入门MPI与并行计算（二）：MPI的安装与配置</a>-知乎 </li><li><a href="https://blog.csdn.net/weixin_42711189/article/details/116245574">MPI部署踩坑实况！！！最终成功跑通梯形面积法！！！精准全流程命令+各步骤报错解决方案！！！</a>-CSDN </li><li><a href="https://www.cnblogs.com/weidawang/p/10069583.html">mpich安装教程-魏大王敲代码</a>-博客园</li><li>Linpack的安装、调试与优化-曙光认证服务器工程师DCSA(Dawning Certified Server Associate)培训课程PDF课件</li><li><a href="http://www.blogjava.net/zhyiwww/archive/2006/06/19/53786.html">Linux 中如何卸载已安装的软件(转载)</a></li></ul><p><strong>其他：</strong></p><ul><li>《超算竞赛导引》电子版（PDF第145页）</li><li><a href="https://blog.csdn.net/sishuiliunian0710/article/details/20493101">HPL环境安装、配置及初步优化方案（报告）</a>-CSDN博客</li><li><a href="https://blog.csdn.net/hanzhenbushihu/article/details/88416724">HPL与HPCG测试（一）</a>-CSDN博客</li><li><a href="https://www.bbsmax.com/A/kvJ3qy29dg/">Linpack之HPL测试</a>-bbsmax.com</li><li><a href="https://www.bbsmax.com/A/A7zgkxXlz4/">Linpack之HPCG测试</a>-bbsmax.com</li><li><a href="https://baike.baidu.com/item/linpack/8831771?fr=aladdin">linpack百度百科</a></li><li><a href="https://baike.baidu.com/item/%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95%E7%A8%8B%E5%BA%8F/22398676?fr=aladdin">基准测试程序-百度百科</a></li><li><a href="https://blog.csdn.net/linfengfeiye/article/details/5708444">HPL测试程序安装</a>-CSDN博客</li><li><a href="http://www.51testing.com/html/92/422092-241401.html">Linpack（HPL）傻瓜式安装全过程一【MPICH的安装】</a></li><li><a href="https://www.oschina.net/p/mpich?hmsr=aladdin1e1">MPICH 消息传递接口</a>-OSCHINA/开源软件</li></ul>]]></content>
      
      
      <categories>
          
          <category> 【高性能并行计算】 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 高性能计算 </tag>
            
            <tag> 并行计算 </tag>
            
            <tag> Linpack </tag>
            
            <tag> MPICH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计组原理】第1章 计算机系统概论</title>
      <link href="/2021/10/12/2021-17/"/>
      <url>/2021/10/12/2021-17/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文所属《数据库系统原理》分类专栏，相关文章导航请点击<a href="https://barry-flynn.github.io/2021/10/12/2021-16/">《数据库系统原理》目录汇总贴</a></p></blockquote><p>【计组原理】第1章 计算机系统概论<br>了解计算机内部的工作过程：I/O→存储器→CPU→存储器→I/O，即实际上指的是指令流和数据流。同时还要了解到尽管当今计算机发展到千变万化的程度，但其最根本的组成原理还是基于冯•诺依曼结构。</p><hr><h3 id="计算机系统简介"><a href="#计算机系统简介" class="headerlink" title="计算机系统简介"></a>计算机系统简介</h3><ul><li>计算机系统由“<strong>硬件</strong>”和“<strong>软件</strong>”两大部分组成。</li><li>所谓<code>硬件</code>，是指计算机的实体部分，由看得见摸得着的各种电子元器件，各类光、电、机设备的实体部分物组成。如主机、外部设备等。</li><li>所谓<code>软件</code>，是指看不见摸不着，由人们事先编制的具有各类特殊功能的程序组成。通常将其寄存于各类媒体，并存放在计算机的主存或辅存内。</li><li>软件的作用和地位已经成为评价计算机系统性能好坏的重要标志，但软件的性能也必须依托硬件的支撑。因此，概括而言，<strong>计算机性能的好坏取决于“软”“硬”件功能的总和</strong>。</li></ul><p>（更多请见下方课后题1~4题）</p><h3 id="计算机的基本组成"><a href="#计算机的基本组成" class="headerlink" title="计算机的基本组成"></a>计算机的基本组成</h3><p>冯·诺依曼计算机的特点：</p><ol><li>计算机有运算器、存储器、控制器、输入设备和输出设备五大部件组成</li><li>指令和数据以同等地位存放于存储器内。并可按地址访问。</li><li>指令和数据均可用二进制表示。</li><li>指令由操作码和地址吗组成。操作码表示操作的性质、地址码表示操作数在存储器中的位置。</li><li>指令在存储器中按顺序存放。通常，指令时顺序执行的。在特殊情况下，可根据运算结果或指定的条件来改变运算顺序。</li><li>机器以运算器为中心，输入输出设备和存储器之间的数据传送通过运算器完成。</li></ol><h3 id="计算机硬件的性能指标"><a href="#计算机硬件的性能指标" class="headerlink" title="计算机硬件的性能指标"></a>计算机硬件的性能指标</h3><ol><li><strong>机器字长</strong>：<br> 是指计算机CPU一次能处理的二进制数据的位数，通常与CPU的寄存器位数有关。机器字长越长，数的表示范围越大，计算精度也越高。</li><li><strong>存储容量</strong>：<ul><li>主存容量：是指主存中存放二进制代码的总位数。<br>即：<strong>储存容量 = 储存单元个数 x 储存字长</strong><br>例：<strong>2<sup>16</sup> x 32 = 2<sup>21</sup> = 2M位</strong> （1M = 2<sup>20</sup>）</li><li>辅存容量：通常用字节数来表示。<br>例：某机辅存（如硬盘）容量为80GB<br>（1G = 1024M = 2<sup>10</sup> x 2<sup>20</sup> = 2<sup>30</sup>）</li></ul></li><li><strong>运算速度</strong><br>现代机器的运算速度采用单位时间内执行指令的平均条数来衡量。<ul><li>主频</li><li>辛普森法：综合考虑每条指令的执行时间以及他们在全部操作中的所占的百分比；</li><li>MIPS：单位时间内执行指令的平均条数</li><li>CPI：单位时间内执行指令的平均条数</li><li>FLOPS：浮点运算次数每秒。</li></ul></li></ol><hr><h3 id="【思考题与习题】"><a href="#【思考题与习题】" class="headerlink" title="【思考题与习题】"></a>【思考题与习题】</h3><ol><li><p>什么是计算机系统、计算机硬件和计算机软件？硬件和软件哪个更重要？</p><blockquote><p>解答：<br>[1]<strong>硬件系统和软件系统</strong>共同构成了一个完整的计算机系统。<br>[2]计算机<strong>硬件</strong>是指有形的物理设备，是计算机系统中实际物理装置的总称。<br>[3]<strong>软件</strong>是指在硬件上运行的程序和相关的数据及文档。<br>[4]<strong>都重要</strong>！软件和硬件相互依存，缺一不可。</p></blockquote></li><li><p>如何理解计算机系统的层次结构？</p><blockquote><p>解答：<br>抽象的来说可以分9层；但是现在我们大多数时候说的都是五层结构；即:<br>[1] <strong>虚拟机器M4</strong>（高级语言机器）<br>（用编译程序翻译成汇编语言程序），<br>[2] <strong>虚拟机器M3</strong>（汇编语言机器）<br>（用汇编语言翻译成机器语言程序），<br>[3] <strong>虚拟机器M2</strong>（操作系统机器）<br>（用机器语言解释操作系统），<br>[4] <strong>传统机器M1</strong>（机器语言机器）<br>（用微程序解释机器指令），<br>[5] <strong>微程序机器M0</strong>（微指令系统）<br>（由硬件直接执行命令）。</p></blockquote></li><li><p>说明高级语言，汇编语言和机器语言的差别及联系。</p><blockquote><p>解答：<br>[1]<strong>机器语言</strong>：即计算机唯一可以识别并直接执行的语言。由二进制的0/1代码组成。<br>[2]<strong>汇编语言</strong>：用英文单词或其他缩写代替二进制的指令代码，相比机器语言更容易记忆，使用汇编语言编写的程序必须经过汇编程序翻译，将其转化为机器语言，然后再由机器执行。<br>[3]<strong>高级语言</strong>：如C、C++、JAVA、Python，是为了方便程序设计人员而发明的，通常需要经过编译程序编译成汇编语言程序，然后在经过汇编操作转化为机器语言程序，然后再由机器执行。</p></blockquote></li><li><p>如何理解计算机组成和计算机体系结构?<br>（课本P7~8）</p><blockquote><p>解答：<br>1、<code>计算机组成</code>指的是系统结构的逻辑实现，包括机器机内的数据流和控制流的组成及逻辑设计等，主要分为五个部分；<br>2、<code>计算机体系结构</code>是程序员所看到的计算机的属性，即概念性结构与功能特性。<br><a href="https://www.php.cn/faq/454611.html">如何理解计算机组成和计算机体系结构？</a>-php中文网</p></blockquote></li><li><p>冯诺依曼计算机的特点是什么。<br>（课本P8）</p><blockquote><p>解答：<br>[1]计算机由五大部件组成：存储器，运算器，控制器，输入设备，输出设备。<br>[2]指令和数据以同等地位存于存储器，可按地址顺序访问。<br>[3]指令和数据用二进制表示。<br>[4]指令由操作码和地址码组成。<br>[5]存储程序，程序在计算机中顺序存放。<br>[6]以运算器为中心。（不合理：花大量的时间进行数据传输，降低了运算器数据运算的效率）</p></blockquote></li><li><p>画出计算机硬件组成框图，说明各部件的作用及计算机硬件的主要技术指标。</p><blockquote><p>解答：<br>现代计算机硬件组成框图:<br><img src="https://i.loli.net/2021/10/13/zE3o7a2iug4xZRU.png" alt="图1-1 现代计算机硬件组成框图.png"><br>[1]<strong>CU（控制器）</strong> 控制整个计算机系统，以及资源的分配和调度。<br>[2]<strong>ALU（运算器）</strong> 进行算数运算和逻辑运算，用来处理数据信息。<br>[3]<strong>存储器</strong> 是计算机的存储部件，用来存储程序和数据。分为主存和辅存。cpu直接访问主存。<br>[4]<strong>输入设备</strong> 将程序和数据以计算机能识别和接受的信息形式输入计算机。<br>[5]<strong>输出设备</strong> 将计算机处理得到的结果以人所能接受的形式或其他系统所要求的信息形式输出。与输入设备统称为IO，是计算机与外界的桥梁。</p><p>硬件的主要技术指标：<br>[1]<strong>机器字长</strong>：是指计算机进行一次整数运算所能处理的二进制数据的位数，通常与CPU的寄存器位数，加法器有关，机器字长越长，数的表示范围越大，计算精度越高。<br>[2]<strong>数据通路带宽</strong>：是指数据总线一次所能并行传送信息的位数。这里所说的数据通路宽度是指外部数据总线的宽度。（刚开始学习的新同学不用纠结这个问题。）<br>[3]<strong>主存容量</strong>：主存储器所能存储信息的最大容量，通常以字节来衡量，也可以用字数X字长来表示存储容量。MDR反映存储字的字长，MAR反映存储单元的个数。<br>[4]<strong>运算速度</strong>：</p><ul><li>1.吞吐量和响应时间。 前者指单位时间内处理请求的数量。后者为从用户向计算机发送一个请求，到系统对该请求做出响应并获得所需结果的等待时间。通常包括CPU时间与等待时间。</li><li>2.主频和CPU时钟周期：前者为计算机内部的注视中的频率，对于同一个型号的计算机，主频越高，运行速度越快。后者为主频的倒数，主频通常以HZ为单位。</li><li>3.CPI与MIPS：前者指执行一次所需要的时间，是一个平均值。后者为每秒执行多少百万条指令。二者的转化公式为：MIPS=指令条数/（执行时间x10^6）=主频/(执行时间x10的6次方)。</li><li>4.CPU执行时间指运行一个程序所花费的时间，CPU执行时间=CPU时钟周期/主频=（指令条数xCPI）/主频。</li><li>5.MFLOPS、GFLOPS、TFLOPS、PFLOPS、EFLOPS、ZFLOPS</li></ul><p>[5]<strong>基准程序</strong>：是专门评价性能的一组程序。</p></blockquote></li><li><p>解释概念。（手动标星号！！！）</p><blockquote><p><strong>主机</strong>：是计算机硬件的组成部分，由cpu和主存储构成。<br><strong>CPU中央处理器</strong>，是计算机硬件的核心部件，由运算器和控制器组成；（早期的运算器和控制器不在同一芯片上，现在的 CPU 内除含有运算器和控制器外还集成了 CACHE ）。<br><strong>主存</strong>：计算机中存放正在运行的程序和数据的存储器，为计算机的主要工作存储器，按地址存取；由存储体、各种逻辑部件及控制电路组成。<br><strong>存储单元</strong>：可存放一个机器字并具有特定存储地址的存储单位。<br><strong>存储元件</strong>：存储一位二进制信息的物理元件，是存储器中最小的存储单位，又叫存储基元或存储元，不能单独存取。<br><strong>存储基元</strong>：就是存储元件<br><strong>存储元</strong>：就是存储元件<br><strong>存储字长</strong>：存储字中这串二进制代码的位数<br><strong>存储容量</strong>：存储器中可存二进制代码的总量；<br><strong>机器字长</strong>：指CPU一次能处理的二进制数据的位数，通常与CPU的寄存器位数有关。<br><strong>指令字长</strong>：机器指令中二进制代码的总位数。</p></blockquote></li><li><p>解释英文代号（！同样重要）</p><blockquote><ul><li>CPU：同上一个题。</li><li>PC：程序计数器，</li><li>IR：指令寄存器，其功能是存放当前正在执行的指令。</li><li>CU：控制单元（部件），为控制器的核心部件，其功能是解释存储器中的指令，产生微操作命令序列</li><li>ALU:算术逻辑运算单元，为运算器的核心部件，其功能是进行算术、逻辑运算。</li><li>ACC:累加器，是运算器中既能存放运算前的操作数，又能存放运算结果的寄存器。</li><li>MQ:商寄存器，乘法运算时存放乘数、除法时存放商的寄存器。</li><li>X:表示操作数寄存器，即运算器中工作寄存器之一，用来存放操作数；</li><li>MAR:存储器地址寄存器，在主存中用来存放欲访问的存储单元的地址。</li><li>MDR存储器数据缓冲寄存器，在主存中用来存放从某单元读出、或要写入某存储单元的数据。</li><li>I/O输入 / 输出设备，为输入设备和输出设备的总称</li><li>MIPS每秒执行百万条指令数，</li><li>CPI指执行一次所需要的时间，是一个平均值。</li><li>FLOPS 浮点运算次数每秒</li></ul></blockquote></li><li><p>画出主机框图，分别以存数指令“STA M”和加法指令“ADD M”（M均为主存地址）为例，在图中按序完成该指令（包括取指阶段）的信息流程（如—&gt;①）。假设主存容量为265Mx32位，在指令字长、存储字长、机器字长相等的条件下，指出图中各寄存器的位数。</p><blockquote><p>图片请见第一章课件P20~27<br>(1) STA M指令：PC-&gt;MAR ;MAR-&gt;M(主存储);M-&gt;MDR;MDR-&gt;IR;OP(IR)-&gt;CU;Ad(IR)-&gt;MAR;MAR-&gt;M;ACC-&gt;MDR;MDR-&gt;M;<br>(2) ADD M指令：PC-&gt;MAR;MAR-&gt;M;M-&gt;MDR;MDR-&gt;IR;OP(IR)-&gt;CU;Ad（IR）-&gt;MAR;MAR-&gt;M;M-&gt;MDR;MDR-&gt;X;ADD;ALU-&gt;ACC;ACC-&gt;MDR;<br>(3) 寄存器的位数:题中给出主存容量，ACC、X、IR、MDR寄存器的位数等于32位，即所说的存储子长，PC、MR均为28位</p></blockquote></li><li><p>根据迭代公式 √x = 1/2（y<sub>n</sub>+x/y<sub>n</sub>），设初态y<sub>0</sub>=1，要求精度为是e，试编制求根号下x的解题程序（指令系统自定），并结合缩编程序简述计算机的解题过程。</p><blockquote><p>答案不唯一</p></blockquote></li><li><p>指令和数据都存于存储器中，计算机如何区分它们？</p><blockquote><p>解答：<br>通过地址来源区分，由 PC 提供存储单元地址的取出的是指令，由指令地址码部分提供存储单元地址的取出的是操作数。（000011 0000001010）后面的12位即为指令地址码。<br><strong>除此之外</strong>，在取指令阶段（或取指微程序）取出的为指令，在执行指令阶段（或相应微程序）取出的即为数据。</p></blockquote></li><li><p>什么是指令，什么是程序？</p><blockquote><p>解答：<br>简单的说，程序比指令更大，执行程序就是执行多个指令。<br><strong>指令</strong>是CPU操作的基本单位，指令系统决定了计算机能做什么不能做什么，<br><strong>程序</strong>是由指令构成的。</p></blockquote></li></ol><p><a href="https://blog.csdn.net/qq_43606438/article/details/117674266?utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-2.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-2.no_search_link">本章习题答案参考</a></p>]]></content>
      
      
      <categories>
          
          <category> 《计算机组成原理》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计组原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《计算机组成原理》目录汇总帖</title>
      <link href="/2021/10/12/2021-16/"/>
      <url>/2021/10/12/2021-16/</url>
      
        <content type="html"><![CDATA[<div class="note blue no-icon flat"><p><font size=2>本页作为我学习“计算机组成原理”这门课的博客笔记汇总帖，点击对应目录可跳转到我的对应博客，内容会持续完善，欢迎关注我今后的相关笔记文章。</font></p></div><blockquote><p>【声明】：相关博客仅作为学习笔记使用，如若内容构成侵权请及时联系我修改/关闭/删除相应内容。<br>转载请务必注明来自【百里飞洋】(<a href="https://barry-flynn.github.io/2021/10/12/2021-16/">https://barry-flynn.github.io/2021/10/12/2021-16/</a>) ，否则<code>侵权必究</code>！</p></blockquote><p>主要学习路线采用高等教育出版社的<kbd>《计算机组成原理 第3版》</kbd>目录，再次声明<code>相关博客仅作为学习笔记使用</code>，进行的知识点整理<code>目的是便于本人的理解与备忘</code>，分享纯属<code>为爱发电</code>，不会进行商业售卖，学习过程中也会吸收网络其他视频和博客博主的知识，并添加自己的原创理解，若对你有帮助欢迎到文章下方进行<code>打赏</code>（一分一毛一块也是爱）。</p><p>感谢所有老师、同学、前辈和引路人，在此脱帽致敬~</p><hr /><p><img src="https://i.loli.net/2021/10/13/81sNHqOJ9SKTnR3.png" alt="图0-0 本书各章节结构.png"></p><h1 id="第一篇-概论"><a href="#第一篇-概论" class="headerlink" title="第一篇 概论"></a>第一篇 概论</h1><h2 id="第1章-计算机系统概论"><a href="#第1章-计算机系统概论" class="headerlink" title="第1章 计算机系统概论"></a><a href="https://barry-flynn.github.io/2021/10/12/2021-17/">第1章 计算机系统概论</a></h2><ul><li>计算机系统简介</li><li>计算机的基本组成</li><li>计算机硬件的性能指标</li></ul><h2 id="第2章-计算机的发展及应用"><a href="#第2章-计算机的发展及应用" class="headerlink" title="第2章 计算机的发展及应用"></a>第2章 计算机的发展及应用</h2><hr><h1 id="第二篇-计算机系统的硬件结构"><a href="#第二篇-计算机系统的硬件结构" class="headerlink" title="第二篇 计算机系统的硬件结构"></a>第二篇 计算机系统的硬件结构</h1><h2 id="第3章-系统总线"><a href="#第3章-系统总线" class="headerlink" title="第3章 系统总线"></a>第3章 系统总线</h2><h2 id="第4章-存储器"><a href="#第4章-存储器" class="headerlink" title="第4章 存储器"></a>第4章 存储器</h2><h2 id="第5章-输入输出系统"><a href="#第5章-输入输出系统" class="headerlink" title="第5章 输入输出系统"></a>第5章 输入输出系统</h2><hr><h1 id="第三篇-中央处理器"><a href="#第三篇-中央处理器" class="headerlink" title="第三篇 中央处理器"></a>第三篇 中央处理器</h1><h2 id="第6章-计算机的运算方法"><a href="#第6章-计算机的运算方法" class="headerlink" title="第6章 计算机的运算方法"></a>第6章 计算机的运算方法</h2><h2 id="第7章-指令系统"><a href="#第7章-指令系统" class="headerlink" title="第7章 指令系统"></a>第7章 指令系统</h2><h2 id="第8章-CPU的结构和功能"><a href="#第8章-CPU的结构和功能" class="headerlink" title="第8章 CPU的结构和功能"></a>第8章 CPU的结构和功能</h2><hr><h1 id="第四篇-控制单元"><a href="#第四篇-控制单元" class="headerlink" title="第四篇 控制单元"></a>第四篇 控制单元</h1><h2 id="第9章-控制单元的功能"><a href="#第9章-控制单元的功能" class="headerlink" title="第9章 控制单元的功能"></a>第9章 控制单元的功能</h2><h2 id="第10章-控制单元的设计"><a href="#第10章-控制单元的设计" class="headerlink" title="第10章 控制单元的设计"></a>第10章 控制单元的设计</h2>]]></content>
      
      
      <categories>
          
          <category> 《计算机组成原理》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计组原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【思考】关于大二是否继续担任团支书</title>
      <link href="/2021/10/12/2021-15/"/>
      <url>/2021/10/12/2021-15/</url>
      
        <content type="html"><![CDATA[<blockquote><p>仅代表个人观点，内容难免有所偏颇，较为主观。人的观念也会随着时间的推移和阅历的增加而改变，此文仅代表发文当天的心境而写作。</p></blockquote><p>&emsp;&emsp;时间真的很快，记忆还停留在大一入学那天，就已经大二了。大学究竟是什么样子？前段时间我在B站发的视频中用了四个字概括：忙，爽，惆，淡。</p><hr><p><strong>【生日】上了大学就轻松了？丨大一学年总结</strong><br>点击右边<kbd><a href="https://www.bilibili.com/video/BV1Ro4y1X7r9?share_source=copy_web">跳转到B站播放</a></kbd>2021-07-16 11:30:01</p><div style="position: relative; padding: 30% 45%;"><iframe src="//player.bilibili.com/player.html?aid=376694107&bvid=BV1Ro4y1X7r9&cid=370259904&page=1&as_wide=1&high_quality=1&danmaku=" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><hr><p>&emsp;&emsp;记得高考完的那个假期，我给自己暗暗定过一个小打算，就是：在这大学的四年中，给大一半年时间让自己尽情体验一下那个我想象中的“大学丰富多彩的生活”，不至于以后后悔。于是我 直接一股脑面试了两个校级组织，竞选了从来没敢想过的班长职位，足足加入了五个社团……</p><p>&emsp;&emsp;现在回想起来，颇有些“初生牛犊不怕虎”之势。结果大一这一年，可把我忙坏了（苦笑），有时候真的恨不得分身成两个人来干活。看着别人可以在宿舍休息，在校园漫步，有时间谈恋爱，有空闲培养爱好，真的煞是羡慕。而我不是在上课的路上，就是在开会的路上。</p><p>&emsp;&emsp;后来啊，教务处助理减员，我摆脱掉了这个校级组织，只剩下另外一个校级组织：党委宣传部的新媒体协会助理职务了。当初加入新媒体的初衷，是想学习修图(PS)、剪辑(PR)、特效(AE)等，并挥洒一下自己对剪视频的热爱，还能参与运营一下学校官方的抖音、B站账号，怎么想都是一份美差。后来，竟然没想到……其实最终还是沦为了“工具人”。开例会、出策划、赶工剪视频剪到吐，是我我渐渐感受不到刚高考完那个时候的视频创作的乐趣，而是听到“剪视频”这三个字都有点呕吐感，像是患上了PDST。<del>(夸张了夸张了)</del></p><p>&emsp;&emsp;然后就是关于班长这个职位。在工作了大约一个月之后，导员就让我和团支书这个职位互换了一下，刚开始还接受不了，但慢慢也就释然了。其实现在想来，真是个很对的决定，曼曼确实比我更适合当班长，我真的不及她那么优秀。（没有妄自菲薄，而是实话实说）</p><p>&emsp;&emsp;大学一年，就这样糊里糊涂的过去了。体验到那个想象中的“美好的大学生活”了吗？我不知道。忙和抱怨充斥着我大一的一整年，成绩也并不是很有成色，最终评优评先评奖学金保研也都与我无缘……加上那可怜的班委综测分（学校其他的职务还不能累加，这个是我很气愤的一条综测条例，相当于除了班委，其他学生工作一年白干），最后我的绩点和综测也没多少，核算的那几天还盯着大家的材料累死累活的……</p><p>&emsp;&emsp;现在，导员发布了大二学年学生骨干的选举通知，我又像大一那时候一样，盯着通知文件，再次陷入了纠结之中。大二，当，还是不当？</p><p>&emsp;&emsp;我不知道……</p><hr><p>&emsp;&emsp;我来个自我评价吧：</p><ol><li>大一这一年，对于作为一名团支书来说，我，问心无愧。每一则通知，每一项任务，每一次开会，我都尽己所能地完成。</li><li>但是，对于作为一名学生而言，我，愧对所有关心我的人。为什么呢？因为我没有协调好工作、学习和娱乐时间，没有把态度放端正在学习上，而这，恰恰是作为一名学生最起码要做到的事情。</li></ol><p>&emsp;&emsp;在这一年中，我把每天大量的时间放在无意义的工作和娱乐上，课上时间也没有特别的认真听讲，但仍然沉醉于自己给自己营造的“很忙”的假氛围中自我感动。这种自我欺骗式的假学习，如果我没有记错的话（当然也不可能记错），从高中就开始了吧？不然也不会高考只考那一点儿分，来到这所双非大学读书。</p><p>&emsp;&emsp;你总是这样，分不清主次，总被一些无所谓的东西吸引着，去干一些无所谓的事情。自律和时间管理能力真的太重要了，假努力无异于自毁前程，就像B站看到的一个评论：</p><blockquote><p>我室友每天6.30的闹铃把我叫醒，然后我收拾完学习到8点他才起床。</p></blockquote><p>这种就属于典型的假自律与假努力。被窝舒服吗？舒服。是你这个年纪和处境应该享受的吗？真的不应该啊兄弟！</p><hr><p>那么现在，抛开一切的顾虑，真诚地问一下自己：<br>团支书这个职位可以给你带来什么？你又想获得什么？（也不用说什么都不图，那不现实）</p><blockquote><p>为了入党？<br>那几分综测分？<br>不晓得有没有用的人际关系？<br>还是仅仅想要这种当班干部的感觉？</p></blockquote><p>想清楚，考虑明白，做出选择，且别后悔，就够了。</p><p>大学，还有三年啊。</p><p>兄弟。</p>]]></content>
      
      
      <categories>
          
          <category> 【我的日常】 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【周报总结】大二上学期丨第5周</title>
      <link href="/2021/10/11/2021-14/"/>
      <url>/2021/10/11/2021-14/</url>
      
        <content type="html"><![CDATA[<p>【周报总结】大二上学期丨第5周<br>2021年10月04日~10月10日</p><hr><h2 id="第五周完成情况统计"><a href="#第五周完成情况统计" class="headerlink" title="第五周完成情况统计"></a>第五周完成情况统计</h2><ul><li>看了韩剧《鱿鱼游戏》《轮到你了》B站解说</li><li>韩国电影《釜山行》的两部</li><li>收拾行李（9号临走才匆忙收拾…）</li><li>核酸检测（提前没测，9号住的旅馆，耽误10号一天…）</li></ul><h2 id="经验、心得和总结"><a href="#经验、心得和总结" class="headerlink" title="经验、心得和总结"></a>经验、心得和总结</h2><ul><li>永远不要相信自己的自制力，以及每次放假前规划的“雄心壮志”！你做不到！！！</li><li>万事提前做，别拖！别拖！！别拖到最后！！！</li></ul><h2 id="制定的第六周目标"><a href="#制定的第六周目标" class="headerlink" title="制定的第六周目标"></a>制定的第六周目标</h2><p>11号开始就第一天在学校里线下授课了，课表简直满爆了！赶紧补一下假期的网课吧！要是跟不上有你哭的！</p><ul><li>尽快在淘宝/互助群买来二手课本</li><li>补习假期网课内容（尽快跟上节奏啊）</li><li>清洗水灾后发霉的枕头被子（哭死！）</li><li>洗积攒的衣服（尽量抽空吧）</li><li>高数II和电子（你只有两周时间！）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 【我的日常】 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周报总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【周报总结】大二上学期丨第4周</title>
      <link href="/2021/10/04/2021-13/"/>
      <url>/2021/10/04/2021-13/</url>
      
        <content type="html"><![CDATA[<p>【周报总结】大二上学期丨第4周<br>2021年09月27日~10月03日</p><hr><h2 id="当周计划"><a href="#当周计划" class="headerlink" title="当周计划"></a>当周计划</h2><p>这周是第一次做总结哈，没制定什么具体计划。</p><h2 id="计划完成情况"><a href="#计划完成情况" class="headerlink" title="计划完成情况"></a>计划完成情况</h2><ul><li>学了两节数据库</li><li>写了几篇Linux基础命令博文笔记</li></ul><h2 id="经验、心得和总结"><a href="#经验、心得和总结" class="headerlink" title="经验、心得和总结"></a>经验、心得和总结</h2><p>以后一定要每日有规划，每周有总结，不然总感觉啥也没干就一天天地过去了。</p><h2 id="制定下周（第五周）目标"><a href="#制定下周（第五周）目标" class="headerlink" title="制定下周（第五周）目标"></a>制定下周（第五周）目标</h2><p>终于，下周就返校了。</p><ul><li>放平心态，做好准备，调整作息。</li><li>补习一下大二这些新课，别开学之后跟不上。</li><li>赶一下之前的旧课，看看能不能…Emm…说了也白说，祝你好运。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 【我的日常】 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周报总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo博客】解决push博客源码时themes下的主题文件夹无法备份更新到GitHub分支</title>
      <link href="/2021/10/02/2021-12/"/>
      <url>/2021/10/02/2021-12/</url>
      
        <content type="html"><![CDATA[<h1 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h1><p>我平时在GitHub的hexo分支中备份博客源码，但某一天突然发现，主题文件夹只有第一次使用时备份成功了。也就是说，之后我改动过多次主题配置文件<code>_config.yml</code>并 push 到GitHub，全没有push更新成功过…</p><p>啊这…那我万一哪一天本地文件因不可抗力损毁且无法恢复，那我备份了那么多次备份个寂寞啊。</p><p>并且我发现GitHub上我备份的博客源码中，主题文件夹并不能点开，而是以图中这样的形式备份的：</p><p><img src="https://i.loli.net/2021/10/04/bRdiLYlAnqSWr81.png" alt="GitHub第一次备份的主题文件夹截图.png"></p><h1 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h1><p>经过查找其他博文与询问主题作者寻找帮助，我才了解到，无法点击GitHub的主题文件夹并且后续无法push备份修改过的文件夹的原因是：<br><strong>本地 Butterfly 主题文件夹中含有 <code>.git</code> 隐藏文件。</strong></p><p><img src="https://i.loli.net/2021/10/04/U4KHGO8jEAYJgXu.png" alt="本地butterfly主题文件夹内结构.png"></p><p>其实如果细心，你会注意到博客根目录下其实也有一个名为<code>.git</code>的灰色隐藏文件。（没看见的请将你电脑的隐藏文件设为显示）</p><ul><li><p>那么 <code>.git</code> 文件是什么呢？<br>简单地说，这个目录文件包含了几乎所有 Git 存储和操作的对象，是版本控制工具 Git 在你第一次初始化一个本地仓库时，在当前文件夹生成的一个隐藏文件，我们以后每个版本的作品都是放在了 <code>.git</code> 这个文件夹里。</p></li><li><p>所以说，这个问题其实是一个正常现象吗？<br>是的，当我第一次克隆过来 butterfly 作者的主题文件并应用到自己的 Hexo 博客时，应该已经是这样了，只不过当时没注意这个细节而已。</p></li></ul><p>Butterfly 的作者 Jerry 回答我道：<br>    “这不是很正常么，git 不允许 git 里面包含 git ”</p><p>我问道：能否将主题文件夹下的<code>.git</code>文件删除？<br>    “你想上传就删了，但是后续不能通过 <code>git pull</code> 更新”</p><p>于是我决定暂时不删除该文件，并参照网上教程成功push了主题文件。</p><h1 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h1><ul><li><p>1.剪切 <code>themes/主题名/.git</code> 文件夹到其它处，如桌面。</p></li><li><p>2.从暂存区删除该文件夹<br><code>git rm --cache themes/你的主题文件夹名</code><br>操作后github上的主题文件夹应该会被移除。</p></li><li><p>3.使用git status查看状态</p></li><li><p>4.三步走: </p></li><li><p>-&gt;<code>git add . </code> </p></li><li><p>-&gt;<code>git commit -m &quot;你的自定义信息&quot; </code></p></li><li><p>-&gt;<code>git push</code></p><blockquote><p>之前往GitHub上经常push过东西的话应该知道最后一步git push过程中的报错可尝试通过科学上网解决，国内网速太慢可能导致网络链接超时而报错</p></blockquote></li></ul><p>然后就会发现你的主题文件夹在GitHub上更新成功了<br><img src="https://i.loli.net/2021/10/04/zdTU1G6Vg2BXjLi.png" alt="GitHub成功更新的主题文件夹截图.png"></p><ul><li>5.再移回themes/next/.git文件夹<br>便于以后对主题的更新</li></ul><h1 id="复盘该问题"><a href="#复盘该问题" class="headerlink" title="复盘该问题"></a>复盘该问题</h1><p>我提出该问题的原因是我对 Git 的了解不足，今后一定要抽时间好好学一下 Git 了，感谢 Butterfly 的作者的答复以及帮助到我的所有博客博主，包括但不限于：</p><p>CSDN-<a href="https://blog.csdn.net/luoweile/article/details/89792119">rm, git rm, git rm –cached 区别与关系</a></p><p>CSDN-<a href="https://blog.csdn.net/Calvin_zhou/article/details/109019569?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-4.no_search_link&spm=1001.2101.3001.4242">Hexo博客开发之——theme主题备份上传失败</a></p><p>博客园-<a href="https://www.cnblogs.com/reboot777/p/11164193.html">Hexo + Github page博客 themes/next 文件夹因存在.git而无法提交到git的解决办法</a></p><p>另外附上<br>Git官方文档：<br><a href="https://git-scm.com/book/zh/v2">https://git-scm.com/book/zh/v2</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客折腾记 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux操作系统使用基础丨（3）文件和目录</title>
      <link href="/2021/10/01/2021-11/"/>
      <url>/2021/10/01/2021-11/</url>
      
        <content type="html"><![CDATA[<div class="note red no-icon flat"><p>本篇为校内选修课教授内容的私人学习笔记，仅供在此博客网站观看，可分享此文链接给你需要分享的人，但暂时不开放转载权限，侵权必究，敬请理解。</p></div><h1 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h1><h2 id="文件系统的层次结构"><a href="#文件系统的层次结构" class="headerlink" title="文件系统的层次结构"></a>文件系统的层次结构</h2><blockquote><p><img src="https://i.loli.net/2021/10/01/A2pqtsvGzhINZPL.png" alt="Linux文件系统的结构层次.png"></p></blockquote><h2 id="Linux中的标准系统目录"><a href="#Linux中的标准系统目录" class="headerlink" title="Linux中的标准系统目录"></a>Linux中的标准系统目录</h2><blockquote><p><img src="https://i.loli.net/2021/10/01/wenkm3QWo27aIMJ.png" alt="Linux中的标准系统目录.png"></p></blockquote><p>默认登录后一开始都在<code>~$</code>，即<code>/home/你的用户名</code>目录下，也叫“家目录”或“用户的主目录”<br>cd命令全称change directory，用于更改当前目录，进入想进的目录，如：<br><code>cd /</code>指改变目录到/去，所有文件都是从根目录开始的<br><code>ls</code>命令指查看当前目录<br><code>ls /l</code>指查看属性：权限、创建时间、大小等<br><code>cd -</code>指返回原文件（Linux中没有盘符，所有目录全都看成文件）<br><code>pwd</code>指显示当前路径</p><h2 id="文件系统的概念"><a href="#文件系统的概念" class="headerlink" title="文件系统的概念"></a>文件系统的概念</h2><ul><li>文件系统：磁盘上有特定格式的一片区域</li><li>文件：存储数据的一个有名字的对象</li><li>目录：包含许多文件项目的一类特殊文件</li><li>子目录：被包含在另一个目录中的目录</li><li>父目录：包含子目录的目录称为父目录</li><li>文件名：用来标识文件的字符串，保存在一个目录文件项中</li><li>路径名：由<code>/</code>字符结合在一起的一个或多个文件名的集合，它指定一个文件在文件系统中的位置，如<code>/home/nic/hmli/.bashrc</code>（第一个<code>/</code>指根目录，后面的作为分隔符）</li></ul><h2 id="文件名称"><a href="#文件名称" class="headerlink" title="文件名称"></a>文件名称</h2><ul><li>包含大写字母、小写字母、数字、<code>$</code>、<code>@</code>、<code>_</code>、<code>−</code></li><li>一般不包含以下字符：<code>*</code>、<code>?</code>、<code>&gt;</code>、<code>&lt;</code>、<code>/</code>、<code>;</code>、<code>$</code>、<code>@</code>、<code>~</code>、<code>’</code>、<code>”</code>（特殊字符导致难于访问这些文件）</li><li>最好不以<code>+</code>或<code>−</code>开头</li><li>最长文件名255字符</li><li>可以有扩展名以便于识别和管理，扩展名与实际类型无关，用扩展名作为文件名的一部分，中间用<code>.</code>隔开</li><li><code>区分大小写</code></li></ul><p>平时自己命名文件不要以<code>-</code>开头，如果遇到想要删除这种文件，要特殊处理<br>访问以<code>−</code>开头的文件，比如删除‘-foo’可以使用以下方法之一：</p><ol><li><code>rm␣−−␣−foo</code>（加两个横杠）</li><li><code>rm␣ ./−foo</code>（加点和斜杠）</li></ol><blockquote><p><code>rm</code>是删除命令，<br>在使用<code>cp</code>、<code>mv</code>等许多命令时遇到此类文件名可类似处理</p></blockquote><h2 id="文件的主要类型"><a href="#文件的主要类型" class="headerlink" title="文件的主要类型"></a>文件的主要类型</h2><p>主要有以下文件类型，利用<code>ls ␣−l</code>输出对应文件名的行第一个字符可判断<br><code>-l</code>相当于<code>ls</code>的参数，所以中间要加个空格</p><pre><code>1） 普通文件：</code></pre><ul><li>文本文件：ASCII码形式存储，以-开头，如：<br>−rw−r−−r−− 1 root root 39599 Mar 8 12:15 x.sh<br>最后的<code>x.sh</code>是它的名称，前面那一堆是它的属性：权限、大小、创建时间等</li><li>二进制文件：以二进制形式存储在计算机中，不可直接读，要通过相应的软件读取，以-开头，如：<br>−rw−r−−r−− 1 root root 69599 Mar 8 12:25 x</li></ul><pre><code>2） 目录文件：</code></pre><p>以d开头，如：<br>drwxr−xr−x 2 root root 4096 Aug 2 2006 bin<br>最前面加个<code>d</code>代表它不是个文件，而是个目录，下面还有其他东西，相当于是个文件夹</p><pre><code>3） 设备文件：</code></pre><ul><li>块设备文件：以b开头，如：<br>brw−rw−−−− 1 root disk 3, 1 Jan 30 2003 /dev/hda1<br>前面的<code>b</code>就指的是设备，比如硬盘、U盘、光驱等</li><li>字符设备文件：以c开头，如：<br>crw−−−−−−− 1 root root 4, 1 Jul 31 13:49 /dev/ tty1<br>前面的<code>c</code>指外加的一些设备</li></ul><pre><code>4） 链接文件：</code></pre><p>存放文件系统中通向文件的路径，以l开头，如：<br>lrwxrwxrwx 1 root root 11 Sep 30 2008 c −&gt; /mnt/c<br>前面<code>l</code>开头的指超链接文件，不是真正的文件，点击会跳转到其他地方，类似于Windows上的快捷方式</p><h2 id="路径的名称"><a href="#路径的名称" class="headerlink" title="路径的名称"></a>路径的名称</h2><p>主要分为两种类型：</p><ul><li>绝对路径，如<code>/home/hmli/linux</code>，以<code>/</code>或<code>~</code>开头</li><li>相对路径，如当前目录为<code>./home/hmli</code>，那么linux即是相对路径，不以<code>/</code>或<code>~</code>开头</li></ul><blockquote><p><code>/</code>是根目录，<code>~</code>是家目录<br>绝对路径相对于根<br>相对路径相对于当前目录的父目录<br>这和HTML中是一样的概念</p></blockquote><hr><h2 id="目录操作命令"><a href="#目录操作命令" class="headerlink" title="目录操作命令"></a>目录操作命令</h2><ul><li><code>ls</code>：显示目录中的内容</li><li><code>pwd</code>：显示当前工作目录</li><li><code>cd</code>：改变用户工作目录</li><li><code>mkdir</code>：建立用户目录</li><li><code>rmdir</code>：删除目录</li></ul><h3 id="列出目录内容：ls"><a href="#列出目录内容：ls" class="headerlink" title="列出目录内容：ls"></a>列出目录内容：ls</h3><p><code>ls</code>命令列出一个子目录中的全部文件和目录名，一般格式为：<br><code>ls ␣ [OPTION]...␣[FILE ]...</code><br><code>ls</code>有很多参数，在Linux系统中只要有不会的，可以输入<code>-help</code>，所有的就出来了<br>它有多个命令行参数，参数可组合使用，下面列出它最常用的几个</p><ul><li><code>-a</code>：显示所有文件或目录（all的缩写），包括以“.”为名称开头字符的隐藏文件、现行目录“.”与上层目录“..”</li><li><code>-l</code>：使用详细格式列表。将权限标示、硬件接数目、拥有者与群组名称、文件或目录大小及更改时间一并列出</li><li><code>-R</code>：递归处理，将指定目录下的所有文件及子目录一并处理</li><li><code>-t</code>：按照时间排序</li><li><code>-S</code>：按照大小排序</li><li><code>-r</code>：逆向排序</li><li><code>–color[=WHEN]</code>：对不同类型的文件显示不同的颜色，WHEN默认为always，可为never和auto</li></ul><p>ls举例：<br>使用长列表方式列出某个子目录中的全部文件：<br><code>ls ␣−la</code>（参数l和a可以一起组合用，这也是Linux系统的方便之处）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">total 16</span><br><span class="line">drwxr−xr−x    4 root    root    4096 Jan   1  11:28 .</span><br><span class="line">drwxr−x−−−   11 root    root    4096 Jan   1  11:27 ..</span><br><span class="line">drwxr−xr−x    2 root    root    4096 Jan   1  11:27 dir1</span><br><span class="line">drwxr−xr−x    2 root    root    4096 Jan   1  11:28 dir2</span><br></pre></td></tr></table></figure><p>列出子目录中以字母v打头的全部非隐藏文件：<br><code>ls ␣ /boot/v*</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">−rw−r−−r−−  1  root  root  2706672  Oct  8  05:42  /boot/vmlinuz−3.0.0−2−amd64</span><br><span class="line">−rw−r−−r−−  1  root  root  2496704  Oct  9  07:55  /boot/vmlinuz−3.0.0−5−hmli−amd64</span><br></pre></td></tr></table></figure><h3 id="显示当前工作目录：pwd"><a href="#显示当前工作目录：pwd" class="headerlink" title="显示当前工作目录：pwd"></a>显示当前工作目录：pwd</h3><p><code>pwd</code>没有参数，唯一的作用就是显示当前工作目录的绝对路径的名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/ home / hmli</span><br></pre></td></tr></table></figure><p>环境变量PWD存储当前目录名，OLDPWD存储执行<code>cd</code>命令切换到当前目录之前的目录名，利用<code>echo</code>可以查看，如：<br><code>echo␣$PWD</code><br><code>echo␣$OLDPWD</code></p><blockquote><p><code>echo</code>是一个很常用的命令，是查看、屏幕输出。<br>这里的<code>$</code>指的是一个变量符号，和用户名后的不一样。<br>用户名后的那里的$指普通用户，不是root用户。</p></blockquote><h3 id="改变用户工作目录：cd"><a href="#改变用户工作目录：cd" class="headerlink" title="改变用户工作目录：cd"></a>改变用户工作目录：cd</h3><p><code>cd</code>命令可让用户在不同目录间切换，一般格式为<code>cd ␣ [−L|[−P]␣[dir ]</code>，<br>几个常用方式：</p><ul><li><code>cd ␣ dirname</code>：进入名字为dirname的目录</li><li><code>cd ␣~username</code>：进入用户username的主目录</li><li><code>cd ␣~/dirname</code>：进入当前用户的主目录下的dirname子目录</li><li><code>cd ␣−</code>：返回进入这个目录之前所在的目录</li><li><code>cd ␣ .. </code>：进入上一级目录</li><li><code>cd ␣ ../.. </code>：进入上两级目录</li><li><code>cd ␣ ../ subdir / subsubdir</code>：进入上级目录下的subdir下的subsubdir目录</li><li><code>cd</code>：不跟任何参数时返回用户根目录</li></ul><h3 id="建立用户目录：mkdir"><a href="#建立用户目录：mkdir" class="headerlink" title="建立用户目录：mkdir"></a>建立用户目录：mkdir</h3><p><code>mkdir</code>可建立目录，一般格式为：<br><code>mkdir␣ [OPTION]...␣DIRECTORY...</code><br>主要选项为：</p><ul><li>-p：若所要建立目录的上层目录目前尚未建立，则会一并建立上层目录，如<code>mkdir␣−p␣1/2</code>将建立目录1/2，如果目录1不存在，那么也会一起建立</li><li>-m：建立目录时，同时设置目录的权限。权限的设置法与chmod命令相同，如<code>mkdir␣−m␣700␣3</code></li></ul><h3 id="删除目录：rmdir"><a href="#删除目录：rmdir" class="headerlink" title="删除目录：rmdir"></a>删除目录：rmdir</h3><p><code>rmdir</code>命令可删除空目录，若所要删除目录非空，则出错</p><ul><li><code>rmdir ␣ dirname</code>：删除dirname目录</li><li>-p：删除指定目录之后，若该目录的上层目录已变成空目录，则将<br>其一并删除，如<code>rmdir ␣−p␣1/2</code></li><li><code>rmdir</code>更常用的替代命令为后面所说的<code>rm</code>命令</li></ul><hr><h2 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a>文件操作命令</h2><p>这里不仅仅指的是普通文件，也包括目录等文件</p><ul><li><code>cp</code>：复制文件或目录</li><li><code>mv</code>：移动文件和文件换名</li><li><code>rm</code>：删除文件或目录</li><li><code>ln</code>：在文件间建立连接（类似Windows的快捷方式）</li><li><code>find</code>：查找特定的文件</li><li><code>locate</code>：定位查找特定的文件</li><li><code>where</code>：查找文件</li><li><code>which</code>：查看命令的路径</li><li><code>touch</code>：改变文件的时间参数</li></ul><h3 id="复制文件或目录：cp"><a href="#复制文件或目录：cp" class="headerlink" title="复制文件或目录：cp"></a>复制文件或目录：cp</h3><p><code>cp</code>命令用来复制文件，在缺省的情况下，工作时不做任何显示，只有在<br>出现错误情况的时候才显示状态信息，一般格式为：<br><code>cp ␣ [OPTION]...␣SOURCE␣DEST</code></p><blockquote><p>用<code>cp-help</code>可列出它的选项</p></blockquote><p>主要选项：</p><ul><li><code>-a</code>：复制时尽可能保持文件的结构和属性</li><li><code>-f</code>：不提示直接覆盖存在的目标文件</li><li><code>-i</code>：覆盖现存文件时提示，建议打开此选项，避免误操作覆盖掉原目标文件</li><li><code>-p</code>：保持原始文件的所有者、组、许可和时间表属性</li><li><code>-r</code>：递归地复制目录</li></ul><p>举例：</p><ul><li>复制源文件<code>srcfile</code>为<code>destfile</code>：<br><code>cp ␣ srcfile ␣ destfile</code></li><li>保留文件的结构和属性复制源目录<code>/home/hmli/srcdir</code>到当前目录下的<code>destdir</code>目录：<br><code>cp ␣−a␣ /home/hmli/ srcdir ␣ destdir</code></li></ul><h3 id="移动-重命名文件：mv"><a href="#移动-重命名文件：mv" class="headerlink" title="移动/重命名文件：mv"></a>移动/重命名文件：mv</h3><p><code>mv</code>命令用来把文件从一个位置移动到另外一个位置，一般格式为：<br><code>mv␣[OPTION]...␣SOURCE␣DEST</code><br>主要选项：</p><ul><li><code>-i</code>：覆盖现存文件时提示，建议打开此选项，避免误操作覆盖掉目标<br>文件</li><li><code>-f</code>：不提示直接覆盖存在的目标文件</li></ul><h3 id="删除文件或目录：rm"><a href="#删除文件或目录：rm" class="headerlink" title="删除文件或目录：rm"></a>删除文件或目录：rm</h3><blockquote><p>删除了后基本不存在恢复的可能，小心</p></blockquote><p>rm命令用来删除文件，一般格式为：<br><code>rm␣[OPTION]...␣FILE... </code></p><p>主要选项：</p><ul><li><code>-f</code>：不提示直接删除指定的目标文件</li><li><code>-i</code>：指定交互模式，在执行删除前提示确认</li><li><code>-r</code>：删除文件列表中的目录</li></ul><p>删除文件名以-开头文件，比如‘-foo’可以使用以下方法之一：</p><ul><li><code>rm␣−−␣−foo</code></li><li><code>rm␣ ./−foo</code></li></ul><p>注：在使用<code>cp</code>、<code>mv</code>等许多命令时遇到此类文件名可类似处理</p><h3 id="在文件间建立连接：ln"><a href="#在文件间建立连接：ln" class="headerlink" title="在文件间建立连接：ln"></a>在文件间建立连接：ln</h3><blockquote><p>软连接，可以理解成指针，更形象点可以理解成快捷方式。</p></blockquote><p><code>ln</code>命令用来建立硬连接和符号连接</p><ul><li>硬连接是一个文件的额外的名字，相当于一个同步更新的副本，删除源文件，硬连接的内容还存在</li><li>符号连接相当于快捷方式，当源文件被删除后，符号连接仍然存在，<br>但链接的内容已经不存在</li></ul><p>一般格式为：<br><code>ln ␣ [ options ] ␣ source ␣ [ dest ]</code><br>主要选项：</p><ul><li><code>-d</code>：用于建立目录的硬连接，默认选项</li><li><code>-f</code>：覆盖已存在的目的文件</li><li><code>-i</code>：提示是否覆盖已存在的目的文件。</li><li><code>-s</code>：建立符号连接而不是硬连接</li></ul><h3 id="查找文件：find"><a href="#查找文件：find" class="headerlink" title="查找文件：find"></a>查找文件：find</h3><p><code>find</code>命令可以根据各种检索条件查找文件，一般格式为：<br><code>find ␣ [−H]␣[−L]␣[−P]␣[−D␣debugopts]␣[−Olevel]␣ [path ...] ␣ [ expression ]</code></p><ul><li><code>path…</code>：准备寻找文件所在的路径及它的子路径，也可是多个路径</li><li><code>expression</code>：包含要搜索文件的条件，可以包含文件名、拥有者、修改时间、权限等</li></ul><p>find主要选项:</p><ul><li><code>-atime n</code>：至少n*24小时内没有访问过的文件</li><li><code>-ctime n</code>：至少n*24小时内没有修改过的文件</li><li><code>-amin n</code>：n分钟之内没访问过的文件</li><li><code>-cmin n</code>：n分钟之内没修改过的文件</li><li><code>-empty</code>：文件为空</li><li><code>-name name</code>：指定要寻找的文件或目录的名称，区分大小写</li><li><code>-iname name</code>：指定要寻找的文件或目录的名称，不区分大小写</li><li><code>-type c</code>：以文件的类型作为寻找的条件，若c为：<ul><li><code>d</code>：表示寻找目录</li><li><code>f</code>：表示寻找普通文件</li><li><code>c</code>：表示寻找字符特殊设备</li><li><code>b</code>：表示寻找特殊块设备</li><li><code>p</code>：表示寻找命名管道</li><li><code>l</code>：表示寻找符号连接</li><li><code>s</code>：表示寻找套接字（socket）</li></ul></li></ul><p>find举例:</p><ul><li>查找/home子目录中至少7天没有被访问过的文件：<br><code>find ␣ /home␣−atime␣+7␣−print</code></li><li>找出/usr/src子目录中名字为core.*的文件并删除它们：<br><code>find ␣ / usr/ src ␣−name␣core.*␣−exec␣rm␣&#123;&#125; ␣ \;</code></li><li>找出/home中以.jpg结尾并且长度超过100KB的文件：<br><code>find ␣ /home␣−name␣&quot;*.jpg&quot;␣−size␣+100k</code></li><li>找出当前目录下权限不是755的目录并将其权限设置为755：<br><code>find ␣ . ␣−type ␣ d ␣ ! ␣−perm␣755␣−exec␣chmod␣755␣&#123;&#125;␣ \;</code></li></ul><p>注意：结合-exec选项时一定要小心，特别是后面跟<code>rm</code>等命令时</p><h3 id="查找文件所在目录：locate"><a href="#查找文件所在目录：locate" class="headerlink" title="查找文件所在目录：locate"></a>查找文件所在目录：locate</h3><p>从系统保存文件位置信息的数据库中搜索文件：<code>locate</code><br>如查看名字中含有libmkl_intel的库文件：<code>locate ␣ libmkl_intel</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">w a r ni n g : l o c a t e : w a r ni n g : d a t a b a s e / v a r / l i b / s l o c a t e / s</span><br><span class="line">l o c a t e . db ’ i s more t h a n 8 d a y s ol d</span><br><span class="line">/ o pt / i n t e l / C om pil e r / 1 1 . 0 / 0 8 3 / mkl / l i b / 3 2 / l i b m k l _ i n t e l . a</span><br><span class="line">/ o pt / i n t e l / C om pil e r / 1 1 . 0 / 0 8 3 / mkl / l i b / 3 2 / l i b m k l _ i n t e l . s o</span><br><span class="line">/ o pt / i n t e l / C om pil e r / 1 1 . 1 / 0 5 9 / mkl / l i b / 3 2 / l i b m k l _ i n t e l . a</span><br><span class="line">/ o pt / i n t e l / C om pil e r / 1 1 . 1 / 0 5 9 / mkl / l i b / 3 2 / l i b m k l _ i n t e l . s o</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>如果系统的数据库不够新，那么查找的结果将未必正确，比如上面提示数据库的信息至少已经8天没更新</li><li>root可以运行<code>updatedb</code>更新数据库，普通用户无权更新</li></ul><h3 id="显示命令的路径：which"><a href="#显示命令的路径：which" class="headerlink" title="显示命令的路径：which"></a>显示命令的路径：which</h3><p><code>which</code>查看命令的所在路径，如查看使用的是哪个mpif90：<br><code>which␣mpif90</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/ o pt / openmpi − 1 . 4 . 3 / bi n / m pi f 9 </span><br></pre></td></tr></table></figure><p><code>which</code>实际上是在环境变量PATH中指定的路径中显示第一个搜索到的命<br>令的路径，利用<code>echo␣$PATH</code>可以看到以:分隔的命令路径，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/ u s r / l o c a l / bi n : / u s r / bi n : / bi n : / o pt / openmpi − 1 . 4 . 3 / bi </span><br></pre></td></tr></table></figure><h3 id="改变文件的时间参数touch"><a href="#改变文件的时间参数touch" class="headerlink" title="改变文件的时间参数touch"></a>改变文件的时间参数touch</h3><p><code>touch</code>改变文件访问和修改时间或用指定时间建立新文件，一般格式为：<br><code>touch ␣ [OPTION]...␣FILE...</code><br>主要选项：</p><ul><li>不带参数：将文件的时间改为当前时间</li><li><code>-a</code>：只更改访问时间</li><li><code>-c</code>：若目标文件不存在，不建立空的目标文件</li><li><code>-t</code> [[CC]YY]MMDDhhmm[.ss]：以指定时间修改文件的时间，如下述<br>命令将文件<code>file1</code>的时间修改为1月20日15点30分：<br><code>touch ␣−t ␣ 01201530␣ file1</code></li></ul><hr><h2 id="显示文件内容的命令"><a href="#显示文件内容的命令" class="headerlink" title="显示文件内容的命令"></a>显示文件内容的命令</h2><ul><li><code>cat</code>：显示和合并文件</li><li><code>paste</code>：横向合并文件，将多个文件对应行合并</li><li><code>more</code>：分屏显示文件</li><li><code>less</code>：分屏显示文件</li><li><code>head</code>：显示文件的前几行</li><li><code>tail</code>：显示文件的最后几行</li></ul><h3 id="显示和合并文件：cat"><a href="#显示和合并文件：cat" class="headerlink" title="显示和合并文件：cat"></a>显示和合并文件：cat</h3><p><code>cat</code>可以结合多个文件，并将它们的内容输出到标准输出设备或者定向到<br>某个文件，一般格式为：<br><code>cat ␣ [OPTION]...␣[FILE ]...</code><br>主要选项：</p><ul><li><code>-b</code>：列出文件内容时，在所有非空白列开头标上编号，从1开始累加</li><li><code>-E</code>：在每一行的最后标上“$”符号</li><li><code>-n</code>：列出文件内容时，在每一行开头标上编号，从1开始累加</li></ul><p>cat举例:</p><ul><li>让<code>cat</code>命令从标准输入设备（如键盘）读取数据，转而输出至标准输出设备（如显示器）：<br><code>cat</code>不加任何参数之后回车，键入文字，按下回车键，系统将回应一模一样的文字</li><li>将屏幕输入定向到file2中：<br><code>cat ␣&gt;␣ file2</code><br>输完后按<code>&lt;ctrl−d&gt;</code>终止输入，就将屏幕输入的存到文件file2中</li><li>利用重定向符<code>&gt;</code>将名称为file1与file2的文件合并成一个文件file3：<br><code>cat ␣ file1 ␣ file2 ␣&gt;␣ file3</code><ul><li><code>&gt;</code>表示覆盖，若文件file3已经存在，则其内容会被覆盖</li><li><code>&gt;&gt;</code>表示追加，若用<code>&gt;&gt;</code>代替<code>&gt;</code>，新的内容就会追加在原有内容之后，<br>而不会覆盖它</li></ul></li></ul><h3 id="横向合并文件：paste"><a href="#横向合并文件：paste" class="headerlink" title="横向合并文件：paste"></a>横向合并文件：paste</h3><p><code>paste</code>横向合并文件，将多个文件对应行合并，一般格式为：<br><code>paste ␣ [OPTION]...␣[FILE ]...</code><br>一般选项：</p><ul><li><code>-d</code>, –delimiters=LIST：用LIST代替TABs</li><li><code>-s</code>, –serial：串行而非并行合并文件</li></ul><p>例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file1的内容如下： file2的内容如下：</span><br><span class="line">        1               a</span><br><span class="line">        2               b</span><br><span class="line">        3               c</span><br></pre></td></tr></table></figure><p>执行<code>paste ␣ file1 ␣ file2 </code>将显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 a</span><br><span class="line">2 b</span><br><span class="line">3 c</span><br></pre></td></tr></table></figure><h3 id="分屏显示文件：more"><a href="#分屏显示文件：more" class="headerlink" title="分屏显示文件：more"></a>分屏显示文件：more</h3><p><code>more</code>可将文件内容显示于屏幕上，每次只显示一页。可以往下翻页，但<br>无法回退翻页，一般格式为：<br><code>more␣[−dlfpcsu] ␣ [−num]␣[+/pattern] ␣ [+linenum]␣[ file ␣ ...]</code><br>主要选项：</p><ul><li><code>+/&lt;字符串&gt;</code>：在文件中查找选项中指定的字符串，然后显示字符串所在该页的内容</li><li><code>+&lt;行数&gt;</code>：从指定的行数开始显示</li><li><code>-n</code>：每次只显示n行</li><li><code>-c</code>：不滚屏，在显示下一屏之前先清屏</li></ul><p>more启动后的主要操作：</p><ul><li><code>空格</code>：翻页</li><li><code>/pattern</code>：查找匹配pattern的字符</li><li><code>v</code>：调用编辑器进行编辑</li><li><code>&lt;ctrl-L&gt;</code>；刷新屏幕</li><li><code>q</code>：退出</li></ul><p>more举例:</p><ul><li>在文件file1中查找“123”字符串，然后从该页开始显示内容：<br><code>more␣+/123␣ file1</code></li><li>显示文件file1的内容，每10行显示一次，且在显示之前先清屏：<br><code>more␣−c␣−10␣ file1</code></li></ul><h3 id="分屏显示文件：less"><a href="#分屏显示文件：less" class="headerlink" title="分屏显示文件：less"></a>分屏显示文件：less</h3><ul><li><code>less</code>类似<code>more</code>，也可以用来浏览超过一页的文件</li><li><code>less</code>命令除了可按空格键向下显示文件外，还可利用上下键来卷动文件</li><li>当要结束浏览时，只要下按q键即可</li><li>显示中按v，也可调用编辑器直接进行编辑</li></ul><p>建议使用功能更强大方便的<code>less</code>，<code>man</code>␣ <code>less</code>仔细看看用法以及功能</p><p>显示文件的前几行：head<br><code>head</code>显示指定文件的开头若干行，默认值是10行，一般格式为：<br><code>head␣[OPTION]...␣[FILE ]...</code></p><ul><li><code>-c N</code>：显示前N个字节</li><li><code>-n N</code>：显示前N行</li><li><code>-N</code>：显示前N行，如：<br><code>head␣−20␣ file</code></li></ul><p>显示文件的最后几行：tail<br><code>tail</code> 显示指定文件的末尾若干行，默认值是10行，一般格式为：<br><code>tail ␣ [OPTION]...␣[FILE ]...</code><br>主要选项：</p><ul><li><code>-c N</code>：显示后N个字节</li><li><code>-n N</code>：显示后N行</li><li><code>-N</code>：显示后N行</li><li><code>-f</code>：连续监测需要显示文件的最后几行，如果文件更新，将自动显示出更新，常用于监测输出日志，比如：<br><code>tail ␣−f ␣myjob.log</code></li></ul><h3 id="比较文件内容命令：comm与diff"><a href="#比较文件内容命令：comm与diff" class="headerlink" title="比较文件内容命令：comm与diff"></a>比较文件内容命令：comm与diff</h3><ul><li><code>comm</code>：比较两个已排过序的文件</li><li><code>diff</code> ：比较文件的差异</li></ul><h3 id="显示两个文件共同部分：comm"><a href="#显示两个文件共同部分：comm" class="headerlink" title="显示两个文件共同部分：comm"></a>显示两个文件共同部分：comm</h3><p><code>comm</code>用来对两个已排过序的文件进行逐行比较显示其共同部分，一般格式为：<br><code>comm␣[OPTION]...␣FILE1␣FILE2</code><br>OPTION可以为：</p><ul><li>-1：不显示只在第一个文件里出现的行</li><li>-2：不显示只在第二个文件里出现的行</li><li>-3：不显示在第一、二个文件里都出现的行</li></ul><p>comm举例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ile1的内容如下：                file2的内容如下：</span><br><span class="line">    main (                          main (</span><br><span class="line">    &#123;                               &#123;</span><br><span class="line">    printf(&quot;Hello!\n&quot;);             printf(&quot;Good!\n&quot;);</span><br><span class="line">    &#125;                               &#125;</span><br></pre></td></tr></table></figure><p>用comm命令对这两个文件进行比较只显示它们共有的行：<br><code>comm␣−12␣file1 ␣ file2</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main (</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="显示多个文件不同部分：diff"><a href="#显示多个文件不同部分：diff" class="headerlink" title="显示多个文件不同部分：diff"></a>显示多个文件不同部分：diff</h3><p><code>diff </code>可以比较多个文本文件，并显示它们的不同，一般格式为：<br><code>diff ␣ [OPTION]...␣FILES</code><br>主要选项：</p><ul><li><code>-c</code>：输出格式是带上下文的三行格式</li><li><code>-C n</code>：输出格式是带上下文的n行格式</li><li><code>-r</code>：两个文件都是目录时，递归比较找到的各子目录</li><li>输出的一般形式如下：<ul><li>n1 a n3,n4</li><li>n1,n2 d n3</li><li>n1,n2 c n3,n4</li></ul></li><li>a-附加，d-删除，c-修改</li><li>a、d、c前面的n1等表示第一个文件的行号，后面的n3等表示第二个文件的行号</li></ul><p>上面的n1 a n3,n4表示两个文件若要变成相同，那么第一个文件的n1行将附加第二个文件的行号为n3到n4行之间的内容</p><p>diff举例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">file1的内容如下：           file2的内容如下：</span><br><span class="line">main()                     main()</span><br><span class="line">&#123;                          &#123;</span><br><span class="line">printf(&quot;Hello!\n&quot;);        int n,m;</span><br><span class="line">&#125;                          n=10;</span><br><span class="line">                           printf(”%d\n”,m=n*10);</span><br><span class="line">                           &#125;</span><br></pre></td></tr></table></figure><p>输入命令：<br><code>diff ␣ file1 ␣ file2</code><br>将显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">3 , 5 c 3 , 6</span><br><span class="line">&lt;3 p r i n t f ( ” H ell o ! \ n ” ) ;</span><br><span class="line">&lt;4 &#125;</span><br><span class="line">&lt;5</span><br><span class="line">−−−</span><br><span class="line">&gt;3 i n t n ,m;</span><br><span class="line">&gt;4 n = 1 0;</span><br><span class="line">&gt;5 p r i n t f (”%d \ n ” ,m=n * 1 0 ) ;</span><br><span class="line">&gt;6&#125;</span><br></pre></td></tr></table></figure><h2 id="文件权限操作"><a href="#文件权限操作" class="headerlink" title="文件权限操作"></a>文件权限操作</h2><ul><li><code>chmod</code>：改变文件或目录的许可权限</li><li><code>chown</code>：改变文件的所有权</li><li><code>chgrp</code>：改变用户分组</li></ul><h2 id="文件的保护和权限"><a href="#文件的保护和权限" class="headerlink" title="文件的保护和权限"></a>文件的保护和权限</h2><p><code>ls ␣−l</code>显示的文件权限格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d rwx r−x r −x 2 hmli hmli 4096 10月 19 2 3: 2 5 e xam ple</span><br><span class="line">−rw−r −−r −− 1 hmli hmli 441611 10月 20 0 9: 0 1 f i l e . e p s</span><br></pre></td></tr></table></figure><p>drwxr-xr-x和-rw-r–r–的组成：第一列为文件类型标记，接着的三列为用户权限<br>位，之后的三列为组权限位，最后三列为组外用户权限位<br>文件权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rwx     rwx     rwx</span><br><span class="line">user    group   other </span><br></pre></td></tr></table></figure><ul><li>普通文件：<ul><li>r：可以查看文件内容</li><li>w：可以修改文件内容</li><li>x：可以执行文件</li></ul></li><li>目录：<ul><li>r：可以查看目录下的文件</li><li>w：可以在目录下创建和删除文件</li><li>x：可以进入目录或访问目录下的文件</li></ul></li></ul><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p>权限格式，可以为二进制、八进制或字符形式，如</p><table><thead><tr><th align="center"></th><th align="center">user</th><th align="center">group</th><th align="center">others</th></tr></thead><tbody><tr><td align="center">字符</td><td align="center">rwx</td><td align="center">rw-</td><td align="center">r–</td></tr><tr><td align="center">二进制</td><td align="center">111</td><td align="center">110</td><td align="center">100</td></tr><tr><td align="center">八进制</td><td align="center">7(4+2+1)</td><td align="center">7(4+2+1)</td><td align="center">4(4+0+0)</td></tr></tbody></table><p>多数文件的权限为：</p><ul><li>文件：−rw−r −−r −− 644</li><li>目录：d rwx r−x r −x 755</li></ul><h3 id="改变文件权限：chmod"><a href="#改变文件权限：chmod" class="headerlink" title="改变文件权限：chmod"></a>改变文件权限：chmod</h3><p><code>chmod</code>用于改变文件或目录的权限，一般格式为：<br><code>chmod␣[OPTION]...␣MODE[,MODE]...␣FILE...</code><br>MODE模式：</p><ul><li><code>u</code>：文件所属帐户</li><li><code>g</code>：文件所属组</li><li><code>o</code>：不同组的帐户</li><li><code>a</code>：所有帐户</li><li><code>+</code>：添加权限</li><li><code>-</code>：去除权限</li><li><code>=</code>：使得指定文件只具有这些权限</li></ul><p>主要选项：</p><ul><li><code>-v</code>：详细显示权限改变的信息</li><li><code>-c</code>：类似-v，仅权限改变时显示</li><li><code>-R</code>：对所有某目录下的文件进行递归处理</li></ul><p>chmod举例:</p><ul><li>使文件file各用户都拥有完全权限：<br><code>chmod␣777␣ file</code></li><li>允许所有人读file，但只有拥有者能改变它：<br><code>chmod␣644␣ file</code></li><li>给所有人增加写权：<br><code>chmod␣a+w␣file</code></li><li>对组级和其他用户除去写权和读权：<br><code>chmod␣o−wr,g−wr␣file</code></li><li>建立其他用户的只读权：<br><code>chmod␣o=r␣ file</code></li></ul><p>注意控制权限，尽量不要给其他用户修改删除文件等权限</p><h3 id="设置缺省权限：umask"><a href="#设置缺省权限：umask" class="headerlink" title="设置缺省权限：umask"></a>设置缺省权限：umask</h3><p>利用<code>umask</code>可以设置新生成的文件和目录的缺省权限，但不影响已经存在的文件或目录权限，一般格式为：<br><code>umask␣[−p]␣[−S]␣ [mode]</code><br>mode与<code>chmod</code>的类似，应该设其mode为<code>ls</code>看到的权限的异或，简单说就是<code>777−ls</code>显示的<br>如避免其他用户查看自己新建的文件，可用<code>umask␣077</code>，将设置缺省权限为：</p><ul><li>文件：−rw−−−−−−− 600</li><li>目录：drwx−−−−−− 700</li></ul><p>如想要每次登录都起作用，需要加入shell的启动初始文件，比如bash的<code>~/.bashrc</code></p><h3 id="改变文件的所有权：chown"><a href="#改变文件的所有权：chown" class="headerlink" title="改变文件的所有权：chown"></a>改变文件的所有权：chown</h3><blockquote><p>只有root用户能够进行这样的操作</p></blockquote><p><code>chown</code>可把一个文件的所有权修改为其他用户的，一般格式为：<br><code>chown␣[OPTION]...␣[OWNER][:[GROUP]]␣FILE...</code><br>主要选项：</p><ul><li><code>-v</code>：详细显示所有权的变化</li><li><code>-c</code>：类似-v，仅所有权改变时显示</li><li><code>-R</code>：递归改变目录及其内容的所有权<br>比如，将所有文件的所有者修改hmli及其所在的组nic：<br><code>chown␣−R␣hmli:nic ␣ dirname</code></li></ul><h3 id="改变文件的用户组：chgrp"><a href="#改变文件的用户组：chgrp" class="headerlink" title="改变文件的用户组：chgrp"></a>改变文件的用户组：chgrp</h3><blockquote><p>只有root才可以执行</p></blockquote><p><code>chgrp</code>命令可以改变一个文件的用户分组设置情况，一般格式为：<br><code>chgrp␣ [OPTION]...␣GROUP␣FILE...</code><br>主要选项：</p><ul><li><code>-v</code>：详细说明文件所属的用户组的变化</li><li><code>-c</code>：类似-v，仅所有权改变时显示</li><li><code>-r</code>：改变本目录及其所有子目录中的文件所属的用户组</li></ul><hr><p>此外还有很多命令，这些命令其实不用死记硬背（也背不完啊那么多），而是像HTML标签和css属性一样，遇到需要的可以去搜索引擎直接查来用（当然那几个常用的你得会）。</p><p><strong>推荐更多</strong></p><p>B站教学视频：<br><a href="https://www.bilibili.com/video/BV1Sv411r7vd?p=12">【小白入门 通俗易懂】2021韩顺平 一周学会Linux</a><br>(该教程有很多分P选集，可自行点击跳转)</p><p>几个命令查找网站：<br><a href="https://www.linuxcool.com/">Linux命令大全(手册)</a><br><a href="https://man.linuxde.net/">Linux命令大全</a><br><a href="http://linux.51yip.com/">Linux命令手册</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux操作系统使用基础丨（2）系统的运行</title>
      <link href="/2021/09/30/2021-10/"/>
      <url>/2021/09/30/2021-10/</url>
      
        <content type="html"><![CDATA[<div class="note red no-icon flat"><p>本篇为校内选修课教授内容的私人学习笔记，仅供在此博客网站观看，可分享此文链接给你需要分享的人，但暂时不开放转载权限，侵权必究，敬请理解。</p></div><h1 id="系统的运行"><a href="#系统的运行" class="headerlink" title="系统的运行"></a>系统的运行</h1><h2 id="登录及退出系统"><a href="#登录及退出系统" class="headerlink" title="登录及退出系统"></a>登录及退出系统</h2><ul><li><p>本地登录：文本或X图形界面</p></li><li><p>远程登录：SSH或TELNET</p><ul><li>SSH：<ul><li>Linux系统：<code>ssh ␣UserName@HostName&lt;sup&gt;5&lt;/sup&gt;</code></li><li>Windows系统：利用PuTTY、Xshell等支持SSH协议的客户端</li></ul></li><li>TELNET：<ul><li><code>telnet HostName</code>（<em>HostName指的是要登录系统的域名或 IP地址</em>）</li></ul></li></ul><blockquote><p>河师大高性能计算中心服务器不支持TELNET</p></blockquote><ul><li>退出系统： <code>exit</code> 或<code>&lt;ctrl−d&gt;</code>（<em>指的是按住 ctrl键与 d键</em>）</li></ul></li></ul><blockquote><p>高性能计算老师：虚拟机上安装Linux或者使用wsl形式的Linux都可以快速练习Linux系统的操作和命令的使用，但可能没法调用底层的结构（比如可能会影响“Linpack测试”的题）。高性能计算的目的是充分发挥底层的性能，虚拟机和wsl都加了一个跳板，这个跳板可能会限制我们有些东西没法用，影响我们使用的性能。所以对高性能计算来说安装Windows与Linux的双系统更好。</p></blockquote><h2 id="创建或修改密码"><a href="#创建或修改密码" class="headerlink" title="创建或修改密码"></a>创建或修改密码</h2><ul><li>一般系统：在系统提示符下输入<code>passwd</code></li><li>采用NIS的集群系统等：<blockquote><p>（NIS是网络信息服务，可用于在各节点系统中同步用户信息、系统配置等）</p></blockquote><ul><li>如果在NIS的主服务节点：可使用<code>passwd</code>或<code>yppasswd</code></li><li>如果在NIS的非主服务节点：应使用<code>yppasswd</code>，用<code>passwd</code>修改的无效</li></ul></li></ul><h2 id="Linux的命令格式"><a href="#Linux的命令格式" class="headerlink" title="Linux的命令格式"></a>Linux的命令格式</h2><ul><li>命令一般具有如下格式，具体各个命令有所不同，需要查看命令的帮助（<code>man␣command</code>）<br>  <code>command␣options␣arguments</code>即：<br>  <code>命令 选项 参数</code></li><li>命令中<code>[]</code>之内的表示是可选选项，<code>|</code>表示是或，几种中选择一种</li><li>一些常见正确与错误的例子：<table>  <tr>      <th>正确</th>      <th>错误</th>  </tr>  <tr>      <th colspan="2">-与选项分离</th>  </tr>  <tr>      <td>mail ␣−f ␣ newmail</td>      <td>mail ␣−␣ f ␣ newmail</td>  </tr>  <tr>      <th colspan="2">选项与参数的顺序</th>  </tr>  <tr>      <td>mail ␣−f ␣ newmail</td>      <td>mail ␣ newmail␣−f</td>  </tr>  <tr>      <th colspan="2">多选项</th>  </tr>  <tr>      <td>who␣−m␣−u</td>      <td>who␣−m−u</td>  </tr>  <tr>      <td>who␣−mu</td>      <td>who␣−m␣u</td>  </tr></li></ul></table><h2 id="键入命令"><a href="#键入命令" class="headerlink" title="键入命令"></a>键入命令</h2><blockquote><p>以下如非特殊说明，将以Bash(&gt; 3.0版本) 做为默认shell说明，其它shell也许略有不同</p></blockquote><ul><li>shell区分大小写</li><li>在shell提示符下输入命令，然后按回车键</li><li>如找不到输入的命令，会显示Command not Found</li><li>如命令太长，可在此行行尾键入\后按下回车键，在下一行的&gt;后接着输入</li></ul><h2 id="键盘的快捷方式"><a href="#键盘的快捷方式" class="headerlink" title="键盘的快捷方式"></a>键盘的快捷方式</h2><p>下面第一行代码表示按下ctrl键与c键，其他行类似，前面三四个一定要会。</p><p><code>&lt;ctrl−c&gt;</code>：停止命令执行（死机时不想等可以用）<br><code>&lt;ctrl−d&gt;</code>：结束传输或屏幕输入（或比如我现在SU到另一个用户上面，两个用户之间想退出也可以用）<br><code>&lt;ctrl−s&gt;</code>：临时停止输出（与ctrl−c彻底中断不同，这个可以恢复）<br><code>&lt;ctrl−q&gt;</code>：恢复输出</p><p><code>&lt;ctrl−u&gt;</code>：擦除光标以前的<br><code>&lt;ctrl−k&gt;</code>：擦除光标以后的<br><code>&lt;backspace&gt;</code>：纠正错误<br><code>&lt;ctrl−r&gt;</code>：在以前的命令中搜索</p><h2 id="自动补全命令行"><a href="#自动补全命令行" class="headerlink" title="自动补全命令行"></a>自动补全命令行</h2><p>自动补全命令行就是在输入命令时不必把命令输全，按·<Tab>·时shell能判断出所要输入的命令，如果有多个匹配将会列出，比如：</p><ul><li><code>ls ␣ /boot/v&lt;Tab&gt;</code>：系统将自动补全<code>/boot</code>下以v开头的文件或目录</li><li><code>pass&lt;Tab&gt;</code>：系统会显示所有以pass开始的命令，如果只有一个符合，则自动补全</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux操作系统使用基础丨（1）简介</title>
      <link href="/2021/09/30/2021-9/"/>
      <url>/2021/09/30/2021-9/</url>
      
        <content type="html"><![CDATA[<div class="note red no-icon flat"><p>本篇为校内选修课教授内容的私人学习笔记，仅供在此博客网站观看，可分享此文链接给你需要分享的人，但暂时不开放转载权限，侵权必究，敬请理解。</p></div><h1 id="Linux操作系统简介"><a href="#Linux操作系统简介" class="headerlink" title="Linux操作系统简介"></a>Linux操作系统简介</h1><ul><li><p>Linux以它的高效性和灵活性著称。具有多任务、多用户的能力</p></li><li><p>Linux实际应该只是内核，绝大多数基于Linux内核的操作系统使用了大量的GNU软件，包括了一个shell程序、程序库、编译器及工具，还有许多其他程序，例如Emacs。因此，GNU(GNU’s not Unix)计划的开创者Richard Matthew Stallma-RMS博士提议将Linux操作系统改名为GNU/Linux，但多数人仍习惯性地使用Linux</p></li><li><p>Linux之所以受到广大计算机爱好者的喜爱，其主要原因有两个：</p><ul><li>它属于自由软件，用户不用支付任何费用就可以它的源代码*，并且可以根据自己的需要对它进行必要的修改</li><li>它具有Unix的全部功能，任何使用Unix操作系统或想要学习Unix操作系统的人都可以从Linux中获益<blockquote><p>*指的是源代码可以免费获取，但有些二进制发布的，如Red Hat Enterprise Linux Server(RHEL)是收费的，但其源代码可以免费获取</p></blockquote></li></ul></li></ul><h2 id="Linux特点"><a href="#Linux特点" class="headerlink" title="Linux特点"></a>Linux特点</h2><ul><li><code>开放性</code>：系统遵循世界标准规范，特别是遵循开放系统互连（OSI）<br>国际标准</li><li><code>多用户</code>：系统资源可以被不同用户使用，每个用户对自己的资源<br>（例如：文件、设备）有特定的权限，互不影响</li><li><code>多任务</code>：计算机同时执行多个程序，而且各个程序的运行互相独立</li><li><code>良好的用户界面</code>：Linux提供两种界面：用户界面和系统调用<ol><li>用户界面（CLI接口）<ul><li>Linux的传统用户界面是基于文本的<code>命令行界面</code>，即<code>shell</code>，它既可以联机使用，又可存文件上脱机使用。shell有很强的程序设计能力，用户可方便地用它编制程序，从而为用户扩充系统功能提供了更高级的手段。可编程shell是指将多条命令组合在一起，形成一个shell程序，这个程序可以单独运行，也可以与其他程序同时运行。</li><li>Linux还为用户提供了<code>图形用户界面</code>。利用鼠标、菜单、窗口、滚动条等，给用户呈现一个直观、易操作、交互性强的友好的图形化界面。</li></ul></li><li>系统调用（GUI接口）<ul><li>用户可以<strong>在编程时直接使用系统提供的系统调用命令</strong></li><li>系统通过这个界面为用户程序提供低级、高效率的服务</li></ul></li></ol></li><li><code>设备独立性</code>：是指操作系统把所有外部设备统一当作成文件来看待，只要安装它们的驱动程序，任何用户都可以象使用文件一样，操纵、使用这些设备，而不必知道它们的具体存在形式。Linux是具有设备独立性的操作系统，它的内核具有高度适应能力</li><li><code>提供了丰富的网络功能</code>：完善的内置网络是Linux一大特点</li><li><code>可靠的安全系统</code>：Linux采取了许多安全技术措施，包括对读、写控制、带保护的子系统、审计跟踪、核心授权等，这为网络多用户环境中的用户提供了必要的安全保障</li><li><code>良好的可移植性</code>：是指将操作系统从一个平台转移到另一个平台使它仍然能按其自身的方式运行的能力。Linux是一种可移植的操作系统，能够在从微型计算机到大型计算机的任何环境中和任何平台上运行。比如，诺基亚的Maemo、谷歌的Android和Chrome OS，以及英特尔的Moblin。</li></ul><h2 id="Top500主流操作系统"><a href="#Top500主流操作系统" class="headerlink" title="Top500主流操作系统"></a>Top500主流操作系统</h2><p>超算界每年对全世界计算机进行排行，前500名中Linux占有率极高。</p><h2 id="Linux的主要组件"><a href="#Linux的主要组件" class="headerlink" title="Linux的主要组件"></a>Linux的主要组件</h2><p>1） <code>Kernel</code>：系统启动时将内核装入内存管理系统各种资源</p><blockquote><p>内部核心部分，Linux系统爱好者们会用到研发Kernel，我们普通用户只用得到下面两个</p></blockquote><p>2） <code>Shell用户界面</code>：shell英文翻译是“壳、贝壳”，即提供用户与内核交互处理接口，是<strong>命令解释器</strong>，提供强大编程环境bash（最常用）、csh、tcsh、ksh、zsh…</p><p>3） <code>Utility</code>:提供各种管理工具和应用程序。包含最常用的命令，如vi、gcc、Is、cat、who、wc、grep、diff…</p><h2 id="Linux内核版本"><a href="#Linux内核版本" class="headerlink" title="Linux内核版本"></a>Linux内核版本</h2><p>一些业内专业人士比较关注，不同版本号之间有着命名格式的约定，代表着不同程度的修改</p><h2 id="Linux发行版本"><a href="#Linux发行版本" class="headerlink" title="Linux发行版本"></a>Linux发行版本</h2><ol><li>Linux：</li></ol><ul><li><p>常见：Android、Arch、CentOS、Debian、Fedora、Gentoo、Mandriva、Red Hat Enterprise Linux(RHEL)、Slackware、SUSE Linux EnterpriseDesktop(SLED)、SUSE Linux Enterprise Server(SLES)、OpenSuSE、Ubuntu…</p></li><li><p>高性能计算系统常见：</p><ul><li>RHEL系：红帽Red Hat Enterprise Linux(RHEL)、CentOS、Scientific Linux-SL</li><li>SUSE系：SUSE Linux Enterprise Server(SLES)、OpenSuSE</li></ul></li></ul><ol start="2"><li>Unix：</li></ol><ul><li>学院派BSD：FreeBSD、OpenBSD、NetBSD…</li><li>商业Unix：IBM AIX、HP UX、Sun Solaris、OpenSolaris、Mac OSX、iOS、SGI IRIX…</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据库】第1章 绪论丨（第2节）数据模型</title>
      <link href="/2021/09/30/2021-8/"/>
      <url>/2021/09/30/2021-8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文所属《数据库系统原理》分类专栏，相关文章导航请点击<a href="https://barry-flynn.github.io/2021/09/29/2021-5/">《数据库系统原理》目录汇总贴</a></p></blockquote><h1 id="第2节-数据模型"><a href="#第2节-数据模型" class="headerlink" title="第2节 数据模型"></a>第2节 数据模型</h1><h2 id="两类数据模型"><a href="#两类数据模型" class="headerlink" title="两类数据模型"></a>两类数据模型</h2><blockquote><p><img src="https://i.loli.net/2021/10/24/1LGXviIpAxaD97g.png" alt="1.2.1 两类数据模型.png"><br>图片错别字：<br>物理模型：在磁盘或 <strong>磁带</strong> 上的存储方式和存取方法</p></blockquote><h2 id="概念模型"><a href="#概念模型" class="headerlink" title="概念模型"></a>概念模型</h2><blockquote><p><img src="https://i.loli.net/2021/10/24/1PN3FEUXmAj7pQG.png" alt="1.2.2 概念模型.png"><br>图片语句更正：<br>实体型：具有相同属性的实体必然具有共同的特征和 <strong>性质</strong></p></blockquote><h2 id="数据模型的组成要素"><a href="#数据模型的组成要素" class="headerlink" title="数据模型的组成要素"></a>数据模型的组成要素</h2><blockquote><p><img src="https://i.loli.net/2021/10/24/SxTbNfRXQ9WulgC.png" alt="1.2.3 数据模型的组成要素.png"><br>图片错别字：<br>数据的完整性约束条件是一组完整性 <strong>规则</strong>。</p></blockquote><h2 id="常用的数据模型"><a href="#常用的数据模型" class="headerlink" title="常用的数据模型"></a>常用的数据模型</h2><blockquote><p><img src="https://i.loli.net/2021/10/24/gZoFNAxKYOGJE5v.png" alt="1.2.4 常用的数据模型.png"><br>其中，<strong>层次模型</strong>和<strong>网状模型</strong>统称为<strong>格式化模型</strong>。</p></blockquote><h2 id="层次模型"><a href="#层次模型" class="headerlink" title="层次模型"></a>层次模型</h2><blockquote><p><img src="https://i.loli.net/2021/10/24/iYGtbTzxIc6pg37.png" alt="1.2.5 层次模型.png"></p></blockquote><h2 id="网状模型"><a href="#网状模型" class="headerlink" title="网状模型"></a>网状模型</h2><blockquote><p><img src="https://i.loli.net/2021/10/24/PMF8o1Lsa7EwWm6.png" alt="1.2.6 网状模型.png"></p></blockquote><h2 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h2><blockquote><p><img src="https://i.loli.net/2021/10/24/98wBdfKuHxalOek.png" alt="1.2.7 关系模型.png"><br>优点中：关系模型存取路径对用户“透明”<br>缺点中：关系模型存取路径对用户“隐蔽”<br>不冲突，因为这里“透明”的意思是“看不见”，而不是“公开透明”。</p></blockquote><hr><p>本文思维导图源自：</p><p>CSDN - <a href="https://blog.csdn.net/frozennet/article/details/103793984">【数据库系统概论】第一章 绪论 1.2 数据模型</a></p>]]></content>
      
      
      <categories>
          
          <category> 《数据库系统概论》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo博客】如何使博客拥有星空背景和流星特效</title>
      <link href="/2021/09/30/2021-7/"/>
      <url>/2021/09/30/2021-7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文为让<code>深色模式</code>下的博客网页<br>增加<code>星空背景和流星特效</code>配置的小教程，<br>该效果如下：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/202108121834269.gif" alt="深色模式下星空背景和流星特效"></p><blockquote><p>本文以Hexo博客的Butterfly主题为例，其他博客框架、主题、网页如何生效请参考本文自行尝试，我不做解答。</p></blockquote><h1 id="1-插入Canvas标签"><a href="#1-插入Canvas标签" class="headerlink" title="1. 插入Canvas标签"></a>1. 插入Canvas标签</h1><p>首先打开Butterfly主题的<code>_config.yml</code>文件或者使用HTML直接插入，找到配置文件对应的<code>inject</code>部分，插入<code>&lt;canvas id=&quot;universe&quot;&gt;&lt;/canvas&gt;</code><br><img src="https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/202108121759902.png" alt="插入Canvas标签"></p><h1 id="2-创建JS文件"><a href="#2-创建JS文件" class="headerlink" title="2. 创建JS文件"></a>2. 创建JS文件</h1><p>在<code>butterfly/source/js/</code>创建一个<code>universe.js</code>文件，或者添加到自己的<code>js</code>文件中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dark</span>(<span class="params"></span>) </span>&#123;<span class="built_in">window</span>.requestAnimationFrame=<span class="built_in">window</span>.requestAnimationFrame||<span class="built_in">window</span>.mozRequestAnimationFrame||<span class="built_in">window</span>.webkitRequestAnimationFrame||<span class="built_in">window</span>.msRequestAnimationFrame;<span class="keyword">var</span> n,e,i,h,t=<span class="number">.05</span>,s=<span class="built_in">document</span>.getElementById(<span class="string">&quot;universe&quot;</span>),o=!<span class="number">0</span>,a=<span class="string">&quot;180,184,240&quot;</span>,r=<span class="string">&quot;226,225,142&quot;</span>,d=<span class="string">&quot;226,225,224&quot;</span>,c=[];<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;n=<span class="built_in">window</span>.innerWidth,e=<span class="built_in">window</span>.innerHeight,i=<span class="number">.216</span>*n,s.setAttribute(<span class="string">&quot;width&quot;</span>,n),s.setAttribute(<span class="string">&quot;height&quot;</span>,e)&#125;<span class="function"><span class="keyword">function</span> <span class="title">u</span>(<span class="params"></span>)</span>&#123;h.clearRect(<span class="number">0</span>,<span class="number">0</span>,n,e);<span class="keyword">for</span>(<span class="keyword">var</span> t=c.length,i=<span class="number">0</span>;i&lt;t;i++)&#123;<span class="keyword">var</span> s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">y</span>(<span class="params"></span>)</span>&#123;<span class="built_in">this</span>.reset=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">this</span>.giant=m(<span class="number">3</span>),<span class="built_in">this</span>.comet=!<span class="built_in">this</span>.giant&amp;&amp;!o&amp;&amp;m(<span class="number">10</span>),<span class="built_in">this</span>.x=l(<span class="number">0</span>,n-<span class="number">10</span>),<span class="built_in">this</span>.y=l(<span class="number">0</span>,e),<span class="built_in">this</span>.r=l(<span class="number">1.1</span>,<span class="number">2.6</span>),<span class="built_in">this</span>.dx=l(t,<span class="number">6</span>*t)+(<span class="built_in">this</span>.comet+<span class="number">1</span>-<span class="number">1</span>)*t*l(<span class="number">50</span>,<span class="number">120</span>)+<span class="number">2</span>*t,<span class="built_in">this</span>.dy=-l(t,<span class="number">6</span>*t)-(<span class="built_in">this</span>.comet+<span class="number">1</span>-<span class="number">1</span>)*t*l(<span class="number">50</span>,<span class="number">120</span>),<span class="built_in">this</span>.fadingOut=<span class="literal">null</span>,<span class="built_in">this</span>.fadingIn=!<span class="number">0</span>,<span class="built_in">this</span>.opacity=<span class="number">0</span>,<span class="built_in">this</span>.opacityTresh=l(<span class="number">.2</span>,<span class="number">1</span>-<span class="number">.4</span>*(<span class="built_in">this</span>.comet+<span class="number">1</span>-<span class="number">1</span>)),<span class="built_in">this</span>.do=l(<span class="number">5e-4</span>,<span class="number">.002</span>)+<span class="number">.001</span>*(<span class="built_in">this</span>.comet+<span class="number">1</span>-<span class="number">1</span>)&#125;,<span class="built_in">this</span>.fadeIn=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">this</span>.fadingIn&amp;&amp;(<span class="built_in">this</span>.fadingIn=!(<span class="built_in">this</span>.opacity&gt;<span class="built_in">this</span>.opacityTresh),<span class="built_in">this</span>.opacity+=<span class="built_in">this</span>.do)&#125;,<span class="built_in">this</span>.fadeOut=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">this</span>.fadingOut&amp;&amp;(<span class="built_in">this</span>.fadingOut=!(<span class="built_in">this</span>.opacity&lt;<span class="number">0</span>),<span class="built_in">this</span>.opacity-=<span class="built_in">this</span>.do/<span class="number">2</span>,(<span class="built_in">this</span>.x&gt;n||<span class="built_in">this</span>.y&lt;<span class="number">0</span>)&amp;&amp;(<span class="built_in">this</span>.fadingOut=!<span class="number">1</span>,<span class="built_in">this</span>.reset()))&#125;,<span class="built_in">this</span>.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">if</span>(h.beginPath(),<span class="built_in">this</span>.giant)h.fillStyle=<span class="string">&quot;rgba(&quot;</span>+a+<span class="string">&quot;,&quot;</span>+<span class="built_in">this</span>.opacity+<span class="string">&quot;)&quot;</span>,h.arc(<span class="built_in">this</span>.x,<span class="built_in">this</span>.y,<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">1</span>);<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">this</span>.comet)&#123;h.fillStyle=<span class="string">&quot;rgba(&quot;</span>+d+<span class="string">&quot;,&quot;</span>+<span class="built_in">this</span>.opacity+<span class="string">&quot;)&quot;</span>,h.arc(<span class="built_in">this</span>.x,<span class="built_in">this</span>.y,<span class="number">1.5</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">1</span>);<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;<span class="number">30</span>;t++)h.fillStyle=<span class="string">&quot;rgba(&quot;</span>+d+<span class="string">&quot;,&quot;</span>+(<span class="built_in">this</span>.opacity-<span class="built_in">this</span>.opacity/<span class="number">20</span>*t)+<span class="string">&quot;)&quot;</span>,h.rect(<span class="built_in">this</span>.x-<span class="built_in">this</span>.dx/<span class="number">4</span>*t,<span class="built_in">this</span>.y-<span class="built_in">this</span>.dy/<span class="number">4</span>*t-<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>),h.fill()&#125;<span class="keyword">else</span> h.fillStyle=<span class="string">&quot;rgba(&quot;</span>+r+<span class="string">&quot;,&quot;</span>+<span class="built_in">this</span>.opacity+<span class="string">&quot;)&quot;</span>,h.rect(<span class="built_in">this</span>.x,<span class="built_in">this</span>.y,<span class="built_in">this</span>.r,<span class="built_in">this</span>.r);h.closePath(),h.fill()&#125;,<span class="built_in">this</span>.move=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">this</span>.x+=<span class="built_in">this</span>.dx,<span class="built_in">this</span>.y+=<span class="built_in">this</span>.dy,!<span class="number">1</span>===<span class="built_in">this</span>.fadingOut&amp;&amp;<span class="built_in">this</span>.reset(),(<span class="built_in">this</span>.x&gt;n-n/<span class="number">4</span>||<span class="built_in">this</span>.y&lt;<span class="number">0</span>)&amp;&amp;(<span class="built_in">this</span>.fadingOut=!<span class="number">0</span>)&#125;,<span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;o=!<span class="number">1</span>&#125;,<span class="number">50</span>)&#125;<span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params">t</span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="number">1e3</span>*<span class="built_in">Math</span>.random())+<span class="number">1</span>&lt;<span class="number">10</span>*t&#125;<span class="function"><span class="keyword">function</span> <span class="title">l</span>(<span class="params">t,i</span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">Math</span>.random()*(i-t)+t&#125;f(),<span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>,f,!<span class="number">1</span>),<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;h=s.getContext(<span class="string">&quot;2d&quot;</span>);<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;i;t++)c[t]=<span class="keyword">new</span> y,c[t].reset();u()&#125;(),<span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params"></span>)</span>&#123;<span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;html&#x27;</span>)[<span class="number">0</span>].getAttribute(<span class="string">&#x27;data-theme&#x27;</span>)==<span class="string">&#x27;dark&#x27;</span>&amp;&amp;u(),<span class="built_in">window</span>.requestAnimationFrame(t)&#125;()&#125;;</span><br><span class="line">dark()</span><br></pre></td></tr></table></figure><p>其中代码里有这样一段内容：<br><img src="https://cdn.jsdelivr.net/gh/Justlovesmile/CDN2/post/202108121822274.png" alt="使暗色主题生效"><br>代码的这一部分要求<code>data-theme</code>也就是主题，必须为dark暗色主题（即夜间模式），因此仅在暗色主题生效。随后将js文件添加到配置文件的<code>inject</code>处或者其他需要的位置。</p><h1 id="3-CSS样式"><a href="#3-CSS样式" class="headerlink" title="3. CSS样式"></a>3. CSS样式</h1><p>将下方代码添加到Butterfly主题配置文件的<code>inject</code>的<code>head</code>里<br>作用是将此加入到每个页面的头部代码中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 背景宇宙星光  */</span></span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">      <span class="selector-id">#universe</span> &#123; </span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">        <span class="attribute">position</span>: fixed;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">pointer-events</span>: none;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>流星特效至此已经生效，<br>保存代码，预览本地，部署页面，备份源码。</p><p>星空背景自己在网络上找一张就行了，或者干脆不用星空背景，其他普通图片作为背景，用此特效也好看。</p><blockquote><p>这个教程学习自<a href="https://blog.justlovesmile.top/posts/6a260bf6.html">Justlovesmile’s BLOG</a>，在原文基础上有改动和补充。<br>该特效有一个小Bug是<code>暗色模式</code>调成<code>亮色模式</code>后流星特效还在，只是静止不动使其不明显了，没有清空画布。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 博客折腾记 </tag>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据库】第1章 绪论丨（第1节）数据库系统概述</title>
      <link href="/2021/09/29/2021-6/"/>
      <url>/2021/09/29/2021-6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文所属《数据库系统原理》分类专栏，相关文章导航请点击<a href="https://barry-flynn.github.io/2021/09/29/2021-5/">《数据库系统原理》目录汇总贴</a></p></blockquote><p>【数据库】第1章 绪论<br>本章介绍数据库系统的基本概念，包括数据管理技术的发展过程、数据库系统的组成部分等。从中可以学到为什么要使用数据库技术、数据库技术的重要性。本章是后面各章节的准备和基础。</p><h1 id="第1节-数据库系统概述"><a href="#第1节-数据库系统概述" class="headerlink" title="第1节 数据库系统概述"></a>第1节 数据库系统概述</h1><h2 id="数据库的4个基本概念"><a href="#数据库的4个基本概念" class="headerlink" title="数据库的4个基本概念"></a>数据库的4个基本概念</h2><ul><li>1、<strong>数据(data)</strong></li></ul><p>定义：描述事物的符号记录。描述事物的符号可以是数字，也可以是文字、图形、图像、音频、视频等，数据有多种表现形式，他们都可以经过数字化后存入计算机。<strong>数据的含义称为数据的语义，数据与其语义是不可分的。</strong></p><ul><li>2、<strong>数据库(DataBase, DB)</strong></li></ul><p>数据库是长期储存在计算机内、有组织的、可共享的大量数据的集合。数据库中的数据按一定的数据模型<strong>组织、描述和储存</strong>，具有<strong>较小的冗余度</strong> ，<strong>较高的数据独立性</strong>和<strong>易扩展性</strong>，并可为各种用户共享。概括地讲，数据库数据具有永久储存、有组织和可共享三个基本特点。</p><ul><li>3、<strong>数据库管理系统(DataBase Management System, DBMS)</strong></li></ul><p>数据库管理系统是位于用户与操作系统之间一层的数据管理软件。<strong>数据库管理系统</strong>和操作系统一样是<strong>计算机的基础软件</strong>。也是一个大型复杂的软件系统。它的主要功能包括以下几个方面：<br>（1）数据定义功能<br>（2）数据组织、存储和管理<br>（3）数据操纵功能<br>（4）数据库的事务管理和运行管理<br>（5）数据库的建立和维护功能<br>（6）其他功能</p><ul><li>4、<strong>数据库系统(DataBase System, DBS)</strong></li></ul><p>数据库系统是由数据库、数据库管理系统（及其应用开发工具）、应用程序和数据库管理员组成的存储、管理、处理和维护数据的系统。在一般不引起混淆的情况下，人们常常把数据库系统简称为数据库。</p><h2 id="数据管理技术的产生和发展"><a href="#数据管理技术的产生和发展" class="headerlink" title="数据管理技术的产生和发展"></a>数据管理技术的产生和发展</h2><ul><li><p>一、人工管理阶段<br>1）数据不保存<br>2）应用程序管理数据<br>3）数据不共享<br>4）程序不具有独立性<br><img src="https://i.loli.net/2021/09/29/mPk3Z28e4R5lyXD.png" alt="1-3 人工管理阶段应用程序与数据之间的一一对应关系.png"></p></li><li><p>二、文件系统阶段<br>1）数据可以长期保存<br>2）由文件系统管理数据</p><ul><li>数据共享性差，冗余度大</li><li>数据独立性差<br><img src="https://i.loli.net/2021/09/29/OdmPMA6zuDC3KJk.png" alt="1-4 文件系统阶段应用程序与数据之间的对应关系.png"></li></ul></li><li><p>三、数据库系统阶段<br>从文件系统到数据库系统标志着数据管理技术的飞跃。<br><img src="https://i.loli.net/2021/09/29/egnqXDRliHx2wIK.png" alt="1-6 数据库系统阶段应用程序与数据之间的对应关系.png"></p></li></ul><p>【总结】：在应用需求的推动下，在计算机硬件、软件发展的基础上，数据管理技术经历了<strong>人工管理</strong>、<strong>文件系统</strong>、<strong>数据库系统</strong>三个阶段。这三个阶段的特点及其比较如下表1-1所示：<br><img src="https://i.loli.net/2021/09/29/m9QzLhkvrK6geBf.png" alt="数据管理三个阶段的比较（表1-1）.png"></p><h2 id="数据库系统的特点"><a href="#数据库系统的特点" class="headerlink" title="数据库系统的特点"></a>数据库系统的特点</h2><p>与人工管理和文件系统相比，数据库系统的特点主要有以下几个方面。</p><ul><li><p><strong>数据结构化</strong><br>数据库系统实现整体数据的结构化，这是数据库的主要特征之一，也是数据库系统与文件系统的本质区别。所谓“整体”结构化是指数据库中的数据不再仅仅针对某一个应用，而是面向整个组织或企业：不仅数据内部是结构化的，而且整体是结构化的，数据之间是具有联系的。</p></li><li><p><strong>数据的共享性高、冗余度低且易扩充</strong><br>数据共享可以大大减少数据冗余，节约存储空间。数据共享还能够避免数据之间的不相容性与不一致性。<br>数据面向整个系统，且有结构，可以被多个应用共享使用，而且容易增加新的应用。这就使得数据库系统弹性大，易于扩充。</p></li><li><p><strong>数据独立性高</strong><br>数据独立性是借助数据库管理数据的一个显著优点，它已成为数据库领域中一个常用术语和重要概念，包括数据的<strong>物理独立性</strong>和<strong>逻辑独立性</strong>。</p><ul><li>1）物理独立性<br>指“用户的应用程序”与“数据库中数据的储存”是相互独立的。</li><li>2）逻辑独立性<br>指“用户的应用程序”与“数据库的逻辑结构”是相互独立的。</li></ul></li></ul><p>数据独立性是由数据库管理系统提供的二级映像来保证的。数据与程序的独立把数据的定义从程序中分离出去，加上储存数据的方法又由数据库管理系统负责提供，从而简化了应用程序的编制，大大减少了应用程序的维护和修改。</p><ul><li><strong>数据由数据库管理系统统一管理和控制</strong><br>它需提供以下几方面的数据控制功能：<ul><li>1）数据安全性保护<br>指保护数据以防止不合法使用造成的数据泄密和破坏。</li><li>2）数据完整性检查<br>指数据的正确性、有效性和相容性。</li><li>3）并发控制<br>对多用户的并发操作加以控制和协调。</li><li>4）数据库恢复<br>将数据库从错误状态恢复到某一已知的正确状态（亦称为完整状态或一致状态）的功能</li></ul></li></ul><hr><p>综上所述，<br><strong>【数据库】</strong>是长期储存在计算机内、有组织的、可共享的大量数据的集合。它可以供各种用户共享，具有最小冗余度和较高的数据独立性。<br><strong>【数据库管理系统】</strong>在数据库建立、运营和维护时对数据库进行统一控制，以保证数据的完整性和安全性，并在多用户同时使用数据库时进行并发控制，在发生故障后对数据库进行恢复。<br><strong>【数据库系统】</strong>的出现使信息系统从“<strong>以加工数据的程序为中心</strong>”转向“<strong>围绕共享的数据库为中心</strong>”的新阶段。这样既便于数据的集中处理，又能简化应用程序的研制和防护，提高了数据的利用率和相容性，提高了决策的可靠性。</p><hr><pre><code>》》下面是我最喜欢的自说自话环节《《</code></pre><blockquote><p><strong>【2021年09月29日】留言</strong><br>学了数据库的第一节，我的感悟是：<br>啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊脑子一团浆糊什么玩意啊满脑子都是数据数据数据库库库库库库…</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 《数据库系统概论》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数据库系统概论》目录汇总帖</title>
      <link href="/2021/09/29/2021-5/"/>
      <url>/2021/09/29/2021-5/</url>
      
        <content type="html"><![CDATA[<div class="note blue no-icon flat"><p><font size=2>本页作为我学习“数据库系统原理”这门课的博客笔记汇总帖，点击对应目录可跳转到我的对应博客，内容会持续完善，欢迎关注我今后的相关笔记文章。</font></p></div><blockquote><p>【声明】：相关博客仅作为学习笔记使用，如若内容构成侵权请及时联系我修改/关闭/删除相应内容。<br>转载请务必注明来自【百里飞洋】(<a href="https://barry-flynn.github.io/2021/09/29/2021-5/">https://barry-flynn.github.io/2021/09/29/2021-5/</a>) ，否则<code>侵权必究</code>！</p></blockquote><p>主要学习路线采用高等教育出版社的<kbd>《数据库系统概论 第5版》</kbd>目录，再次声明<code>相关博客仅作为学习笔记使用</code>，进行的知识点整理<code>目的是便于本人的理解与备忘</code>，分享纯属<code>为爱发电</code>，不会进行商业售卖，学习过程中也会吸收网络其他视频和博客博主的知识，并添加自己的原创理解，若对你有帮助欢迎到文章下方进行<code>打赏</code>（一分一毛一块也是爱）。</p><p>感谢所有老师、同学、前辈和引路人，在此脱帽致敬~</p><hr /><h1 id="第一篇-基础篇"><a href="#第一篇-基础篇" class="headerlink" title="第一篇 基础篇"></a>第一篇 基础篇</h1><h2 id="第1章-绪论"><a href="#第1章-绪论" class="headerlink" title="第1章 绪论"></a>第1章 绪论</h2><ul><li><a href="https://barry-flynn.github.io/2021/09/29/2021-6/">数据库系统概述</a></li><li><a href="https://barry-flynn.github.io/2021/09/30/2021-8/">数据模型</a></li><li><a href="https://barry-flynn.github.io/2021/10/25/2021-21/">数据库系统的结构</a></li><li><a href="https://barry-flynn.github.io/2021/10/25/2021-22/">数据库系统的组成</a></li><li><a href="https://barry-flynn.github.io/2021/10/27/2021-24/">（小结与习题）</a></li></ul><h2 id="第2章-关系数据库"><a href="#第2章-关系数据库" class="headerlink" title="第2章 关系数据库"></a>第2章 关系数据库</h2><ul><li><a href="https://barry-flynn.github.io/2021/10/28/2021-25/">关系数据结构及形式化定义</a></li><li>关系操作</li><li>关系的完整性</li><li>关系代数</li><li>*关系演算（选学）</li><li><a href="https://barry-flynn.github.io/2021/10/28/2021-25/#%E3%80%90%E5%B0%8F%E7%BB%93%E4%B8%8E%E4%B9%A0%E9%A2%98%E3%80%91">（小结与习题）</a></li></ul><h2 id="第3章-关系数据库标准语言SQL"><a href="#第3章-关系数据库标准语言SQL" class="headerlink" title="第3章 关系数据库标准语言SQL"></a>第3章 关系数据库标准语言SQL</h2><ul><li><a href="https://barry-flynn.github.io/2021/10/29/2021-26/">SQL概述</a></li><li>学生-课程数据库</li><li>数据定义</li><li>数据查询</li><li>数据更新</li><li>空值的处理</li><li>视图</li><li><a href="https://barry-flynn.github.io/2021/11/05/2021-33/">（小结与习题）</a></li></ul><h2 id="第4章-数据库安全性"><a href="#第4章-数据库安全性" class="headerlink" title="第4章 数据库安全性"></a>第4章 数据库安全性</h2><ul><li><a href="https://barry-flynn.github.io/2021/11/09/2021-35/">数据库安全性概述</a></li><li>数据库安全性控制<ul><li>用户身份鉴别的方法</li><li>存取控制</li><li>视图机制</li><li>审计</li><li>数据加密</li></ul></li><li><a href="https://barry-flynn.github.io/2021/11/09/2021-35/">（小结与习题）</a></li></ul><h2 id="第5章-数据库完整性"><a href="#第5章-数据库完整性" class="headerlink" title="第5章 数据库完整性"></a>第5章 数据库完整性</h2><ul><li><a href="https://blog.51cto.com/u_15061934/3435446">（小结与习题）</a></li></ul><hr><h1 id="第二篇-设计与应用开发篇"><a href="#第二篇-设计与应用开发篇" class="headerlink" title="第二篇 设计与应用开发篇"></a>第二篇 设计与应用开发篇</h1><h2 id="第6章-关系数据理论"><a href="#第6章-关系数据理论" class="headerlink" title="第6章 关系数据理论"></a>第6章 关系数据理论</h2><h2 id="第7章-数据库设计"><a href="#第7章-数据库设计" class="headerlink" title="第7章 数据库设计"></a>第7章 数据库设计</h2><h2 id="第8章-数据库编程"><a href="#第8章-数据库编程" class="headerlink" title="第8章 数据库编程"></a>第8章 数据库编程</h2><hr><h1 id="第三篇-系统篇"><a href="#第三篇-系统篇" class="headerlink" title="第三篇 系统篇"></a>第三篇 系统篇</h1><h2 id="第9章-关系查询处理和查询优化"><a href="#第9章-关系查询处理和查询优化" class="headerlink" title="第9章 关系查询处理和查询优化"></a>第9章 关系查询处理和查询优化</h2><h2 id="第10章-数据库恢复技术"><a href="#第10章-数据库恢复技术" class="headerlink" title="第10章 数据库恢复技术"></a>第10章 数据库恢复技术</h2><h2 id="第11章-并发控制"><a href="#第11章-并发控制" class="headerlink" title="第11章 并发控制"></a>第11章 并发控制</h2><h2 id="第12章-数据库管理系统"><a href="#第12章-数据库管理系统" class="headerlink" title="第12章 数据库管理系统*"></a>第12章 数据库管理系统*</h2><hr><h1 id="第四篇-新技术篇"><a href="#第四篇-新技术篇" class="headerlink" title="第四篇 新技术篇"></a>第四篇 新技术篇</h1><h2 id="第13章-数据库技术发展概述"><a href="#第13章-数据库技术发展概述" class="headerlink" title="第13章 数据库技术发展概述"></a>第13章 数据库技术发展概述</h2><h2 id="第14章-大数据管理"><a href="#第14章-大数据管理" class="headerlink" title="第14章 大数据管理"></a>第14章 大数据管理</h2><h2 id="第15章-数据库设计"><a href="#第15章-数据库设计" class="headerlink" title="第15章 数据库设计"></a>第15章 数据库设计</h2><h2 id="第16章-数据仓库与联机分析处理技术"><a href="#第16章-数据仓库与联机分析处理技术" class="headerlink" title="第16章 数据仓库与联机分析处理技术"></a>第16章 数据仓库与联机分析处理技术</h2><hr><p>THE END.</p>]]></content>
      
      
      <categories>
          
          <category> 《数据库系统概论》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【日常生活】大二学年规划清单</title>
      <link href="/2021/09/27/2021-4/"/>
      <url>/2021/09/27/2021-4/</url>
      
        <content type="html"><![CDATA[<div class="note green no-icon flat"><p>不断完善中……</p></div><p>卧槽已经大二了竟然啊啊啊！！！<br>因为疫情，天天家里蹲，我怕不是上了个家里蹲大学吧…<br>不行，大一对自己太放纵了，大二我得开始认真放在学习上了。</p><h1 id="专业学习"><a href="#专业学习" class="headerlink" title="专业学习"></a>专业学习</h1><ul><li><p>C语言复习巩固</p></li><li><p>前端技术学习要自律</p></li><li><p>专业课态度要认真</p></li></ul><hr><h1 id="英语积累"><a href="#英语积累" class="headerlink" title="英语积累"></a>英语积累</h1><p>为了四六级，冲冲冲！！！</p><ul><li>每天一组 Word list，并按计划复习</li><li>每天跟读一遍课文培养语感</li></ul><hr><h1 id="体育健身"><a href="#体育健身" class="headerlink" title="体育健身"></a>体育健身</h1><h2 id="单杠引体向上"><a href="#单杠引体向上" class="headerlink" title="单杠引体向上"></a>单杠引体向上</h2><p>为了体测成绩，冲啊！！！</p><iframe src="//player.bilibili.com/player.html?aid=633173378&bvid=BV1mb4y1y7aA&cid=414148388&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>暂时按上方视频中方法锻炼：</p><p>每周两次<kbd><a href="https://www.bilibili.com/video/BV1mb4y1y7aA?share_source=copy_web">点击跳转B站播放</a></kbd></p><ul><li>肩胛骨激活（10-12次）3组（最高点停顿1-2秒）</li><li>自重划船（10-12次）4组（逐渐往下走一点）</li><li>离心引力（10-12次）4组（增加离心时长到3秒以上）</li><li>核心 3组（做标准的时长-60秒）</li></ul><h2 id="跑步-amp-体前屈-amp-跳远"><a href="#跑步-amp-体前屈-amp-跳远" class="headerlink" title="跑步 &amp; 体前屈 &amp; 跳远"></a>跑步 &amp; 体前屈 &amp; 跳远</h2><p>暂定每周两次晚上去操场：</p><ul><li>跑圈 x 3</li><li>站位体前屈 x 8个节拍</li><li>坐位体前屈 x 8个节拍</li><li>跳远 x 5个来回</li></ul><hr><p>为监督自我成长与定期总结反馈，<br><del>提前适应未来的资本压榨生活</del><br>提前养成优秀学习生活习惯，<br>大二起，开始写<code>周报+月报</code>，<br>汇报每周学习/工作进程和收获，<br>嘿嘿，自个儿压榨自个儿~</p><p>交给谁呢？博客！！！写博客汇报！</p><pre><code>每篇周报须包括：</code></pre><ol><li>当周计划</li><li>计划完成情况</li><li>经验、心得和学习分享的总结</li><li>制定下周目标</li></ol><p><img src="https://i.loli.net/2021/10/04/Bu4JFXmdkrUQ8D9.jpg" alt="我的次元突破.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 【我的日常】 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【Linux安装】Win10安装Ubuntu双系统（含BIOS操作）</title>
      <link href="/2021/09/16/2021-3/"/>
      <url>/2021/09/16/2021-3/</url>
      
        <content type="html"><![CDATA[<h1 id="操作准备"><a href="#操作准备" class="headerlink" title="操作准备"></a>操作准备</h1><p>一个10多G以上大小的空U盘，一台Win10电脑（非Win10我不知是否可行）。</p><p>我的是联想ThinkPad笔记本，不同电脑操作起来可能与此文略有不同，</p><p>所以还需要准备一个善于思考能灵活变通的脑瓜儿~</p><h1 id="一、Ubuntu桌面系统镜像文件下载"><a href="#一、Ubuntu桌面系统镜像文件下载" class="headerlink" title="一、Ubuntu桌面系统镜像文件下载"></a>一、Ubuntu桌面系统镜像文件下载</h1><p>地址：<a href="https://cn.ubuntu.com/download/desktop"> 下载Ubuntu桌面系统 | Ubuntu </a></p><p>我选择下载的是长期支持(LTS)版本</p><div class="note default no-icon flat"><p>这篇文章下载的是Ubuntu 20.04.3 LTS，有2.9G那么大，下载时请耐心等待。</p></div><h1 id="二、U盘引导盘制作工具-Rufus-下载"><a href="#二、U盘引导盘制作工具-Rufus-下载" class="headerlink" title="二、U盘引导盘制作工具(Rufus)下载"></a>二、U盘引导盘制作工具(Rufus)下载</h1><p>地址：<a href="https://rufus.ie/zh/"> Rufus - 轻松创建USB启动盘 </a></p><p>我选择的是2021.08.03日更新的最新的rufus-3.15版本</p><div class="note default no-icon flat"><p>类似工具其实有很多，你可以用自己熟悉的。</p><p>Rufus 是一个开源免费的快速制作 U 盘系统启动盘和格式化 USB 的实用小工具，它可以快速把 ISO 格式的系统镜像文件快速制作成可引导的 USB 启动安装盘，支持 Windows 或 Linux 启动。rufus是一款实用的自启动u盘制作工具。用户可以通过该软件快速制作linux系统或者win启动u盘，不过在这之前你需要把重要资料备份到电脑中，因为格式化后什么都找不回来了。如果身边没有系统安装盘或者刻录光盘，那么使用rufus就可以帮你安装系统了。</p></div><h1 id="三、制作系统盘"><a href="#三、制作系统盘" class="headerlink" title="三、制作系统盘"></a>三、制作系统盘</h1><p>双击运行 rufus-3.15.exe 程序，</p><p>插入你的U盘，</p><p>点击“引导类型选项”后面的选择按钮，</p><p>选择刚刚下载的ubuntu-20.04.3-desktop-amd64.iso</p><p><img src="https://i.loli.net/2021/09/16/2yN1L6zgoCc5MEF.png" alt="rufus界面.png"></p><p>其他选项默认就可以，点击开始。</p><p><img src="https://i.loli.net/2021/09/16/MvHA4wf1k82FGXm.png" alt="Rufus弹出框.png"></p><p>选择以 ISO镜像 模式写入，点击OK。</p><p>接下来它就会把原来的东西格式化，然后把Ubuntu烧录进去。</p><p>（注意：U盘不要留东西，资料提前备份好！格式化后就全没了！！！）</p><p><img src="https://i.loli.net/2021/09/16/SFqnait5Nueb48j.png" alt="Rufus烧录完后的U盘.png"></p><p>上图就是烧录完后的U盘内文件了，</p><p>现在拔出U盘。</p><h1 id="四、制作分区"><a href="#四、制作分区" class="headerlink" title="四、制作分区"></a>四、制作分区</h1><p>按下图打开计算机管理（或者右键点击桌面“此电脑”，然后点击“管理”就行了）</p><p><img src="https://i.loli.net/2021/09/16/xtTvZY1mygUR9w3.png" alt="管理分区.png"></p><p>然后点击左侧磁盘管理，选择一个你想腾出来的盘（不会影响其中文件），</p><p>我选的是E盘，右键，选择压缩卷，</p><p><img src="https://i.loli.net/2021/09/16/ZF2KxUp35RIgLyl.png" alt="磁盘管理.png"></p><p>接着输入你想压缩的空间大小，</p><p>由于我笔记本盘容量小，于是就只给了50G，也就是51200MB，</p><p>你们可根据实际情况填写，当然是越大越爽，但如果不常用的话，倒也不用给太多。</p><p><img src="https://i.loli.net/2021/09/16/kvXctr4j3xHUygd.png" alt="输入压缩空间大小.png"></p><p>点击压缩，放心，这不会影响磁盘原有文件的。</p><p><img src="https://i.loli.net/2021/09/16/wxUCS7IDYbNHh4n.png" alt="磁盘压缩后.png"></p><h1 id="五、进入BIOS界面进行设置"><a href="#五、进入BIOS界面进行设置" class="headerlink" title="五、进入BIOS界面进行设置"></a>五、进入BIOS界面进行设置</h1><h2 id="1、进入BIOS"><a href="#1、进入BIOS" class="headerlink" title="1、进入BIOS"></a>1、进入BIOS</h2><div class="note default no-icon flat"><p>BIOS：(基本输入输出系统)，用于电脑开机运行系统各组件时的自我检测，以及加载系统启动引导程序，BIOS设置决定系统以什么方式启动，比如硬盘启动、U盘启动等，另外BIOS控制了电脑所有的低级功能，很多系统设置需进入BIOS界面才能更改。进入BIOS的方法因电脑品牌类型不同而有所差异。</p></div><h3 id="（方法1）：通过热键进入BIOS"><a href="#（方法1）：通过热键进入BIOS" class="headerlink" title="（方法1）：通过热键进入BIOS"></a>（方法1）：通过热键进入BIOS</h3><p>不同品牌的电脑进入所使用的按键不同，甚至同为联想笔记本ThinkPad但不同的系列，进入的方法都不同。你可以去网上搜一下你的电脑进入的按键是什么，比如很多电脑的方法是在启动和重新启动时按F2。</p><h3 id="（方法2）：通过UEFI固件设置进入BIOS"><a href="#（方法2）：通过UEFI固件设置进入BIOS" class="headerlink" title="（方法2）：通过UEFI固件设置进入BIOS"></a>（方法2）：通过UEFI固件设置进入BIOS</h3><p>按住shift键别撒手，点击重启电脑，电脑会进行高级启动。</p><p>选择右边“疑难解答”。</p><p><img src="https://i.loli.net/2021/09/16/63dvyJtGhEY1LuN.png" alt="选择疑难解答.png"></p><p>然后选择“高级选项”，</p><p><img src="https://i.loli.net/2021/09/16/8H5Q2jMyLahi4qY.png" alt="选择高级选项.png"></p><p>选择“ UEFI固件设置”，</p><p><img src="https://i.loli.net/2021/09/16/9ZSk1fW4gcvLy6q.png" alt="选择UEFI固件设置.png"></p><p>现在将刚刚那个系统U盘插入电脑，</p><p>点击“重启”，通过UEFI固件设置进入BIOS。</p><p><img src="https://i.loli.net/2021/09/16/UqjR6bwXEaCQZuI.png" alt="选择重启以更改UEFI固件设置.png"></p><h2 id="2、对BIOS进行U盘启动设置"><a href="#2、对BIOS进行U盘启动设置" class="headerlink" title="2、对BIOS进行U盘启动设置"></a>2、对BIOS进行U盘启动设置</h2><p>（以下内容，不同电脑操作键可能有差别，不同的主板BIOS的界面也是不同的）</p><h3 id="（1）设置Secure-Boot"><a href="#（1）设置Secure-Boot" class="headerlink" title="（1）设置Secure Boot"></a>（1）设置Secure Boot</h3><p>通过方向键，往右选择Security，再往下选择Security Boot，回车。</p><p><img src="https://i.loli.net/2021/09/17/qbZ8FyNjBWfQPxa.png" alt="选择Security.png"></p><p>选中SecureBoot并回车，上下键更改为Disabled，回车选中。</p><p>这里的作用是禁用UEFI安全启动（Disable Secure Boot for ASUS Motherboard），</p><p>因为如果主板设置了uefi安全启动，会与ubuntu安装的的第三方驱动发生冲突。</p><p><img src="https://i.loli.net/2021/09/17/R6lr4bmBzTwYCoq.png" alt="更改SecureBoot值.png"></p><p>按Esc退出Security。</p><h3 id="（2）将USB-HDD置顶"><a href="#（2）将USB-HDD置顶" class="headerlink" title="（2）将USB HDD置顶"></a>（2）将USB HDD置顶</h3><p>通过方向键，往右选择Starup，再往下选择Boot，回车。</p><p><img src="https://i.loli.net/2021/09/17/F687eEnKyoS4Db5.png" alt="选择Starup.png"></p><p>通过上下键选到USB HDD，</p><p>它后面的单词是我这次使用的U盘的牌子：金士顿（Kingston）</p><p><img src="https://i.loli.net/2021/09/17/rbDkoWGfv6ijN5K.png" alt="选择Ubuntu系统.png"></p><p>通过按 “+”（加号键）把Ubuntu系统顺序设为首位，（其他笔记本请参考你们的按键）</p><p>这里的作用是更改Ubuntu与Windows的启动顺序。</p><p><img src="https://i.loli.net/2021/09/17/zS13kqeAhCPXVdf.png" alt="把Ubuntu顺序置顶.png"></p><p>按 “F10” 保存退出。</p><h1 id="六、安装Ubuntu"><a href="#六、安装Ubuntu" class="headerlink" title="六、安装Ubuntu"></a>六、安装Ubuntu</h1><p>上一个操作完成后出现四行黑屏代码，</p><p>通过上下键选择第二行的Install Ubuntu并回车，进行安装Ubuntu。</p><p><img src="https://i.loli.net/2021/09/17/E9dw6Th4yrYAJgG.png" alt="U盘安装界面.png"></p><p>启动中，静静等待。</p><p><img src="https://i.loli.net/2021/09/17/wdQVUAak7cN26bP.png" alt="Ubuntu系统启动中.png"></p><h2 id="1、欢迎"><a href="#1、欢迎" class="headerlink" title="1、欢迎"></a>1、欢迎</h2><p>左边语言选择中文简体，然后选择右边安装Ubuntu，</p><p><img src="https://i.loli.net/2021/09/17/DZ9z4NxmIoKsBGu.png" alt="安装Ubuntu.png"></p><h2 id="2、键盘布局"><a href="#2、键盘布局" class="headerlink" title="2、键盘布局"></a>2、键盘布局</h2><p>默认中文就行，继续，</p><p><img src="https://i.loli.net/2021/09/17/89UcG6fWsBFA1oT.png" alt="安装Ubuntu-2-键盘布局.png"></p><h2 id="3、无线网络"><a href="#3、无线网络" class="headerlink" title="3、无线网络"></a>3、无线网络</h2><p>可以先跳过不连接，你选择现在连上也当然可以，下面继续。</p><h2 id="4、更新和其他软件"><a href="#4、更新和其他软件" class="headerlink" title="4、更新和其他软件"></a>4、更新和其他软件</h2><p>我选择最小安装（这个选项也是速度最快的），不安装多余应用，以后需要用到了再说。</p><p>当然你可以选择正常安装，会给你安装一些办公软件、游戏和媒体播放器啥的，不过时间会很长。</p><p><img src="https://i.loli.net/2021/09/17/25A8p4Vh71lXgoD.png" alt="安装Ubuntu-4-更新和其他软件.png"></p><h2 id="5、安装类型"><a href="#5、安装类型" class="headerlink" title="5、安装类型"></a>5、安装类型</h2><p>第一次安装的朋友在这一步请注意！！！一定要选“其他安装”！！！另一个选项会清除整个磁盘的所有文件，也就是你的Windows系统会被刷机！！！手别抖！！！一定要选“其他安装”！！！</p><p><img src="https://i.loli.net/2021/09/17/zTCJ94eYHZNAgpM.png" alt="安装Ubuntu-5-安装类型.png"></p><div class="note default no-icon flat"><p>接下来我们对Ubuntu进行分区，在分区之前先介绍一下Linux的文件系统：</p><p><b>/boot</b>:存放linux内核，用来引导系统的。如果是Legacy启动就要设置引导，UEFI就不用设置这个（UEFI要设置EFI引导区）</p><p><b>swap</b>：交换区，用作虚拟内存，这个一般和自己的物理内存一般大</p><p><b>/</b>：根目录，主要用来存放Linux系统文件</p><p><b>/usr</b>:存放用户程序，一般在/usr/bin中存放发行版提供的程序，用户自行安装的程序默认安装到/usr/local/bin中</p><p><b>/home</b>:存放用户文件</p></div><p>滚动鼠标滑轮，找到与你刚刚在Windows系统里分配给Ubuntu的相近大小的那个“空闲”磁盘空间（freespace），就像我刚刚给Linux分了50G大小，我就要选择下图那个50多个G（53688MB）的那个空闲空间。</p><p><img src="https://i.loli.net/2021/09/17/eWngyC5Zk7p12YR.png" alt="安装Ubuntu-5-安装类型2.png"></p><h3 id="（1）分配swap交换区"><a href="#（1）分配swap交换区" class="headerlink" title="（1）分配swap交换区"></a>（1）分配swap交换区</h3><p>选中那个空闲空间，点击左下角加号“+”，会弹出一个弹窗，</p><p>听朋友说，如果运行内存足够，其实swap交换区不设置也行，</p><p>我的电脑运行内存有8G的物理内存，应该够用，所以这个swap虚拟内存我就不设置很大了</p><p><img src="https://i.loli.net/2021/09/17/1XVhQPyb6ogli5D.png" alt="电脑物理内存RAM.png"></p><p>大小我给了1G，即“<b>1024MB</b>”，</p><p>分区选择第二个“<b>逻辑分区</b>”，位置选择“<b>空间起始位置</b>”，</p><p>用于“<b>交换空间</b>”，挂载点填“ / ”，也就是用来存放Linux系统文件的根目录，</p><p><img src="https://i.loli.net/2021/09/17/qdXYcKBo4h8fARV.png" alt="分配swap分区.png"></p><p>然后点击OK。</p><h3 id="（2）分配EFI引导区"><a href="#（2）分配EFI引导区" class="headerlink" title="（2）分配EFI引导区"></a>（2）分配EFI引导区</h3><p>选中那个空闲空间，点击左下角加号“+”，</p><p>大小我给了“<b>100MB</b>”，</p><p>分区选择“<b>逻辑分区</b>”，位置选择“<b>空间起始位置</b>”，</p><p>用于“<b>EFI系统分区</b>”模式，</p><p><img src="https://i.loli.net/2021/09/17/7lJksmynocCp6OA.png" alt="分配EFI引导.png"></p><p>然后点击OK。</p><h3 id="（3）分配-分区（根目录）"><a href="#（3）分配-分区（根目录）" class="headerlink" title="（3）分配 / 分区（根目录）"></a>（3）分配 / 分区（根目录）</h3><p>选中那个空闲空间，点击左下角加号“+”，</p><p>相当于Windows的C盘，</p><p>大小我给了10 G，即“<b>10240MB</b>”，</p><p>分区选择第一个“<b>主分区</b>”，位置选择“<b>空间起始位置</b>”，</p><p>用于“<b>Ext4日志文件</b>”，挂载点填“<b>/</b> ”，</p><p><img src="https://i.loli.net/2021/09/17/HoxtLwAl6JIyVZF.png" alt="分配根目录.png"></p><p>然后点击OK。</p><h3 id="（4）分配home分区"><a href="#（4）分配home分区" class="headerlink" title="（4）分配home分区"></a>（4）分配home分区</h3><p>选中那个空闲空间，点击左下角加号“+”，</p><p>相当于Windows的C盘下的“我的文档”，</p><p>大小：如果你不分配其他分区的话，那个空闲空间的剩余大小全给它就行，</p><p>分区选择“逻辑分区”，位置选择“空间起始位置”，</p><p>用于“Ext4日志文件”，挂载点填“ /home ”，</p><p><img src="https://i.loli.net/2021/09/17/pKl2DcEh5NU8Fxi.png" alt="分配home分区.png"></p><p> 然后点击OK。</p><h3 id="（5）分配一些其他区"><a href="#（5）分配一些其他区" class="headerlink" title="（5）分配一些其他区"></a>（5）分配一些其他区</h3><p>我只是初学，暂时用不到那么多的分区，所以把50多G空间都分给了上面那几个分区。想分其他分区的朋友们，感兴趣可以自行了解。</p><h3 id="（6）选择“安装启动引导器的设备”"><a href="#（6）选择“安装启动引导器的设备”" class="headerlink" title="（6）选择“安装启动引导器的设备”"></a>（6）选择“安装启动引导器的设备”</h3><p>下面那个“安装启动引导器的设备”选择我们刚刚分配的EFI引导区，</p><p>注意不要选成Windows的efi了！</p><p><img src="https://i.loli.net/2021/09/17/lJ7sgCqBkcRHmwD.png" alt="Windows的EFI.png"></p><p>而是要选刚刚咱们分配给Ubuntu的efi，比如我刚刚分配的100M的那个，</p><p><img src="https://i.loli.net/2021/09/17/XTROxJWrIV2Zitk.png" alt="Ubuntu的EFI.png"></p><h2 id="6、立即安装"><a href="#6、立即安装" class="headerlink" title="6、立即安装"></a>6、立即安装</h2><p>选择现在安装，</p><p>确认一下信息，无误后继续写入磁盘，</p><p><img src="https://i.loli.net/2021/09/17/Ld8GxMP6bqAW1pI.png" alt="安装Ubuntu-5-写入磁盘.png"></p><p>时区选默认的上海就可以，点击继续，</p><p><img src="https://i.loli.net/2021/09/17/9mndRu2AZiJeDow.png" alt="安装Ubuntu-6-时区.png"></p><p>下面的三个名字全输一样的就行，也别太长，</p><p>密码建议000000，或者123456等容易记忆又方便的，因为以后会经常输入。</p><p>选择“登录时需要密码”，点击继续。</p><p><img src="https://i.loli.net/2021/09/17/h2OetW1bGvC5EBy.png" alt="安装Ubuntu-7-名称与密码.png"></p><p>下面开始安装，漫长的等待中你可以看看轮播图了解一下Ubuntu。</p><p><img src="https://i.loli.net/2021/09/17/6nmAjvL4c1xY8zD.png" alt="安装Ubuntu-安装中.png"></p><p>然后Ubuntu安装成功，现在重启。</p><p><img src="https://i.loli.net/2021/09/17/M52mDN3kLBOEwjd.png" alt="Ubuntu安装成功-等待重启.png"></p><p>这个页面提示我们拔出U盘，并按下回车。</p><p><img src="https://i.loli.net/2021/09/17/lVNZsPtizORXuSr.png" alt="Ubuntu提醒拔出U盘并回车.png"></p><p>下面进入了Ubuntu的grub引导界面，以后电脑每次开机时都会出现，</p><p>可以通过上下键选择进入Ubuntu系统还是Windows系统，如下图：</p><p>选择第一行按回车就是进入Ubuntu，</p><p>选择第三行按回车就是进入Windows，</p><p>第二行和第四行不用管，</p><p>长时间不选择，默认进入第一个。</p><p><img src="https://i.loli.net/2021/09/17/i4xwUGeLNk75tOY.png" alt="双系统的进入选择界面.png"></p><p>安装完成后第一次打开时会有几个窗口，除了“Help Improve Ubuntu”那个窗口选择第二个选项<code>No</code>（不发送系统信息）之外，其他全跳过就行了。</p><p>这样我们就能使用Ubuntu系统了。</p><p>本文仅供参考，我是初学Linux，电脑磁盘容量不是很多，所以只分了50 G，<br>我所观看的教程中大多都是分配上百G，请根据你的情况进行合理调整分区大小。<br>若有疏漏之处，欢迎评论或联系我指出。</p><hr><h1 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h1><p>十分感谢网上朋友们的无私分享，包括但不限于：</p><p><a href="https://www.bilibili.com/video/BV11k4y1k7Li">【ubuntu20.04】10分钟win10安装ubuntu20.04双系统（无需Bios设置）_哔哩哔哩_bilibili</a></p><p><a href="https://blog.csdn.net/s717597589/article/details/79117112?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163128527816780255211054%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=163128527816780255211054&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-2-79117112.pc_v2_rank_blog_default&utm_term=Win10%E5%AE%89%E8%A3%85Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%90%ABBIOS%E6%93%8D%E4%BD%9C%EF%BC%89&spm=1018.2226.3001.4450">win10下安装Ubuntu16.04双系统_蔚然成风shang的博客-CSDN博客_win10安装ubuntu</a></p><p><a href="https://www.bilibili.com/video/BV1F44y1m7ZL/?spm_id_from=333.788.b_7265636f5f6c697374.2">Win10与Ubuntu双系统安装（绝对新手向）_哔哩哔哩_bilibili</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo博客】如何开始创作与更换好看的主题样式</title>
      <link href="/2021/09/16/2021-2/"/>
      <url>/2021/09/16/2021-2/</url>
      
        <content type="html"><![CDATA[<p>我先讲如何发布新的文章帖</p><h1 id="创作文章"><a href="#创作文章" class="headerlink" title="创作文章"></a>创作文章</h1><p>在上一篇文章中提到，初始化hexo博客后我们获得了它自动为我们生成的博客页面，同时还给我们生成了一个标题为“Hello World”的帖子。</p><p><img src="https://i.loli.net/2021/09/16/5B9MpQ3FWmbUuKC.png" alt="hexo博客搭建成功页面.png"></p><p>那么我们以后如何写新帖子发布到我们的博客网站呢？</p><p>打开“命令提示符窗口”进行操作，即之前用到的 cmd 终端窗口，</p><p>通过 cd 命令进入你电脑存放博客的文件夹，</p><p>（不知道怎么进入的朋友请拉到本文底部查看上篇文章）</p><h2 id="一、创建新帖子"><a href="#一、创建新帖子" class="headerlink" title="一、创建新帖子"></a>一、创建新帖子</h2><p>输入以下命令，并回车：</p><p>双引号内文字即为你要新建的文章帖子的标题，也会作为该文章的链接地址，<br>注意是英文输入法下的双引号！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;我的第一篇博客文章&quot;</span></span><br></pre></td></tr></table></figure><p> （或缩写成：hexo n “我的第一篇博客文章”）</p><p>回车后不一会儿，它提示我 <code> Barry-Flynn.github.io\source_posts\我的第一篇博客文章.md </code> 文件已经建好了。你会发现该文件后缀名是“.md”，没错，Hexo 默认我们用 Markdown 格式书写文章。</p><div class="note blue no-icon flat"><p>其实，Hexo 支持以任何格式书写文章，只要安装了相应的渲染插件。</p><p>例如，Hexo 默认安装了 hexo-renderer-marked 和 hexo-renderer-ejs，因此你不仅可以用 Markdown 写作，你还可以用 EJS 写作。如果你安装了 hexo-renderer-pug，你甚至可以用 Pug 模板语言书写文章。</p><p>只需要将文章的扩展名从 md 改成 ejs，Hexo 就会使用 hexo-renderer-ejs 渲染这个文件，其他格式同理。</p></div><p>现在，我之前让大家下载的VSCode编辑器这时候就派上用场了，当然，如果你对Markdown非常熟悉也有自己用的顺手的编辑器的话，当然可以根据你自己的习惯使用别的编辑器进行写作，但本文章仅使用VSCode进行演示。</p><h2 id="二、开始写作"><a href="#二、开始写作" class="headerlink" title="二、开始写作"></a>二、开始写作</h2><p>双击打开VSCode，</p><p>点击左上角“文件”，点击“选择文件”，</p><p>找到刚刚新建的“ <code> 我的第一篇博客文章.md </code> ” 并打开，</p><p>现在可以开始你的创作之旅了。</p><div class="note blue no-icon flat"><p>如果不会用Markdown语法书写文章的话可以在其他地方学习一下，</p><p>或进入官网进行学习：<a href="markdown-zh.readthedocs.io"> Markdown 中文文档 </a></p></div><p>写完后 <code> Ctrl+S </code> 保存你的文章（或点击vscode左上角“文件”，然后“保存”），关闭vscode。</p><p>插个话，我写文章的时候习惯用 <code> hexo s </code> 命令打开本地服务器预览，一边写文章，一边刷新 <a href="http://localhost:4000/">http://localhost:4000/</a> ，以此来查看我博客的实时效果。</p><p>当然，你也可以打开 vscode 右上角“侧边预览”小按钮实时查看效果：<br><img src="https://i.loli.net/2021/09/16/89zcNmhr7DbVKwJ.png" alt="我的第一篇博客vscode截图.png"></p><p>甚至你还可以给 vscode 安装小插件去得到一些更加丰富的功能和体验。</p><h2 id="三、提交到GitHub"><a href="#三、提交到GitHub" class="headerlink" title="三、提交到GitHub"></a>三、提交到GitHub</h2><p>我们需要对两个分支分别提交文件：</p><h3 id="1、main分支进行博客更新"><a href="#1、main分支进行博客更新" class="headerlink" title="1、main分支进行博客更新"></a>1、main分支进行博客更新</h3><p>下面这三句命令将是你以后每次写完文章后发布到main分支（存放的是你 hexo g 后的生成文件，即静态展示网页）时所需要输入的：<br>三行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean （清理缓存，可选用）</span><br><span class="line"> </span><br><span class="line">hexo g （生成资源文件）</span><br><span class="line"> </span><br><span class="line">hexo d （部署到服务器）</span><br></pre></td></tr></table></figure><p>其实这时候如果你刷新你的网站看一下，文章已经更新发布了，但我们还最好备份一下hexo分支代码到GitHub上，万一某一天咱们本地的代码出问题了，就可以直接从GitHub上克隆备份。</p><h3 id="2、hexo分支进行源码备份"><a href="#2、hexo分支进行源码备份" class="headerlink" title="2、hexo分支进行源码备份"></a>2、hexo分支进行源码备份</h3><p>如果嫌每次写完一篇文章都要备份 hexo 源文件分支很麻烦的话，你可以只对上面 main分支进行博客更新 ，这个hexo分支你自己想着去定期备份就行了（比如发布两三篇文章备份一次 / 每隔两天备份一次），或者你可以去了解一下如何实现自动部署。</p><p>我反正不觉得这个麻烦，也就三行命令。</p><p>下面这三句命令将是你以后每次想备份hexo分支（博客源代码文件）时所需要输入的：<br>三行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">（添加到缓存区）</span><br><span class="line">git add -A</span><br><span class="line"> </span><br><span class="line">（这次做了什么更改，简单描述下即可）</span><br><span class="line">git commit -m &quot;你的更新描述&quot;</span><br><span class="line"> </span><br><span class="line">（推送至远程仓库）</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>国内网络有时候很卡会导致最后一步 push 不上去而报错，该如何做你懂的吧？<br>多 push 几次，或者那个啥…咳咳…</p><hr><p>下面讲如何更换博客主题</p><h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><p>这是我们未更换前，默认主题的博客效果：</p><p><img src="https://i.loli.net/2021/09/16/5B9MpQ3FWmbUuKC.png" alt="hexo博客搭建成功页面.png"></p><h2 id="1、挑选Hexo主题"><a href="#1、挑选Hexo主题" class="headerlink" title="1、挑选Hexo主题"></a>1、挑选Hexo主题</h2><p>去哪挑选心仪的主题呢？</p><p>去官方文档给的链接地址：<a href="https://hexo.io/themes/"> Themes | Hexo </a> ，那里有好几百款其他大佬们制作好的主题。</p><p>此外还可以去某乎上或其他地方看看别人分享的好看的主题样式，如果实在没有合自己口味的，先选个差不多的凑合用吧，反正之后可以对主题进行个性化配置或者根据喜好进行魔改。</p><p>我这次演示的主题叫“ Butterfly ”，<br>作者演示的博客示例效果请见下方链接：<br> <a href="https://butterfly.js.org/"> Butterfly - A Simple and Card UI Design theme for Hexo </a><br>网友朋友们使用 Butterfly 主题后的博客：<br> <a href="https://butterfly.js.org/link/"> 可以看到很多朋友进行了魔改 </a></p><p>该主题的GitHub地址是：<br>🦋 A Hexo Theme: Butterfly<br><a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a></p><h2 id="2、安装Hexo主题"><a href="#2、安装Hexo主题" class="headerlink" title="2、安装Hexo主题"></a>2、安装Hexo主题</h2><p>方法很简单，就一行克隆命令。</p><p>老规矩，打开cmd，通过cd命令进入存放你博客源文件的文件夹进行操作，<br>（后面地址替换成你所选择的主题的GitHub项目地址）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>想和我安装一个主题的朋友们注意一下，<br>Butterfly 主题的作者在 GitHub 建了两个分支，<br>为了追求稳定，这行命令安装的是其稳定分支 （master分支），<br>当然你也可以选择去安装作者的开发测试版（dev分支），但可能存在 bug。</p><p>回车后非常快，就在本地克隆下载好了，这时可以发现在themes（主题）文件夹下出现了butterfly的文件夹。</p><h2 id="3、应用Hexo主题"><a href="#3、应用Hexo主题" class="headerlink" title="3、应用Hexo主题"></a>3、应用Hexo主题</h2><h3 id="1-更换主题"><a href="#1-更换主题" class="headerlink" title="1.更换主题"></a>1.更换主题</h3><p>用 VScode 打开 Hexo 根目录（博客源文件的文件夹）下的<code> _config.yml </code>，</p><p>拉到代码最下面，把主题（默认是<code> theme: landscape </code>）修改 为butterfly，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><p>Ctrl+S保存，最小化VScode。</p><h3 id="2-安装插件"><a href="#2-安装插件" class="headerlink" title="2.安装插件"></a>2.安装插件</h3><p>注意我这里安装插件的原因是该butterfly主题的HTML文件和CSS样式文件是用 pug 以及 stylus 写出来的，不安装没法正常显示。你们安装与否请参考你们所选主题的安装文档。</p><p>选择了 butterfly 主题，如果你没有 pug 以及 stylus 的渲染器，请下载安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>在国内下载过程可能会很慢，可以咳咳咳一下那个墙….</p><h3 id="3-查看效果"><a href="#3-查看效果" class="headerlink" title="3.查看效果"></a>3.查看效果</h3><p>我们先清理一下，<br><code>hexo clean</code></p><p>再生成一下，<br><code>hexo g</code></p><p>启动一下本地的服务器先瞅瞅，<br><code>hexo s</code></p><p> 浏览器地址栏输入：<code> <a href="http://localhost:4000/">http://localhost:4000</a> </code><br><img src="https://i.loli.net/2021/09/16/NkcuL2GjeaVvoFy.png" alt="更换butterfly主题后的博客.png"></p><p>OK，更换成功！之后进行一些简单的配置更改就行了。Ctrl+C关闭本地预览。</p><hr><p>接下来是博客主题的个性化配置<br>这个因主题不同而不同，<br>请参考你所选择的主题的作者给的文档教程<br>这里我列出我现在目前使用的Butterfly主题的作者撰写的文档教程</p><h1 id="个性化配置"><a href="#个性化配置" class="headerlink" title="个性化配置"></a>个性化配置</h1><p>Butterfly 主题的作者文档教程：</p><p><a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a><br><a href="https://butterfly.js.org/posts/dc584b87/">Butterfly 安装文档(二) 主题页面</a><br><a href="https://butterfly.js.org/posts/4aa8abbe/">Butterfly 安装文档(三) 主题配置-1</a><br><a href="https://butterfly.js.org/posts/ceeb73f/">Butterfly 安装文档(四) 主题配置-2</a><br><a href="https://butterfly.js.org/posts/98d20436/">Butterfly 安装文档(五) 主题问答</a><br><a href="https://butterfly.js.org/posts/4073eda/">Butterfly 安装文档(六) 进阶教程</a><br><a href="https://butterfly.js.org/posts/198a4240/">Butterfly 安装文档(七) 更新日誌</a><br>以及一些其他功能的实现，都请前往Butterfly主题作者的网站进行查找。</p><hr><h1 id="我的陌生知识点积累"><a href="#我的陌生知识点积累" class="headerlink" title="我的陌生知识点积累"></a>我的陌生知识点积累</h1><ul><li><p>pug ：一个HTML模板引擎<a href="https://pugjs.org/zh-cn/api/getting-started.html"> Pug中文文档 - 入门指南 </a>，效果示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--pug--&gt;</span><br><span class="line">&lt;template lang=&quot;pug&quot;&gt;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.box</span></span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.box1</span></span><br><span class="line">            <span class="selector-tag">div</span><span class="selector-class">.box2</span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--解析成<span class="selector-tag">HTML</span>后--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;box&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;box1&quot;&gt;</span><br><span class="line">            &lt;<span class="selector-tag">div</span> class=&quot;box2&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>stylus ：Stylus 是一款 CSS 的预处理器，也就是我们常说的 CSS 框架，语法示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span></span><br><span class="line">  <span class="attribute">font</span>: <span class="number">12px</span> Helvetica, Arial, sans-serif;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.button</span></span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  -moz-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 博客折腾记 </tag>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
            <tag> VScode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo博客】从0开始进行搭建并部署到GitHub</title>
      <link href="/2021/09/15/2021-1/"/>
      <url>/2021/09/15/2021-1/</url>
      
        <content type="html"><![CDATA[<!--深灰--><div class="note blue no-icon flat"><p>【注意】：本文纯属才疏尚浅的我以笔记的形式进行的记录，很多知识其实我也不是太懂，可能存在理解偏差和认知错误，来学习的朋友们请自己甄别，路过的大神们也别喷我哈哈，有什么问题和建议可以评论提出或者其它方式联系我。我会尽可能保持更新该文章所使用到的技术和做法，并随时接受勘误。</p></div><div class="note green no-icon flat"><p>右下角设置可调为夜间模式阅读文章<br>PC端目录在侧边栏或右下角，手机端目录在右下角<br>点击目录可跳转到文章相应部分（本文强烈建议在PC端观看）<br>PC端右下角设置也可隐藏侧边栏，或者进入纯净的阅读模式</p></div><div class="note red no-icon flat"><p>本篇文章为 <a href="https://barry-flynn.github.io/">百里飞洋丨Barry Flynn</a> 版权所有，<br>转载与分享请务必携带原文链接：<a href="https://barry-flynn.github.io/2021/09/15/2021-1/">https://barry-flynn.github.io/2021/09/15/2021-1/</a><br>侵权必究！！！</p></div><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>&emsp;&emsp;每当在大佬们群里划水的时候，身为<big> <del>大佬</del> </big>菜鸡，总是很羡慕他们拥有自己的域名和博客。但由于我还是初学计算机的学生，买域名或者租云服务器主机其实也并不是很急迫的事情 <del>（才不是因为不想掏那份钱哈哈哈）</del> ，主要我是怕买了之后不会用，在那一边闲着 haha~ 因此我选择了 Hexo 作为我的博客框架，花了一两天时间，查找翻阅网上各种教程，将 Hexo 成功部署到了 GitHub Pages，建立了人生第一个真正属于自己的个人（博客）网站。</p><ul><li><p>什么是Hexo？<br>&emsp;&emsp;Hexo 是一个快速、简洁而强大的博客框架，基于 Node.js，同样托管于 GitHub 之上。生态中拥有众多插件主题。你可以基于它快速生成一些静态页面。你可以使用别人的各种主题与插件，也可以自己定制开发想要的功能。</p></li><li><p>为什么选择了Hexo而没有选择其他的？<br>&emsp;&emsp;其他常用的博客框架还有 <a href="https://wordpress.org/">WordPress</a>，<a href="https://typecho.org/">Typecho</a>，<a href="https://ghost.org/">Ghost</a> 等，但这些往往都需要购置自己的服务器，而无法静态化地部署到 GitHub Pages 上。个人博客的话，用 Hexo 完全不需要去另外购买空间，不需要有虚拟主机或者云服务器，可以直接托管到 Github、coding、gitee 等托管平台，免费提供的空间就完全足够了，毕竟一篇写完的文章大小都是kb级别的。<br>&emsp;&emsp;第二，因为 Hexo 是完全使用 markdown 文件写的博客（一种介于txt文本和Word文档之间的一种格式），后期备份和迁移非常方便。我的危机意识比较强，特别不放心那些空间商的数据库和空间的安全性，生怕某一天网站崩了就全没了。<br>&emsp;&emsp;第三，Hexo 生成的属于静态网站，体积小，访问速度快，性能更优，而且纯静态的方便网站的 SEO （搜索引擎优化）。</p></li></ul><div class="note default no-icon flat"><p>&emsp;&emsp;静态网站生成器还有 <a href="https://vuepress.vuejs.org/">Vuepress</a>，<a href="https://www.gatsbyjs.org/">Gatsby</a> 等。但这些多是为了写文档而量身定制的，你也可以使用它们，但是相较 Hexo 的博客定位，它们关于博客的插件和主题以及解决办法会少得多。<br>&emsp;&emsp;虽然Hexo 提供的功能 <a href="https://gohugo.io/">Hugo</a> 几乎都有，（生成大量文件时，甚至比 Hexo 更快）不过它是基于 GO 语言。日后你想对自己的网站进行自定义，即便是 Hugo，你编写前端的交互仍旧需要使用 JavaScript，所以选择基于 JavaScript 的 Hexo 可以降低学习成本。（你若对 GO 有兴趣，仍然可以自己尝试使用 Hugo）<br>&emsp;&emsp;所以对于新手来说，使用 Hexo 作为起始点，不失为一个好选择。（当然如果你有钱租服务器，并希望快速上手的话，就可以考虑考虑 WordPress 或者 Typecho）<br><em>——（云游君）</em></p></div><ul><li>为什么选择率先部署到 GitHub 而不是其他平台？<br>&emsp;&emsp;GitHub是一个面向开源及私有软件项目的托管平台，也是世界上最大的代码托管平台，因为只支持Git作为唯一的版本库格式进行托管，故名GitHub。GitHub中文社区,是国内领先的开源社区,是一个可以发现优质开源项目的地方。（由于程序员大多是男性，GitHub又被戏谑地调侃成全球最大同性交友网站”Gayhub”，哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈……咳咳，说多了）<br>&emsp;&emsp;Hexo 配合 GitHub 的 actions 或其他 CI/CD，比如 cycleci 等，能做到一键部署、发布。国内的代码托管平台比如 coding 和 gitee（码云）的服务可能没有GitHub全面，开源项目也少，也没有GitHub的社区归属感强，所以一般选择GitHub托管代码。（我不久之后可能也会选择 coding 或 gitee 啥的国内平台也同步备份和托管博客啥的了，因为GitHub服务器在国外，有时候访问我这个博客，那个网速啊真一言难尽……平时不卡的时候只能说还行吧）</li></ul><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><h2 id="一、用GitHub创建仓库"><a href="#一、用GitHub创建仓库" class="headerlink" title="一、用GitHub创建仓库"></a>一、用GitHub创建仓库</h2><h3 id="1-注册GitHub账号"><a href="#1-注册GitHub账号" class="headerlink" title="1. 注册GitHub账号"></a>1. 注册GitHub账号</h3><p>（有账号的可跳过此步骤）<br>&emsp;&emsp;虽然都是英文，但不必畏惧，也并不会造成使用障碍，只要记得最常用的选项含义即可，以及善用浏览器的网页翻译功能和手头的翻译软件。</p><!--深灰--><div class="note default no-icon flat"><p>注意：注册时的英文用户名将成为你可以使用的免费域名前缀。</p></div><p><img src="https://i.loli.net/2021/09/15/uIVQoxiedS41ZXp.jpg" alt="注册GitHub账号.jpg"></p><p>注册流程非常简单，这里不再赘述。</p><h3 id="2-创建一个新的项目"><a href="#2-创建一个新的项目" class="headerlink" title="2. 创建一个新的项目"></a>2. 创建一个新的项目</h3><p>单击 右上角【+】- New Repository 新建项目（以下简称仓库），然后填写项目信息。<br>仓库的名字格式应为：<code>你的用户名.github.io</code></p><div class="note default no-icon flat"><p>为什么必须这个作为仓库名？<br>因为这是GitHub Pages 服务的命名规范，同时它也将成为你的专属域名。当然，你也可以购置自己的专属域名并用它来提供内容。</p></div><p>比如我的用户名是Barry-Flynn，那么我的仓库就叫：<code>Barry-Flynn.github.io</code><br>(全部小写更好，有大写也没事，除了有时用大小写切换有一丢丢麻烦外，没有区别）</p><p>在description一栏填写简介，随便填填，比如我填的是：<code>百里飞洋的个人空间</code></p><p><img src="https://i.loli.net/2021/09/15/LXAF5pVCziEPace.png" alt="创建GitHub博客仓库.png"></p><p>然后选择 Public。<br>最后可以选择勾选一下 Initialize the repository with a README。（其实无所谓，此步的作用是用不用生成一个类似仓库说明书的 README.md 文件）<br>完成后点击下面的 Create Repository。</p><h2 id="二、安装-VS-Code"><a href="#二、安装-VS-Code" class="headerlink" title="二、安装 VS Code"></a>二、安装 VS Code</h2><p>&emsp;&emsp;在安装Git之前，我建议先安装<a href="https://code.visualstudio.com/"> VS Code </a>。因为安装 Git Bash 时，可以设置 VS Code 作为默认编辑器。Visual Studio Code，简称 VS Code。目前最为强大易用的编辑器，轻量且快速。<del>（宇宙第一编辑器哈哈哈）</del></p><div class="note default no-icon flat"><p>注意：它并不是我们常常听到的 VS，VS 常常指的是 Visual Studio，是一个功能强大的 IDE（集成开发环境），体积要比 VS Code 都要大上一个量级。</p></div><p>对于它的安装，直接官网下载就行了，免费的，不再赘述。</p><h2 id="三、安装-Git"><a href="#三、安装-Git" class="headerlink" title="三、安装 Git"></a>三、安装 Git</h2><p>&emsp;&emsp;Git 是一个开源的分布式版本控制系统，由 Linus Torvalds（同时也是 Linux 的作者）为了管理 Linux 开发而开发。类似的工具还有：SVN。但始终更推荐 Git，因为它功能更为强大且它的背后还有更强大的生态：GitHub。</p><div class="note default no-icon flat"><p>&emsp;&emsp;简而言之，是一个版本管理工具。譬如设计师设计好了第三版的海报，客户却说还是要第一版吧，这时便可以通过 Git 快速回退到最初的版本。<br>&emsp;&emsp;你只需要把每次更改的状态（Git 会自动进行检测，你只要掌握基础的几条命令就可以了）告诉 Git，而不需要每个版本都保存一份压缩包，既方便也能大大节约空间。<br>&emsp;&emsp;当然这主要只对代码文本起作用，因为 Git 的本质是记录各行代码的增减，倘若是像视频、海报这类二进制文件来说便体现不出丝毫优势了。当然想要应对这种场景还有<a href="https://git-lfs.github.com/"> Git LFS </a>。<br><em>——（云游君）</em></p></div><p>你可以直接去官网下载Git并安装，如果国内网速太慢可以“科学上网”或者从“腾讯软件中心”等平台下载。MacOS 用户可以下载官网的安装包进行安装，也可以直接安装 App Store 的 Xcode（附带会安装 Git，但是比较大）。安装时一路next到底就行了，也可以在网上找教程，我不再多说。</p><h2 id="四、安装-Node-js"><a href="#四、安装-Node-js" class="headerlink" title="四、安装 Node.js"></a>四、安装 Node.js</h2><p>&emsp;&emsp;何为Node.js ？<a href="https://nodejs.org/en/"> Node.js </a>是一个基于Chrome JavaScript 运行时建立的一个平台。简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js是一个事件驱动I/O（计算机接口）服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。<br>&emsp;&emsp;对的，第一次看到这个解释的时候其实我也很难理解，但不妨碍我们用它，想进一步了解的朋友们可以去官网浏览官方文档，或者看看下面这段其他博主的理解。</p><div class="note default no-icon flat"><p>什么是 Node.js ？<br>&emsp;&emsp;这得从什么是 JS 说起，JS 也就是 JavaScript。（为什么有种从盘古开天辟地开始的感觉）没错，JavaScript 就是网页的盘古。JavaScript 是一种编程语言，我们所见到的网页中的交互和逻辑处理几乎都是由 JavaScript 完成。JavaScript 语法简单，易学易用。（当然也请不要小瞧它，虽然它入门门槛低，但上限同样也很高。包括但不限于实现网站前后端，手机桌面应用程序，机器学习，计算机图形学等。）在 Node.js 诞生前，JavaScript 都运行于浏览器端。<br>&emsp;&emsp;也就是说，它是鱼，浏览器是装满了水的水缸。2008 年，Chrome V8 诞生。2009 年，Node.js 诞生。并成为 GitHub 早期最著名的开源项目。GitHub 可能大家已有所了解，后续再说。<br>&emsp;&emsp;Node.js 便是一个基于 Chrome V8 引擎的 JavaScript 运行环境。（当年第一次看到这句话时，我也一脸懵逼。）按照我的理解，JavaScript 是鱼，Chrome V8 就是抽水机，Node.js 则把这台抽水机也装在你电脑上。于是你的电脑也有了 Node.js 这个和浏览器相似的水缸，也可以在里面运行 JavaScript 了！当然 Node.js 和浏览器端还是因为自身定位和一些历史原因而有些许区别的，不再展开。<br><em>——（云游君）</em></p></div><p>建议下载<b>长期支持版(LTS)</b>而非<b>当前发布版</b>（因为如果是最新版，容易出现一些奇妙的 bug）。</p><p>全部默认下一步进行安装。然后，<br>Windows 用户打开命令提示符，即按住键盘 Win+R，输入<code> cmd </code>然后回车，弹出黑色代码窗口。（本文以 Windows10 为例）</p><div class="note default no-icon flat"><p>MacOS 用户打开终端。<br>Linux 用户右上角关闭本标签页。</p></div><p>后续如提到输入命令，均默认指打开终端进行输入。</p><p>输入<code> node --version </code>回车，如果得到的版本号与你方才安装的一致，那么 Node.js 就已经成功安装。</p><p>Node.js 安装成功时也默认安装了 npm，在此后将会用到。<br>npm 是随 Node.js 一起被安装的包管理工具，你可以理解成 Node.js 自带的应用商店。</p><p>对了，国内使用 npm 可能很慢，你可以“科学的上网”，或者考虑切换为国内镜像源（比如淘宝镜像源），即手动输入以下内容后按回车(也可以Ctrl+C复制和Ctrl+V粘贴以下代码到命令窗口按回车)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>（上面这行切换镜像源方法的代码我没用过，还不确定它的有效性，如果你会“科学的上网”的话不用管这种方法，不会的话可以输入这行命令试一下，没报错就OK，如果报错就自行搜索方法吧先，鄙人实在是不才）</p><h2 id="五、安装Hexo"><a href="#五、安装Hexo" class="headerlink" title="五、安装Hexo"></a>五、安装Hexo</h2><p>&emsp;&emsp;这里是它的官网：<a href="https://hexo.io/"> Hexo </a><br>&emsp;&emsp;这个是它的<a href="https://hexo.io/zh-cn/docs/index.html"> 中文官方文档 </a>（建议收藏，用到了就多看看）<br>&emsp;&emsp;这是它的GitHub项目链接: <a href="https://github.com/hexojs/hexo">https://github.com/hexojs/hexo</a></p><p>如何安装Hexo呢?</p><p>在cmd终端窗口中输入以下命令后回车：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>然后等待一会进度条走完，没报错就代表安装成功。<br>进度条卡住不动可能还是国内网络问题，“科学的上网”哦，咳咳….</p><p>如果安装失败，可能是没有权限，可以尝试头部加上 sudo 重新执行，即输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-cli -g </span><br></pre></td></tr></table></figure><div class="note default no-icon flat"><p>上面命令中，<br><code> install </code>自然是安装。<br><code> hexo-cli </code>则是 hexo 的终端工具，可以帮助你生成一些模版文件，之后再用到。<br><code> -g </code>代表的是全局安装。也就是在任何地方都可以使用，否则会只能在安装的目录下使用。</p></div><h1 id="正式操作"><a href="#正式操作" class="headerlink" title="正式操作"></a>正式操作</h1><h2 id="六、初始化-Hexo-工程"><a href="#六、初始化-Hexo-工程" class="headerlink" title="六、初始化 Hexo 工程"></a>六、初始化 Hexo 工程</h2><p>&emsp;&emsp;注意：接下来应该是你自己的自定义的目录，请不要完全复制粘贴我的！<br>比如说我是Windows用户，想把我的网站代码以后都储存在<br>电脑 E 盘的<code> BarryFlynn\Github\ </code>文件夹下<br>那么我要先在E盘建立相应的文件夹，然后再继续操作。<br>由于cmd终端最开始默认在C盘操作，我得先切换到E盘，那么我要输入<code> E: </code>然后回车,即我会看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Microsoft Windows [版本 10.0.19042.1165]</span><br><span class="line">(c) Microsoft Corporation。保留所有权利。</span><br><span class="line"> </span><br><span class="line">C:\Users\10272&gt;E:</span><br><span class="line"> </span><br><span class="line">E:\&gt;</span><br></pre></td></tr></table></figure><p>然后此时，我要通过 cd 命令进入我本地电脑打算存储网站代码的文件夹目录。（或者右键文件夹 Git Bash Here），即 BarryFlynn\Github\ 文件夹里</p><div class="note default no-icon flat"><p>百度百科：<br><a href="https://baike.baidu.com/item/cd/3516393"> cd | DOS 命令 </a><br><a href="https://baike.baidu.com/item/cd/3516411"> cd （LINUXSHELL 命令） </a></p></div><p>也就是说我需要输入<code> cd BarryFlynn\Github\ </code>然后回车，我会看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E:\&gt;cd BarryFlynn\Github\</span><br><span class="line">E:\BarryFlynn\Github&gt;</span><br></pre></td></tr></table></figure><p>好了成功进入，接下来输入下方代码，再按回车：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init 你的名字.github.io</span><br></pre></td></tr></table></figure><div class="note default no-icon flat"><p><code> hexo </code>：正是因为我们之前安装了 hexo-cli 这一个包，所以我们可以在终端中使用 hexo 这一命令。<br><code> init </code>：用来初始化博客的模版文件。后面跟的是你要新建的文件夹，最好和你此前新建的仓库名一致，比如我的是：<code> Barry-Flynn.github.io </code></p></div><p>然后我会看到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github&gt;hexo init Barry-Flynn.github.io</span><br><span class="line">INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span><br><span class="line">[32mINFO [39m Install dependencies</span><br><span class="line">added 242 packages from 207 contributors in 105.871s</span><br><span class="line"> </span><br><span class="line">15 packages are looking for funding</span><br><span class="line">  run `npm fund` for details</span><br><span class="line"> </span><br><span class="line">INFO  Start blogging with Hexo!</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github&gt;</span><br></pre></td></tr></table></figure><p>下面通过 cd  进入我的博客文件夹，</p><p>即输入 cd Barry-Flynn.github.io 后按回车，我会看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github&gt;cd Barry-Flynn.github.io</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;</span><br></pre></td></tr></table></figure><p>现在我就是处于 E:\BarryFlynn\Github\Barry-Flynn.github.io 文件夹下操作了（你的博客源文件的文件夹当然可以跟我的路径不一致，放到你想放的地方就好，不过也需要参照我的方法用命令进入里面），</p><p>现在在这个文件夹内默认安装所有 <code>package.json</code> 文件中提到的包，<br>即输入<code> npm install </code>然后回车，我会看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;npm install</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.3.2 (node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br><span class="line"> </span><br><span class="line">audited 243 packages in 4.956s</span><br><span class="line"> </span><br><span class="line">15 packages are looking for funding</span><br><span class="line">  run `npm fund` for details</span><br><span class="line"> </span><br><span class="line">found 0 vulnerabilities</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;</span><br></pre></td></tr></table></figure><p>这时候，我的 Barry-Flynn.github.io 文件夹里面会多出一堆文件，<br>文件夹结构应该大致是这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|  ├── _drafts</span><br><span class="line">|  └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>现在我们输入 <code> hexo server </code> 然后回车，会看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;hexo server</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p><code> server </code>代表开启本地的 Hexo 服务器，这时你就可以打开浏览器，在地址栏中输入 localhost:4000 就可以看到本地的网页了。<br><img src="https://i.loli.net/2021/09/16/5B9MpQ3FWmbUuKC.png" alt="hexo博客搭建成功页面.png"></p><p>这个网页就是Hexo为你自动生成的博客页面。<br>按 <code> Ctrl+C </code> 中断服务器的运行，<br>系统提示  终止批处理操作吗(Y/N)?  输入<code> Y </code>然后回车。<br>至此，基础的模版页面便已经搭建好了。</p><h2 id="七、生成静态文件"><a href="#七、生成静态文件" class="headerlink" title="七、生成静态文件"></a>七、生成静态文件</h2><p>&emsp;&emsp;到现在，我们的工作都是在本地进行，想必你也很想放到线上与小伙伴们分享。这便轮到了 GitHub Pages 的出场，不过 GitHub Pages 只支持纯静态文件。</p><p>所以我们需要使用下面一行命令先来生成站点的静态文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line"> </span><br><span class="line">（上方命令也可以缩写为 hexo g）</span><br></pre></td></tr></table></figure><p>输入后回车，我会看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;hexo g</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded in 209 ms</span><br><span class="line">INFO  Generated: archives/index.html</span><br><span class="line">INFO  Generated: archives/2021/index.html</span><br><span class="line">INFO  Generated: archives/2021/08/index.html</span><br><span class="line">(node:20772) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(Use `node --trace-warnings ...` to show where the warning was created)</span><br><span class="line">(node:20772) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:20772) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br><span class="line">(node:20772) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(node:20772) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:20772) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br><span class="line">INFO  Generated: index.html</span><br><span class="line">INFO  Generated: fancybox/jquery.fancybox.min.css</span><br><span class="line">INFO  Generated: js/script.js</span><br><span class="line">INFO  Generated: 2021/08/25/hello-world/index.html</span><br><span class="line">INFO  Generated: css/style.css</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.woff2</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.woff</span><br><span class="line">INFO  Generated: fancybox/jquery.fancybox.min.js</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.ttf</span><br><span class="line">INFO  Generated: css/fonts/FontAwesome.otf</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.eot</span><br><span class="line">INFO  Generated: js/jquery-3.4.1.min.js</span><br><span class="line">INFO  Generated: css/images/banner.jpg</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.svg</span><br><span class="line">INFO  17 files generated in 1.98 s</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;</span><br></pre></td></tr></table></figure><p>此时我的文件夹目录下会出现 public  这个文件夹，里面存放的就是我的站点的静态文件。</p><h2 id="八、与远程仓库建立关联"><a href="#八、与远程仓库建立关联" class="headerlink" title="八、与远程仓库建立关联"></a>八、与远程仓库建立关联</h2><p>接下来我们将本地的仓库与此前在 GitHub 上建立的仓库建立关联。</p><p>输入 <code> git init </code> 初始化 Git 仓库，只需要执行一次即可，以后不用执行了，因为这是进行初始化，看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;git init</span><br><span class="line">Initialized empty Git repository in E:/BarryFlynn/Github/Barry-Flynn.github.io/.git/</span><br></pre></td></tr></table></figure><p>在将其部署到 GitHub Pages 上之前，我们最好先建立一个分支。</p><div class="note default no-icon flat"><p>什么是分支？<br>Git 提供了版本管理功能，其中还有一个分支功能，你现在可以简单地将其理解为平行世界。比如，对同一个文件夹，切换到它的不同的分支会显示不同的文件内容。</p></div><p><code> 你的名字.github.io </code>部署后，GitHub Pages 将默认使用你的 main分支（以前叫 master分支，一个意思，主要分支的意思）作为静态文件部署。所以我们最好新建一个 hexo 分支（命名无所谓）用来存储 Hexo 的源代码，master 分支则用来存储部署后的静态文件。为了方便，不想其他名字了，这个分支我就直接起名叫 hexo 吧。</p><p>新建该分支的命令语句是 <code> git checkout -b hexo </code> ，然后回车，可以看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;git checkout -b hexo</span><br><span class="line">Switched to a new branch &#x27;hexo&#x27;</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;</span><br></pre></td></tr></table></figure><p>这时便成功建立了一个 hexo 分支。（此后基本上所有的命令工作都将在 hexo 分支下进行）</p><div class="note default no-icon flat"><p>你可以通过 git branch -v 来查看当前有哪些分支，使用 git checkout 分支名 来切换到对应的分支。<br>这是一位博主“云游君”的 <a href="https://www.yunyoujun.cn/note/git-learn-note/"> Git 学习笔记 </a></p></div><h2 id="九、部署-main分支"><a href="#九、部署-main分支" class="headerlink" title="九、部署 main分支"></a>九、部署 main分支</h2><p>为了更方便的将博客静态文件（ main 分支）部署到 GitHub Pages 上，Hexo 提供了 hexo-deployer-git 插件。</p><p>老规矩，安装该插件，要输入下面命令，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure><p>回车后可以看到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;npm install hexo-deployer-git</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.3.2 (node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br><span class="line"> </span><br><span class="line">+ hexo-deployer-git@3.0.0</span><br><span class="line">added 1 package from 1 contributor and audited 244 packages in 8.166s</span><br><span class="line"> </span><br><span class="line">15 packages are looking for funding</span><br><span class="line">  run `npm fund` for details</span><br><span class="line"> </span><br><span class="line">found 0 vulnerabilities</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;</span><br></pre></td></tr></table></figure><p>下面对 <code> 你的名字.github.io </code> 文件夹下的 <code> _config.yml </code> 文件进行配置。</p><p>右键 <code> _config.yml </code> ，打开方式选VS Code（或者直接用VS Code打开该文件），</p><p>滑到最下面，把关于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:&#x27; &#x27;</span><br></pre></td></tr></table></figure><p>的这段代码补充为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/你的名字/你的名字.github.io #仓库地址</span><br><span class="line">  branch: main # 默认使用 master 分支(Github现在改名为main分支)</span><br><span class="line">  message: Update Hexo Static Content # 自定义的此次部署更新的说明</span><br></pre></td></tr></table></figure><p>Ctrl+S保存代码，然后退出VS Code，部署！</p><p>终端里输入命令 <code> hexo deploy </code> 后（或者缩写为  hexo d  ）回车，我的电脑显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;hexo deploy</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Setting up Git deployment...</span><br><span class="line">Initialized empty Git repository in E:/BarryFlynn/Github/Barry-Flynn.github.io/.deploy_git/.git/</span><br><span class="line">Author identity unknown</span><br><span class="line"> </span><br><span class="line">*** Please tell me who you are.</span><br><span class="line"> </span><br><span class="line">Run</span><br><span class="line"> </span><br><span class="line">  git config --global user.email &quot;you@example.com&quot;</span><br><span class="line">  git config --global user.name &quot;Your Name&quot;</span><br><span class="line"> </span><br><span class="line">to set your account&#x27;s default identity.</span><br><span class="line">Omit --global to set the identity only in this repository.</span><br><span class="line"> </span><br><span class="line">fatal: unable to auto-detect email address (got &#x27;10272@DESKTOP-N3PNS7C.(none)&#x27;)</span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (E:\BarryFlynn\Github\Barry-Flynn.github.io\node_modules\hexo-util\lib\spawn.js:51:21)      at ChildProcess.emit (events.js:400:28)</span><br><span class="line">      at ChildProcess.cp.emit (E:\BarryFlynn\Github\Barry-Flynn.github.io\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;</span><br></pre></td></tr></table></figure><p>是的，部署出错（FATAL）了,“ Please tell me who you are.”</p><p>原来是创建git文件夹的时候信息不完善导致的，</p><p>它提示我需要运行（Run）下面两行程序，来设置我帐户的默认标识。</p><p>  git config –global user.email “<a href="mailto:&#121;&#x6f;&#x75;&#x40;&#x65;&#120;&#97;&#109;&#112;&#x6c;&#101;&#x2e;&#x63;&#111;&#109;">&#121;&#x6f;&#x75;&#x40;&#x65;&#120;&#97;&#109;&#112;&#x6c;&#101;&#x2e;&#x63;&#111;&#109;</a>“<br>  git config –global user.name “Your Name”</p><div class="note default no-icon flat"><p>注意双引号前有空格，邮箱随便填也可以，比如QQ邮箱啥的，</p><p>我用的这个邮箱查找路径是：点击Github主页右上角头像，点击settings，点击Emails，然后就能找到Github的这个邮箱了</p></div><p>那么我分别输入这两个命令按回车，执行两次代码，可见下方：<br>(如果你们没有报错，可以忽略这个)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;git config --global user.email &quot;Barry-Flynn@users.noreply.github.com&quot;</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;git config --global user.name &quot;Barry Flynn&quot;</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;</span><br></pre></td></tr></table></figure><p>再用命令 <code> git config -l </code> 查看所有的配置信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;git config -l</span><br><span class="line">diff.astextplain.textconv=astextplain</span><br><span class="line">filter.lfs.clean=git-lfs clean -- %f</span><br><span class="line">filter.lfs.smudge=git-lfs smudge -- %f</span><br><span class="line">filter.lfs.process=git-lfs filter-process</span><br><span class="line">filter.lfs.required=true</span><br><span class="line">http.sslbackend=openssl</span><br><span class="line">http.sslcainfo=E:/Git/mingw64/ssl/certs/ca-bundle.crt</span><br><span class="line">core.autocrlf=true</span><br><span class="line">core.fscache=true</span><br><span class="line">core.symlinks=false</span><br><span class="line">pull.rebase=false</span><br><span class="line">credential.helper=manager-core</span><br><span class="line">credential.https://dev.azure.com.usehttppath=true</span><br><span class="line">init.defaultbranch=master</span><br><span class="line">user.email=Barry-Flynn@users.noreply.github.com</span><br><span class="line">user.name=Barry Flynn</span><br><span class="line">core.repositoryformatversion=0</span><br><span class="line">core.filemode=false</span><br><span class="line">core.bare=false</span><br><span class="line">core.logallrefupdates=true</span><br><span class="line">core.symlinks=false</span><br><span class="line">core.ignorecase=true</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;</span><br></pre></td></tr></table></figure><p>可以看见下面这两条信息，代表信息以及完善上去了</p><p>user.email=<a href="mailto:&#x42;&#x61;&#114;&#x72;&#x79;&#x2d;&#x46;&#108;&#x79;&#110;&#110;&#x40;&#x75;&#115;&#x65;&#114;&#115;&#46;&#110;&#111;&#114;&#x65;&#x70;&#x6c;&#121;&#x2e;&#103;&#105;&#116;&#x68;&#x75;&#x62;&#46;&#x63;&#111;&#x6d;">&#x42;&#x61;&#114;&#x72;&#x79;&#x2d;&#x46;&#108;&#x79;&#110;&#110;&#x40;&#x75;&#115;&#x65;&#114;&#115;&#46;&#110;&#111;&#114;&#x65;&#x70;&#x6c;&#121;&#x2e;&#103;&#105;&#116;&#x68;&#x75;&#x62;&#46;&#x63;&#111;&#x6d;</a><br>user.name=Barry Flynn</p><p>那我就可以接着部署了！</p><p>终端里输入命令 <code> hexo deploy </code> 后（或者缩写为  hexo d  ）回车，这次，我的电脑却再次报错：<br>那一大坨的代码最底端为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access &#x27;https://github.com/Barry-Flynn/Barry-Flynn.github.io/&#x27;: OpenSSL SSL_read: Connection was reset, errno 10054</span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (E:\BarryFlynn\Github\Barry-Flynn.github.io\node_modules\hexo-util\lib\spawn.js:51:21)      at ChildProcess.emit (events.js:400:28)</span><br><span class="line">      at ChildProcess.cp.emit (E:\BarryFlynn\Github\Barry-Flynn.github.io\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;</span><br></pre></td></tr></table></figure><p>我电脑怎么又报错了？我很晕。问了群里大佬，说可能是网络问题。好吧，秒懂，咳咳咳……差点忘了GitHub服务器在国外啊！</p><p>解决方法是多 hexo d 几次或者那个啥…咳咳…<br>我第三次输入命令 <code> hexo deploy </code> ，回车</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;hexo deploy</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend dirs...</span><br><span class="line">warning: LF will be replaced by CRLF in 2021/08/25/hello-world/index.html.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">warning: LF will be replaced by CRLF in archives/2021/08/index.html.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">warning: LF will be replaced by CRLF in archives/2021/index.html.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">warning: LF will be replaced by CRLF in archives/index.html.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">warning: LF will be replaced by CRLF in css/fonts/fontawesome-webfont.svg.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">warning: LF will be replaced by CRLF in css/style.css.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">warning: LF will be replaced by CRLF in fancybox/jquery.fancybox.min.js.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">warning: LF will be replaced by CRLF in index.html.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">warning: LF will be replaced by CRLF in js/jquery-3.4.1.min.js.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">warning: LF will be replaced by CRLF in js/script.js.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">info: please complete authentication in your browser...</span><br><span class="line">Enumerating objects: 31, done.</span><br><span class="line">Counting objects: 100% (31/31), done.</span><br><span class="line">Delta compression using up to 4 threads</span><br><span class="line">Compressing objects: 100% (25/25), done.</span><br><span class="line">Writing objects: 100% (31/31), 882.21 KiB | 4.98 MiB/s, done.</span><br><span class="line">Total 31 (delta 3), reused 0 (delta 0), pack-reused 0</span><br><span class="line">remote: Resolving deltas: 100% (3/3), done.</span><br><span class="line">To https://github.com/Barry-Flynn/Barry-Flynn.github.io</span><br><span class="line"> + 4b62927...a9fc5f8 HEAD -&gt; main (forced update)</span><br><span class="line">Branch &#x27;master&#x27; set up to track remote branch &#x27;main&#x27; from &#x27;https://github.com/Barry-Flynn/Barry-Flynn.github.io&#x27;.</span><br><span class="line">[32mINFO [39m Deploy done: [35mgit[39m</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;</span><br></pre></td></tr></table></figure><p>成功了！Ohhhhhhhhhhh~</p><p>等待完成后，打开网址 <code> https://你的名字.github.io </code> ,稍等片刻不要着急，刷新一下就能看到你的线上网站了！</p><div class="note default no-icon flat"><ul><li>建议使用 https，因为 http 可能无法正常打开。HTTPS 是多了安全加密的 HTTP，Chrome 浏览器已经默认会显示 http 链接为不安全。为了安全，建议开启强制 https 跳转。<br>前往GitHub项目地址页面 -&gt; Settings -&gt; Options -&gt; GitHub Pages -&gt; Enforce HTTPS。（翻到下面）<br>此时，http 网址会自动重定向到 https</li></ul><p><em>——（云游君）</em></p><ul><li>但我根据这个去找了一些，我的GitHub Pages默认设置就是https，所以我不用管了。</li></ul></div><h2 id="十、备份-hexo-源代码分支"><a href="#十、备份-hexo-源代码分支" class="headerlink" title="十、备份 hexo 源代码分支"></a>十、备份 hexo 源代码分支</h2><p>我们当前只是将生成的静态文件部署到了云端，准确的说只是将生成文件 存进了 GitHub 的 main（或叫master）分支。<br>为了以防万一，我们应该将网站的源代码(也就是 hexo分支 里的)源文件也推送到 GitHub 仓库的 hexo分支 进行备份。</p><p>输入下方代码按回车，与远程 Git 仓库建立连接，只此一次即可，以后无需输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/你的用户名/你的名字.github.io</span><br></pre></td></tr></table></figure><p>但当时在这个时候我手抖了，这行代码后面那个仓库链接我还没输入完，输入了 <a href="https://github.com/Barry-Flynn">https://github.com/Barry-Flynn</a> 就按了回车。<br>查了一下，我需要运行输入 <code> git remote rm origin </code> 删除远程地址，然后再输入一遍正确的命令与远程 Git 仓库建立连接就行了：<br>（你们不用执行这一步哦，我是因为输错地址导致绑定错了）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;git remote rm origin</span><br><span class="line"> </span><br><span class="line">E:\BarryFlynn\Github\Barry-Flynn.github.io&gt;git remote add origin https://github.com/Barry-Flynn/Barry-Flynn.github.io</span><br></pre></td></tr></table></figure><p>好了，接下来大家准备提交，<br>第一次提交时，你可能需先运行下面命令设置一下默认提交分支,以后不用再输入这个了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --set-upstream origin hexo</span><br></pre></td></tr></table></figure><p>将网站的源代码(也就是 hexo分支 里的)源文件也推送到 GitHub 仓库的 hexo分支 进行备份的三行命令是<br>（括号内为注释，不用输入哈！）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">（添加到缓存区）</span><br><span class="line">git add -A</span><br><span class="line"> </span><br><span class="line">（这次做了什么更改，简单描述下即可）</span><br><span class="line">git commit -m &quot;你的更新描述&quot;</span><br><span class="line"> </span><br><span class="line">（推送至远程仓库）</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>最后那句命令如果push不上去的话多试几次，或者“科学的上网”，你懂得。</p><h2 id="十一、打开网址查看效果"><a href="#十一、打开网址查看效果" class="headerlink" title="十一、打开网址查看效果"></a>十一、打开网址查看效果</h2><p>如果与之前本地预览时一样，就代表成功了。<br><img src="https://i.loli.net/2021/09/16/5B9MpQ3FWmbUuKC.png" alt="hexo博客搭建成功页面.png"></p><br /><br /><br /><br /><br /><b><font size=6>恭喜你有自己博客啦！</font></b><br /><b><font size=2>下篇文章我会讲讲怎么创作和更换好看的博客主题</font></b><br /><b><font size=6>THE END.</font></b><hr><div class="note green no-icon flat"><p>嘿咻~终于写完了 <del>快累死我了</del> ，很开心！<br>看到这篇文章写了八千三百多字我也很惊讶，如果能对你有一些帮助，可以根据心情在文章末尾进行小小的打赏支持啊，一分一毛一块也是爱。[真诚.jpg]<br>另外，我可能后续还会更新相关文章，确定不收藏我的博客网站吗？[乖巧.jpg]<br>哈哈好啦，感谢能够读到这里的你，祝你学习进步、生活愉快，我们有缘再见（或许吧）！See you！</p></div><div class="note red no-icon flat"><p>本篇文章为 <a href="https://barry-flynn.github.io/">百里飞洋丨Barry Flynn</a> 版权所有，<br>转载与分享请务必携带原文链接：<a href="https://barry-flynn.github.io/2021/09/15/2021-1/">https://barry-flynn.github.io/2021/09/15/2021-1/</a><br>侵权必究！！！</p></div><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><b><font size=4>感谢下方作者提供技术参考:</font></b><br>1、《教你如何从零开始搭建一个属于自己的网站》<br>-作者云游君 - 地址<a href="https://www.yunyoujun.cn/share/how-to-build-your-site/">https://www.yunyoujun.cn/share/how-to-build-your-site/</a><br>2、《手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo》<br>-作者CodeSheep - 哔哩哔哩<a href="https://www.bilibili.com/video/BV1Yb411a7ty/">https://www.bilibili.com/video/BV1Yb411a7ty/</a><br>3、《基于 Github Action 的 CI/CD 流程》<br>-作者Feng Nie - 知乎<a href="https://zhuanlan.zhihu.com/p/250534172">https://zhuanlan.zhihu.com/p/250534172</a></p><hr><h1 id="我的陌生知识点积累"><a href="#我的陌生知识点积累" class="headerlink" title="我的陌生知识点积累"></a>我的陌生知识点积累</h1><ul><li><p>SEO（Search Engine Optimization）：汉译为搜索引擎优化。是一种方式：利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。目的是让其在行业内占据领先地位，获得品牌收益。很大程度上是网站经营者的一种商业行为，将自己或自己公司的排名前移。</p></li><li><p>Github Actions：是由Github创建推出的持续集成 (Con­tin­u­ous in­te­gra­tion，简称 CI) 服务。 它提供了配置非常不错的虚拟服务器环境，目的是使所有软件开发工作流程的自动化变得容易，可直接从GitHub构建，测试、打包和部署项目代码。CI（持续集成）由很多操作组成，比如代码合并、运行测试、登录远程服务器，发布到第三方服务等等。Github Actions 的最大优势就是它是与 GitHub 高度整合的，只需一个配置文件即可自动开启服务。甚至你不需要购买服务器，因为 GitHub Actions 自带云环境运行，包括私有仓库也可以享用，而且云环境性能也非常不错。持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。</p></li><li><p>持续集成指的是，频繁地（一天多次）将代码集成到主干。 它的好处主要有两个：<br>（1）快速发现错误。每完成一点更新，就集成到主干，可以快速发现错误，定位错误也比较容易。<br>（2）防止分支大幅偏离主干。如果不是经常集成，主干又在不断更新，会导致以后集成的难度变大，甚至难以集成。</p></li><li><p>持续交付（Continuous delivery）指的是，频繁地将软件的新版本，交付给质量团队或者用户，以供评审。如果评审通过，代码就进入生产阶段。 持续交付可以看作持续集成的下一步。它强调的是，不管怎么更新，软件是随时随地可以交付的。</p></li><li><p>持续部署（Continuous deployment，简称CD）是持续交付的下一步，指的是代码通过评审以后，自动部署到生产环境。持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 博客折腾记 </tag>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
            <tag> VScode </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客文章</title>
      <link href="/2021/09/02/2021-0/"/>
      <url>/2021/09/02/2021-0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hello，我是百里飞洋。前些日子用了很大功夫学会把Hexo博客部署到Github Pages上，今天开始写这第一篇博客了。</p><hr><h2 id="如何制作这样的博客"><a href="#如何制作这样的博客" class="headerlink" title="如何制作这样的博客"></a>如何制作这样的博客</h2><p>Emm…其实我的学习过程是很曲折的，因为这种学校老师不教的东西只能想方设法在网上找别人的文章或者教程视频一点点摸索和理解。截止此篇博客发出时，我已经将搭建方法以系列笔记文章的形式发布到了CSDN以及阿里云开发者社区。如果想跟着我的总结进行搭建的朋友们可以直接去搜索我的名字，在主页找就行了，基本上算非常详细的教程了。当然，是免费文章啦！后期也打算总结整理一下搭建过程中遇到的一些问题，整理出更详细的博客搭建教程，并发布在这个博客上。</p><hr><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>我是一个00后小白程序员，平时可能比较中二，在各个平台也基本上都可以找到我，比如：</p><ul><li><p>哔哩哔哩 :<a href="https://space.bilibili.com/349963315">点击这里跳转我的B站</a></p></li><li><p>新浪微博 :<a href="https://weibo.com/6327778914/profile?rightmod=1&wvr=6&mod=personinfo&is_all=1">点击这里跳转我的微博</a></p></li><li><p>微信公众号：<a href="https://mp.weixin.qq.com/s/m1Ls3804TJ_Ag0s6kg8WeA">百里飞洋</a>（但目前暂时还没有在这个上面发东西的欲望）</p></li></ul><p>有时候喜欢自说自话发表一些“贼幼稚”的鸡汤和牢骚啥的，上传着关于梦想、成长、编程、沙雕等等各种类型的图片和视频。如果在哪看见了我，可以跟我打个招呼啊！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/08/25/hello-world/"/>
      <url>/2021/08/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
